{"version":3,"sources":["ethereum.js","NavBar/MenuItems.js","assets/img/logo.svg","NavBar/NavBar.js","constants/coins.js","ethereumFunctions.js","CurrencySwapper/CurrencyField.js","CurrencySwapper/CurrencyButton.js","CurrencySwapper/CurrencyDialog.js","Components/LoadingButton.js","CurrencySwapper/CurrencySwapper.js","LiquidityDeployer/LiquidityDeployer.js","LiquidityDeployer/RemoveLiquidity.js","LiquidityDeployer/Liquidity.js","App.js","reportWebVitals.js","index.js"],"names":["ROUTER","require","ERC20","FACTORY","PAIR","Component","MenuItems","title","url","cName","NavBar","state","clicked","className","src","logo","map","item","index","to","AUTONITY","name","abbr","address","TOKEN_A","TOKEN_B","TOKEN_C","TOKEN_D","ALL","getProvider","ethers","providers","Web3Provider","window","ethereum","getSigner","provider","getRouter","signer","Contract","abi","getWeth","getFactory","getAccount","a","request","method","accounts","router","token1_address","token2_address","getAmountsOut","utils","parseEther","amount_out","rate","formatEther","Number","getBalanceAndSymbol","accountAddress","COINS","getBalance","balanceRaw","balance","symbol","token","balanceOf","address1","address2","amount","routerContract","currencies","time","Math","floor","Date","now","deadline","BigNumber","from","amountIn","toString","callStatic","amountOut","currency1","approve","swapExactETHForTokens","value","swapExactTokensForETH","swapExactTokensForTokens","getReserves","factory","getPair","pairAddress","pair","liquidityTokens_BN","LiquidityTokens","toFixed","reservesRaw","results","token0","token1","console","log","amount1","amount2","amount1min","amount2min","account","amountIn1","amountIn2","amount1Min","amount2Min","token2","addLiquidityETH","addLiquidity","then","values","liquidity_tokens","liquidity","removeLiquidityETH","removeLiquidity","useStyles","makeStyles","theme","container","padding","spacing","minHeight","backgroundColor","COLORS","borderRadius","borderColor","borderWidth","borderStyle","grid","height","fab","zIndex","input","typography","h5","width","inputBase","textAlign","CurrencyField_Reduced","props","classes","onClick","Grid","direction","justifyContent","alignItems","xs","Fab","size","variant","CurrencyField","onChange","activeField","InputBase","placeholder","disabled","root","button","paddingTop","paddingBottom","coinName","opacity","CurrencyButton","coinAbbr","ButtonBase","focusRipple","Typography","styles","dialogContainer","titleSection","titleText","alignSelf","hr","margin","paddingLeft","paddingRight","currencyList","overflowY","currencyContainer","marginTop","overflow","DialogTitle","withStyles","children","onClose","other","disableTypography","alignContent","IconButton","aria-label","DialogActions","MuiDialogActions","CurrencyDialog","open","coins","React","useState","setAddress","error","setError","exit","Dialog","undefined","fullWidth","maxWidth","paper","TextField","e","target","helperText","coin","Button","autoFocus","err","doesTokenExist","color","wrapper","position","success","green","fail","red","progress","top","left","marginLeft","LoadingButton","loading","valid","type","CircularProgress","paperContainer","switchButton","marginBottom","CurrencySwapper","enqueueSnackbar","useSnackbar","dialog1Open","setDialog1Open","dialog2Open","setDialog2Open","setCurrency1","currency2","setCurrency2","conversionRate","setConversionRate","reserves","setReserves","field1Value","setField1Value","field2Value","setField2Value","setAccount","setLoading","switchFields","reverse","handleChange","field1","formatBalance","parseFloat","toPrecision","formatReserve","reserve","useEffect","getConversionRate","data","isNaN","currencyTimeout","setTimeout","clearTimeout","Container","Paper","fontSize","validFloat","RegExp","test","isButtonEnabled","swapCurrency","catch","message","autoHideDuration","buttonIcon","marginRight","LiquidityDeployer","setLiquidity_tokens","oldField1Value","oldField2Value","field2","addLiquidityTest","LiquidityRemover","Liquidity","deploy","setDeploy","changeStyles","K","document","getElementById","style","ButtonGroup","id","text","deploy_or_remove","createTheme","palette","primary","main","contrastText","secondary","App","maxSnack","ThemeProvider","exact","path","component","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode"],"mappings":"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","file":"static/js/main.574112dd.chunk.js","sourcesContent":["import {Contract, ethers} from \"ethers\";\nimport {Component} from \"react\";\n\nconst ROUTER = require(\"./build/UniswapV2Router02.json\");\nconst ERC20 = require(\"./build/ERC20.json\");\nconst FACTORY = require(\"./build/IUniswapV2Factory.json\");\nconst PAIR = require(\"./build/IUniswapV2Pair.json\");\n\nexport class _App extends Component {\n  async loadBlockchainData() {\n    const accounts = await window.ethereum.request({\n      method: \"eth_requestAccounts\",\n    });\n    const provider = new ethers.providers.Web3Provider(window.ethereum);\n    const signer = provider.getSigner();\n    let balance_0 = await provider.getBalance(accounts[0]);\n    let balance_1 = ethers.utils.formatEther(balance_0);\n\n    this.setState({ account: accounts[0] });\n    this.setState({ provider: provider });\n    this.setState({ signer: signer });\n    this.setState({ balance: balance_1 });\n\n    const Router = new Contract(\n        this.state.Router_address,\n        ROUTER.abi,\n        this.state.signer\n    );\n\n    const Weth = new Contract(\n        this.state.Weth_address,\n        ERC20.abi,\n        this.state.signer\n    );\n\n    const Factory = new Contract(\n        this.state.Factory_address,\n        FACTORY.abi,\n        this.state.provider\n    );\n\n    this.setState({ Router: Router });\n    this.setState({ Weth: Weth });\n    this.setState({ Factory: Factory });\n  }\n\n  async getTokenAData(address) {\n    try {\n      const TokenA = new Contract(address, ERC20.abi, this.state.signer);\n\n      const TokenA_balance_0 = await TokenA.balanceOf(this.state.account);\n      const TokenA_balance_1 = ethers.utils.formatEther(TokenA_balance_0);\n      const TokenA_symbol = await TokenA.symbol();\n\n      this.setState({ TokenA_balance: TokenA_balance_1 });\n      this.setState({ TokenA: TokenA });\n      document.getElementById(\"TokenA_message\").innerHTML =\n          TokenA_symbol.concat(\" balance: \");\n    } catch (err) {\n      document.getElementById(\"TokenA_message\").innerHTML =\n          \"Error: Please enter a valid token address\";\n    }\n  }\n\n  async getTokenBData(address) {\n    try {\n      const TokenB = new Contract(address, ERC20.abi, this.state.signer);\n\n      const TokenB_balance_0 = await TokenB.balanceOf(this.state.account);\n      const TokenB_balance_1 = ethers.utils.formatEther(TokenB_balance_0);\n      const TokenB_symbol = await TokenB.symbol();\n\n      this.setState({ TokenB_balance: TokenB_balance_1 });\n      this.setState({ TokenB: TokenB });\n      document.getElementById(\"TokenB_message\").innerHTML =\n          TokenB_symbol.concat(\" balance: \");\n    } catch (err) {\n      document.getElementById(\"TokenB_message\").innerHTML =\n          \"Error: Please enter a valid token address\";\n    }\n  }\n\n  async getPair(address0, address1) {\n    if (this.state.TokenA !== undefined && this.state.TokenB !== undefined) {\n      const Factory = this.state.Factory;\n      const pairAddress = await Factory.getPair(address0, address1);\n\n      const pair = new Contract(pairAddress, PAIR.abi, this.state.signer);\n      const reserves_BN = await pair.getReserves();\n\n      const reserves0 = Number(\n          ethers.utils.formatEther(reserves_BN[0])\n      ).toFixed(2);\n      const reserves1 = Number(\n          ethers.utils.formatEther(reserves_BN[1])\n      ).toFixed(2);\n\n      return [reserves0, reserves1];\n    }\n  }\n}\n\nexport default _App;\n","export const MenuItems = [\n  {\n    title: \"Swap\",\n    url: \"/uniswap-react/\",\n    cName: \"nav-links\",\n  },\n  {\n    title: \"Liquidity\",\n    url: \"/uniswap-react/liquidity\",\n    cName: \"nav-links\",\n  },\n];\n","export default __webpack_public_path__ + \"static/media/logo.28418735.svg\";","import React, { Component } from \"react\";\nimport { Link } from \"react-router-dom\";\nimport { MenuItems } from \"./MenuItems\";\nimport logo from \"../assets/img/logo.svg\";\nimport \"./NavBar.css\";\n\nclass NavBar extends Component {\n  state = { clicked: false };\n\n  render() {\n    return (\n      <nav>\n        <div className=\"Title\">\n          <h1 className=\"navbar-logo\">\n            <img src={logo} className=\"logo\"></img> Autonity Uniswap\n          </h1>\n        </div>\n\n        <div className=\"NavbarItems\">\n          <ul className={`nav-menu`}>\n            {MenuItems.map((item, index) => {\n              return (\n                <li key={index}>\n                  <Link className={\"nav-links\"} to={item.url}>\n                    {item.title}\n                  </Link>\n                </li>\n              );\n            })}\n          </ul>\n        </div>\n      </nav>\n    );\n  }\n}\n\nexport default NavBar;\n","export const AUTONITY = {\n  name: \"Autonity\", // TODO Is this right?\n  abbr: \"AUT\",\n  address: \"0x3f0D1FAA13cbE43D662a37690f0e8027f9D89eBF\",\n};\n\nexport const TOKEN_A = {\n  name: \"Token A\",\n  abbr: \"TA\",\n  address: \"0x1d29BD2ACedBff15A59e946a4DE26d5257447727\",\n};\n\nexport const TOKEN_B = {\n  name: \"Token B\",\n  abbr: \"TB\",\n  address: \"0xc108a13D00371520EbBeCc7DF5C8610C71F4FfbA\",\n};\n\nexport const TOKEN_C = {\n  name: \"Token C\",\n  abbr: \"TC\",\n  address: \"0xC8E25055A4666F39179abE06d466F5A98423863F\",\n};\n\nexport const TOKEN_D = {\n  name: \"Token D\",\n  abbr: \"TD\",\n  address: \"0x23238098F2B4dd9Ba3bb8bc78b639dD113da697e\",\n};\n\nexport const ALL = [AUTONITY, TOKEN_A, TOKEN_B, TOKEN_C, TOKEN_D];\nexport const ALL_WITHOUT_AUTONITY = [TOKEN_A, TOKEN_B, TOKEN_C, TOKEN_D];\n","import { Contract, ethers } from \"ethers\";\nimport * as COINS from \"./constants/coins\";\n\nconst ROUTER = require(\"./build/UniswapV2Router02.json\");\nconst ERC20 = require(\"./build/ERC20.json\");\nconst FACTORY = require(\"./build/IUniswapV2Factory.json\");\nconst PAIR = require(\"./build/IUniswapV2Pair.json\");\n\nexport function getProvider() {\n  return new ethers.providers.Web3Provider(window.ethereum);\n}\n\nexport function getSigner(provider) {\n  return provider.getSigner();\n}\n\nexport function getRouter(address, signer) {\n  return new Contract(address, ROUTER.abi, signer);\n}\n\nexport function getWeth(address, signer) {\n  return new Contract(address, ERC20.abi, signer);\n}\n\nexport function getFactory(address, signer) {\n  return new Contract(address, FACTORY.abi, signer);\n}\n\nexport async function getAccount() {\n  const accounts = await window.ethereum.request({\n    method: \"eth_requestAccounts\",\n  });\n\n  return accounts[0];\n}\n\nexport async function getConversionRate(\n  router,\n  token1_address,\n  token2_address\n) {\n  try {\n    const amount_out = await router.getAmountsOut(\n      ethers.utils.parseEther(\"1\"),\n      [token1_address, token2_address]\n    );\n    const rate = ethers.utils.formatEther(amount_out[1]);\n    return Number(rate);\n  } catch {\n    return false;\n  }\n}\n\n// This function returns an object with 2 fields: `balance` which container's the account's balance in the particular currency,\n// and `symbol` which is the abbreviation of the token name. To work correctly it must be provided with 4 arguments:\n//    `accountAddress` - An Ethereum address of the current user's account\n//    `address` - An Ethereum address of the currency to check for (either a token or AUT)\n//    `provider` - The current provider\n//    `signer` - The current signer\nexport async function getBalanceAndSymbol(\n  accountAddress,\n  address,\n  provider,\n  signer\n) {\n  try {\n    if (address === COINS.AUTONITY.address) {\n      const balanceRaw = await provider.getBalance(accountAddress);\n\n      return {\n        balance: ethers.utils.formatEther(balanceRaw),\n        symbol: COINS.AUTONITY.abbr,\n      };\n    } else {\n      const token = new Contract(address, ERC20.abi, signer);\n      const balanceRaw = await token.balanceOf(accountAddress);\n      const symbol = await token.symbol();\n\n      return {\n        balance: ethers.utils.formatEther(balanceRaw),\n        symbol: symbol,\n      };\n    }\n  } catch (err) {\n    return false;\n  }\n}\n\nexport function doesTokenExist(address, signer) {\n  try {\n    return new Contract(address, ERC20.abi, signer);\n  } catch (err) {\n    return false;\n  }\n}\n\n// This function swaps two particular currencies, it can handle switching from Eth to Token, Token to Eth, and Token to Token.\n// No error handling is done, so any issues can be caught with the use of .catch()\n// To work correctly, there needs to be 7 arguments:\n//    `address1` - An Ethereum address of the currency to trade from (either a token or AUT)\n//    `address2` - An Ethereum address of the currency to trade to (either a token or AUT)\n//    `amount` - A float or similar number representing the value of address1's currency to trade\n//    `routerContract` - The router contract to carry out this trade\n//    `accountAddress` - An Ethereum address of the current user's account\n//    `provider` - The current provider\n//    `signer` - The current signer\nexport async function swapCurrency(\n  address1,\n  address2,\n  amount,\n  routerContract,\n  accountAddress,\n  provider,\n  signer\n) {\n  const currencies = [address1, address2];\n  const time = Math.floor(Date.now() / 1000) + 200000;\n  const deadline = ethers.BigNumber.from(time);\n\n  const amountIn = ethers.utils.parseEther(amount.toString());\n  const amountOut = await routerContract.callStatic.getAmountsOut(\n    amountIn,\n    currencies\n  );\n\n  const currency1 = new Contract(address1, ERC20.abi, signer);\n  await currency1.approve(routerContract.address, amountIn);\n\n  if (address1 === COINS.AUTONITY.address) {\n    // Eth -> Token\n    await routerContract.swapExactETHForTokens(\n      amountOut[1],\n      currencies,\n      accountAddress,\n      deadline,\n      { value: amountIn }\n    );\n  } else if (address2 === COINS.AUTONITY.address) {\n    // Token -> Eth\n    await routerContract.swapExactTokensForETH(\n      amountIn,\n      amountOut[1],\n      currencies,\n      accountAddress,\n      deadline\n    );\n  } else {\n    await routerContract.swapExactTokensForTokens(\n      amountIn,\n      amountOut[1],\n      currencies,\n      accountAddress,\n      deadline\n    );\n  }\n}\n\n// This function returns the reserves stored in a the liquidity pool between the currency of address1 and the currency\n// of address2. Some extra logic was needed to make sure that the results were returned in the correct order, as\n// `pair.getReserves()` would always return the reserves in the same order regardless of which order the addresses were.\n//    `address1` - An Ethereum address of the currency to trade from (either a token or AUT)\n//    `address2` - An Ethereum address of the currency to trade to (either a token or AUT)\n//    `factory` - The current factory\n//    `signer` - The current signer\nexport async function getReserves(\n  address1,\n  address2,\n  factory,\n  signer,\n  accountAddress\n) {\n  const pairAddress = await factory.getPair(address1, address2);\n  const pair = new Contract(pairAddress, PAIR.abi, signer);\n\n  try {\n    const liquidityTokens_BN = await pair.balanceOf(accountAddress);\n    const LiquidityTokens = Number(\n      ethers.utils.formatEther(liquidityTokens_BN)\n    ).toFixed(2);\n\n    const reservesRaw = await pair.getReserves();\n\n    let results = [\n      Number(ethers.utils.formatEther(reservesRaw[0])).toFixed(2),\n      Number(ethers.utils.formatEther(reservesRaw[1])).toFixed(2),\n    ];\n\n    return [\n      (await pair.token0()) === address1 ? results[0] : results[1],\n      (await pair.token1()) === address2 ? results[1] : results[0],\n      LiquidityTokens,\n    ];\n  } catch (err) {\n    console.log(\"no reserves yet\");\n    return [0, 0, 0];\n  }\n}\n\n// Function used to add Liquidity to any pair of tokens or token-AUT\n// To work correctly, there needs to be 9 arguments:\n//    `address1` - An Ethereum address of the currency to add from (either a token or AUT)\n//    `address2` - An Ethereum address of the currency to add to (either a token or AUT)\n//    `amount1` - A float or similar number representing the value of address1's currency to add\n//    `amount2` - A float or similar number representing the value of address2's currency to add\n//    `amount1Min` - A float or similar number representing the minimum of address1's currency to add\n//    `amount2Min` - A float or similar number representing the minimum of address2's currency to add\n//    `routerContract` - The router contract to carry out this trade\n//    `accountAddress` - An Ethereum address of the current user's account\n//    `provider` - The current provider\n//    `signer` - The current signer\nexport async function addLiquidity(\n  address1,\n  address2,\n  amount1,\n  amount2,\n  amount1min,\n  amount2min,\n  routerContract,\n  account,\n  signer\n) {\n  const amountIn1 = ethers.utils.parseEther(amount1.toString());\n  const amountIn2 = ethers.utils.parseEther(amount2.toString());\n\n  const amount1Min = ethers.utils.parseEther(amount1min.toString());\n  const amount2Min = ethers.utils.parseEther(amount2min.toString());\n\n  const time = Math.floor(Date.now() / 1000) + 200000;\n  const deadline = ethers.BigNumber.from(time);\n\n  const token1 = new Contract(address1, ERC20.abi, signer);\n  const token2 = new Contract(address2, ERC20.abi, signer);\n\n  await token1.approve(routerContract.address, amountIn1);\n  await token2.approve(routerContract.address, amountIn2);\n\n  console.log([\n    address1,\n    address2,\n    Number(amountIn1),\n    Number(amountIn2),\n    Number(amount1Min),\n    Number(amount2Min),\n    account,\n    deadline,\n  ]);\n\n  if (address1 === COINS.AUTONITY.address) {\n    // Eth + Token\n    await routerContract.addLiquidityETH(\n      address2,\n      amountIn2,\n      amount2Min,\n      amount1Min,\n      account,\n      deadline,\n      { value: amountIn1 }\n    );\n  } else if (address2 === COINS.AUTONITY.address) {\n    // Token + Eth\n    await routerContract.addLiquidityETH(\n      address1,\n      amountIn1,\n      amount1Min,\n      amount2Min,\n      account,\n      deadline,\n      { value: amountIn2 }\n    );\n  } else {\n    // Token + Token\n    await routerContract.addLiquidity(\n      address1,\n      address2,\n      amountIn1,\n      amountIn2,\n      amount1Min,\n      amount2Min,\n      account,\n      deadline\n    );\n  }\n}\n\n// Exactly the same as above but executes a static call to get the result of the liquidity addition for a preview\nexport async function addLiquidityTest(\n  address1,\n  address2,\n  amount1,\n  amount2,\n  amount1min,\n  amount2min,\n  routerContract,\n  account,\n  signer\n) {\n  const amountIn1 = ethers.utils.parseEther(amount1.toString());\n  const amountIn2 = ethers.utils.parseEther(amount2.toString());\n\n  const amount1Min = ethers.utils.parseEther(amount1min.toString());\n  const amount2Min = ethers.utils.parseEther(amount2min.toString());\n\n  const time = Math.floor(Date.now() / 1000) + 200000;\n  const deadline = ethers.BigNumber.from(time);\n\n  if (address1 === COINS.AUTONITY.address) {\n    // Eth + Token\n    await routerContract.callStatic\n      .addLiquidityETH(\n        address2,\n        amountIn2,\n        amount2Min,\n        amount1Min,\n        account,\n        deadline,\n        { value: amountIn1 }\n      )\n      .then((values) => {\n        console.log(values);\n        console.log(\"tokenA in: \", ethers.utils.formatEther(values[0]));\n        console.log(\"tokenB in: \", ethers.utils.formatEther(values[1]));\n        console.log(\n          \"liquidity tokens out: \",\n          ethers.utils.formatEther(values[2])\n        );\n      });\n  } else if (address2 === COINS.AUTONITY.address) {\n    // Token + Eth\n    await routerContract.callStatic\n      .addLiquidityETH(\n        address1,\n        amountIn1,\n        amount1Min,\n        amount2Min,\n        account,\n        deadline,\n        { value: amountIn2 }\n      )\n      .then((values) => {\n        console.log(values);\n        console.log(values);\n        console.log(\"tokenA in: \", ethers.utils.formatEther(values[0]));\n        console.log(\"tokenB in: \", ethers.utils.formatEther(values[1]));\n        console.log(\n          \"liquidity tokens out: \",\n          ethers.utils.formatEther(values[2])\n        );\n      });\n  } else {\n    // Token + Token\n    await routerContract.callStatic\n      .addLiquidity(\n        address1,\n        address2,\n        amountIn1,\n        amountIn2,\n        amount1Min,\n        amount2Min,\n        account,\n        deadline\n      )\n      .then((values) => {\n        console.log(values);\n        console.log(values);\n        console.log(\"tokenA in: \", ethers.utils.formatEther(values[0]));\n        console.log(\"tokenB in: \", ethers.utils.formatEther(values[1]));\n        console.log(\n          \"liquidity tokens out: \",\n          ethers.utils.formatEther(values[2])\n        );\n      });\n  }\n}\n\n// Function used to remove Liquidity from any pair of tokens or token-AUT\n// To work correctly, there needs to be 9 arguments:\n//    `address1` - An Ethereum address of the currency to recieve (either a token or AUT)\n//    `address2` - An Ethereum address of the currency to recieve (either a token or AUT)\n//    `liquidity_tokens` - A float or similar number representing the value of liquidity tokens you will burn to get tokens back\n//    `amount1Min` - A float or similar number representing the minimum of address1's currency to recieve\n//    `amount2Min` - A float or similar number representing the minimum of address2's currency to recieve\n//    `routerContract` - The router contract to carry out this trade\n//    `accountAddress` - An Ethereum address of the current user's account\n//    `provider` - The current provider\n//    `signer` - The current signer\nexport async function removeLiquidity(\n  address1,\n  address2,\n  liquidity_tokens,\n  amount1min,\n  amount2min,\n  routerContract,\n  account,\n  signer,\n  factory\n) {\n  const liquidity = ethers.utils.parseEther(liquidity_tokens.toString());\n\n  const amount1Min = ethers.utils.parseEther(amount1min.toString());\n  const amount2Min = ethers.utils.parseEther(amount2min.toString());\n\n  const time = Math.floor(Date.now() / 1000) + 200000;\n  const deadline = ethers.BigNumber.from(time);\n\n  const pairAddress = await factory.getPair(address1, address2);\n  const pair = new Contract(pairAddress, PAIR.abi, signer);\n\n  await pair.approve(routerContract.address, liquidity);\n\n  console.log([\n    address1,\n    address2,\n    Number(liquidity),\n    Number(amount1Min),\n    Number(amount2Min),\n    account,\n    deadline,\n  ]);\n\n  if (address1 === COINS.AUTONITY.address) {\n    // Eth + Token\n    await routerContract.removeLiquidityETH(\n      address2,\n      liquidity,\n      amount2Min,\n      amount1Min,\n      account,\n      deadline\n    );\n  } else if (address2 === COINS.AUTONITY.address) {\n    // Token + Eth\n    await routerContract.removeLiquidity(\n      address1,\n      liquidity,\n      amount1Min,\n      amount2Min,\n      account,\n      deadline\n    );\n  } else {\n    // Token + Token\n    await routerContract.removeLiquidity(\n      address1,\n      address2,\n      liquidity,\n      amount1Min,\n      amount2Min,\n      account,\n      deadline\n    );\n  }\n}\n","import React from \"react\";\nimport { Fab, Grid, InputBase, makeStyles } from \"@material-ui/core\";\nimport ExpandMoreIcon from \"@material-ui/icons/ExpandMore\";\nimport PropTypes from \"prop-types\";\nimport * as COLORS from \"@material-ui/core/colors\";\n\nconst useStyles = makeStyles((theme) => ({\n  container: {\n    padding: theme.spacing(1),\n    minHeight: \"80px\",\n    backgroundColor: COLORS.grey[50],\n    borderRadius: theme.spacing(2),\n    borderColor: COLORS.grey[300],\n    borderWidth: \"1px\",\n    borderStyle: \"solid\",\n  },\n  grid: {\n    height: \"60px\",\n  },\n  fab: {\n    zIndex: \"0\",\n  },\n  input: {\n    ...theme.typography.h5,\n    width: \"100%\",\n  },\n  inputBase: {\n    textAlign: \"right\",\n  },\n}));\n\nCurrencyField.propTypes = {\n  onClick: PropTypes.func.isRequired,\n  symbol: PropTypes.string.isRequired,\n  value: PropTypes.string.isRequired,\n  onChange: PropTypes.func,\n  activeField: PropTypes.bool.isRequired,\n};\n\nexport function CurrencyField_Reduced(props) {\n  // This component is used to selecting a currency and entering a value, the props are explained below:\n  //      onClick - (string) => void - Called when the button is clicked\n  //      symbol - string - The text displayed on the button\n  //      value - string - The value of the text field\n  //      onChange - (e) => void - Called when the text field changes\n  //      activeField - boolean - Whether text can be entered into this field or not\n\n  const classes = useStyles();\n  const { onClick, symbol } = props;\n\n  return (\n    <div className={classes.container}>\n      <Grid\n        container\n        direction=\"row\"\n        justifyContent=\"space-between\"\n        alignItems=\"center\"\n        className={classes.grid}\n      >\n        {/* Button */}\n        <Grid item xs={3}>\n          <Fab\n            size=\"small\"\n            variant=\"extended\"\n            onClick={onClick}\n            className={classes.fab}\n          >\n            {symbol}\n            <ExpandMoreIcon />\n          </Fab>\n        </Grid>\n      </Grid>\n    </div>\n  );\n}\n\nexport default function CurrencyField(props) {\n  // This component is used to selecting a currency and entering a value, the props are explained below:\n  //      onClick - (string) => void - Called when the button is clicked\n  //      symbol - string - The text displayed on the button\n  //      value - string - The value of the text field\n  //      onChange - (e) => void - Called when the text field changes\n  //      activeField - boolean - Whether text can be entered into this field or not\n\n  const classes = useStyles();\n  const { onClick, symbol, value, onChange, activeField } = props;\n\n  return (\n    <div className={classes.container}>\n      <Grid\n        container\n        direction=\"row\"\n        justifyContent=\"space-between\"\n        alignItems=\"center\"\n        className={classes.grid}\n      >\n        {/* Button */}\n        <Grid item xs={3}>\n          <Fab\n            size=\"small\"\n            variant=\"extended\"\n            onClick={onClick}\n            className={classes.fab}\n          >\n            {symbol}\n            <ExpandMoreIcon />\n          </Fab>\n        </Grid>\n\n        {/* Text Field */}\n        <Grid item xs={9}>\n          <InputBase\n            value={value}\n            onChange={onChange}\n            placeholder=\"0.0\"\n            disabled={!activeField}\n            classes={{ root: classes.input, input: classes.inputBase }}\n          />\n        </Grid>\n      </Grid>\n    </div>\n  );\n}\n","import React from \"react\";\nimport {ButtonBase, Grid, makeStyles, Typography} from \"@material-ui/core\";\nimport PropTypes from \"prop-types\";\nimport * as COLORS from \"@material-ui/core/colors\";\n\nconst useStyles = makeStyles((theme) => ({\n    button: {\n        width: \"100%\",\n        paddingTop: theme.spacing(0.5),\n        paddingBottom: theme.spacing(0.5),\n        '&:hover, &$focusVisible': {\n            backgroundColor: COLORS.grey[200]\n        },\n    },\n    coinName: {\n        opacity: 0.6\n    },\n}));\n\nCurrencyButton.propTypes = {\n    coinName: PropTypes.string.isRequired,\n    coinAbbr: PropTypes.string.isRequired,\n    onClick: PropTypes.func.isRequired\n}\n\nexport default function CurrencyButton(props) {\n    const {coinName, coinAbbr, onClick, ...other} = props;\n    const classes = useStyles();\n\n    return (\n        <ButtonBase\n            focusRipple\n            className={classes.button}\n            onClick={onClick}\n        >\n            <Grid container direction=\"column\">\n                <Typography variant=\"h6\">{coinAbbr}</Typography>\n                <Typography variant=\"body2\" className={classes.coinName}>{coinName}</Typography>\n            </Grid>\n        </ButtonBase>\n    )\n}","import React from \"react\";\nimport {\n    Button,\n    Dialog,\n    Grid,\n    IconButton, makeStyles,\n    TextField,\n    Typography,\n    withStyles\n} from \"@material-ui/core\";\nimport MuiDialogTitle from '@material-ui/core/DialogTitle';\nimport MuiDialogActions from '@material-ui/core/DialogActions';\nimport CloseIcon from '@material-ui/icons/Close';\nimport CurrencyButton from \"./CurrencyButton\";\nimport {doesTokenExist} from \"../ethereumFunctions\";\nimport PropTypes from \"prop-types\";\nimport * as COLORS from \"@material-ui/core/colors\"\n\nconst styles = (theme) => ({\n    dialogContainer: {\n        borderRadius: theme.spacing(2),\n    },\n    titleSection: {\n        padding: theme.spacing(2)\n    },\n    titleText: {\n        alignSelf: \"center\"\n    },\n    hr: {\n        margin: 0\n    },\n    address: {\n        paddingLeft: theme.spacing(2.5),\n        paddingRight: theme.spacing(2.5),\n        paddingBottom: theme.spacing(2)\n    },\n    currencyList: {\n        height: \"300px\",\n        overflowY: \"scroll\",\n    },\n    currencyContainer: {\n        paddingLeft: theme.spacing(0.5),\n        paddingRight: theme.spacing(0.5),\n        paddingTop: theme.spacing(2),\n        marginTop: theme.spacing(2),\n        overflow: \"hidden\"\n    }\n})\n\nconst useStyles = makeStyles(styles);\n\n// This is a modified version of MaterialUI's DialogTitle component, I've added a close button in the top right corner\nconst DialogTitle = withStyles(styles)((props) => {\n    const { children, classes, onClose, ...other } = props;\n    return (\n        <MuiDialogTitle disableTypography className={classes.titleSection} {...other}>\n            <Grid container direction=\"row\" justifyContent=\"space-between\" alignContent=\"center\">\n                <Typography variant=\"h6\" className={classes.titleText}>{children}</Typography>\n                {onClose ? (\n                    <IconButton aria-label=\"close\" onClick={onClose}>\n                        <CloseIcon />\n                    </IconButton>\n                ) : null}\n            </Grid>\n        </MuiDialogTitle>\n    );\n});\n\n// This is a modified version of MaterialUI's DialogActions component, the color has been changed by modifying the CSS\nconst DialogActions = withStyles((theme) => ({\n    root: {\n        margin: 0,\n        padding: theme.spacing(1),\n        backgroundColor: COLORS.grey[100],\n    },\n}))(MuiDialogActions);\n\nCurrencyDialog.propTypes = {\n    onClose: PropTypes.func.isRequired,\n    open: PropTypes.bool.isRequired,\n    coins: PropTypes.array.isRequired\n}\n\nexport default function CurrencyDialog(props) {\n    // The CurrencyDialog component will display a dialog window on top of the page, allowing a user to select a currency\n    // from a list (list can be found in 'src/constants/coins.js') or enter an address into a search field. Any entered\n    // addresses will first be validated to make sure they exist.\n    // When the dialog closes, it will call the `onClose` prop with 1 argument which will either be undefined (if the\n    // user closes the dialog without selecting anything), or will be a string containing the address of a currency.\n\n    const classes = useStyles();\n    const {onClose, open, coins, signer, ...others} = props;\n\n    const [address, setAddress] = React.useState(\"\");\n    const [error, setError] = React.useState(\"\");\n\n    // Called when the user tries to input a custom address, this function will validate the address and will either\n    // then close the dialog and return the validated address, or will display an error.\n    const submit = () => {\n        if (doesTokenExist(address, signer)) {\n            exit(address)\n        }\n        else {\n            setError(\"This address is not valid\")\n        }\n    }\n\n    // Resets any fields in the dialog (in case it's opened in the future) and calls the `onClose` prop\n    const exit = (value) => {\n        setError(\"\");\n        setAddress(\"\");\n        onClose(value);\n    }\n\n    return (\n        <Dialog\n            open={open}\n            onClose={() => exit(undefined)}\n            fullWidth\n            maxWidth=\"sm\"\n            classes={{paper: classes.dialogContainer}}\n        >\n            <DialogTitle onClose={() => exit(undefined)}>\n                Select Currency\n            </DialogTitle>\n\n            <hr className={classes.hr}/>\n\n            <div className={classes.currencyContainer}>\n                <Grid container direction=\"column\" spacing={1} alignContent=\"center\">\n                    <TextField\n                        value={address}\n                        onChange={(e) => setAddress(e.target.value)}\n                        variant=\"outlined\"\n                        placeholder=\"Paste Address\"\n                        error={error !== \"\"}\n                        helperText={error}\n                        fullWidth\n                        className={classes.address}\n                    />\n\n                    <hr className={classes.hr}/>\n\n                    <Grid item className={classes.currencyList}>\n                        <Grid container direction=\"column\">\n                            {/* Maps all of the currencies in the constants file to buttons */}\n                            {coins.map((coin, index) => (\n                                <Grid item key={index} xs={12}>\n                                    <CurrencyButton\n                                        coinName={coin.name}\n                                        coinAbbr={coin.abbr}\n                                        onClick={() => exit(coin.address)}\n                                    />\n                                </Grid>\n                            ))}\n                        </Grid>\n                    </Grid>\n                </Grid>\n            </div>\n\n            <hr className={classes.hr}/>\n\n            <DialogActions>\n                <Button autoFocus onClick={submit} color=\"primary\">\n                    Enter\n                </Button>\n            </DialogActions>\n        </Dialog>\n    )\n}\n","import React from \"react\";\nimport {Button, CircularProgress, makeStyles} from \"@material-ui/core\";\nimport green from \"@material-ui/core/colors/green\";\nimport red from \"@material-ui/core/colors/red\";\n\n\nconst useStyles = makeStyles((theme) => ({\n    wrapper: {\n        margin: 0,\n        position: 'relative',\n    },\n    success: {\n        backgroundColor: green[500],\n        '&:hover': {\n            backgroundColor: green[700],\n        },\n    },\n    fail: {\n        backgroundColor: red[500],\n        '&:hover': {\n            backgroundColor: red[700],\n        },\n    },\n    progress: {\n        color: green[500],\n        position: 'absolute',\n        top: '50%',\n        left: '50%',\n        marginTop: -12,\n        marginLeft: -12,\n    },\n}));\n\nexport default function LoadingButton(props) {\n    const classes = useStyles();\n\n    const { children, loading, valid, success, fail, onClick, ...other} = props;\n\n    const calculateClass = () => {\n        if (fail) { return classes.fail}\n        if (!loading && success) { return classes.success }\n    }\n\n    return (\n        <div className={classes.wrapper}>\n            <Button variant=\"contained\" color=\"primary\" fullWidth disabled={loading || !valid} type=\"submit\" onClick={onClick} className={calculateClass()} {...other}>\n                {children}\n            </Button>\n            {loading && <CircularProgress size={24} className={classes.progress} />}\n        </div>\n    )\n}\n","import React, { useEffect } from \"react\";\nimport {\n  Container,\n  Grid,\n  IconButton,\n  makeStyles,\n  Paper,\n  Typography,\n} from \"@material-ui/core\";\nimport SwapVerticalCircleIcon from \"@material-ui/icons/SwapVerticalCircle\";\nimport { useSnackbar } from \"notistack\";\nimport LoopIcon from \"@material-ui/icons/Loop\";\nimport {\n  getAccount,\n  getConversionRate,\n  getFactory,\n  getProvider,\n  getRouter,\n  getSigner,\n  getBalanceAndSymbol,\n  getWeth,\n  swapCurrency,\n  getReserves,\n} from \"../ethereumFunctions\";\nimport CurrencyField from \"./CurrencyField\";\nimport CurrencyDialog from \"./CurrencyDialog\";\nimport LoadingButton from \"../Components/LoadingButton\";\nimport * as COINS from \"../constants/coins\";\n\nconst styles = (theme) => ({\n  paperContainer: {\n    borderRadius: theme.spacing(2),\n    padding: theme.spacing(1),\n    paddingBottom: theme.spacing(3),\n  },\n  switchButton: {\n    zIndex: 1,\n    margin: \"-16px\",\n    padding: theme.spacing(0.5),\n  },\n  fullWidth: {\n    width: \"100%\",\n  },\n  title: {\n    textAlign: \"center\",\n    padding: theme.spacing(0.5),\n    marginBottom: theme.spacing(1),\n  },\n  hr: {\n    width: \"100%\",\n  },\n  balance: {\n    padding: theme.spacing(1),\n    overflow: \"wrap\",\n    textAlign: \"center\",\n  },\n});\n\nconst useStyles = makeStyles(styles);\n\nfunction CurrencySwapper(props) {\n  const classes = useStyles();\n  const { enqueueSnackbar } = useSnackbar();\n\n  // Stores a record of whether their respective dialog window is open\n  const [dialog1Open, setDialog1Open] = React.useState(false);\n  const [dialog2Open, setDialog2Open] = React.useState(false);\n\n  // Stores data about their respective currency\n  const [currency1, setCurrency1] = React.useState({\n    address: undefined,\n    symbol: undefined,\n    balance: undefined,\n  });\n  const [currency2, setCurrency2] = React.useState({\n    address: undefined,\n    symbol: undefined,\n    balance: undefined,\n  });\n\n  // Stores the current conversion rate between currency1 and currency2\n  const [conversionRate, setConversionRate] = React.useState(undefined);\n\n  // Stores the current reserves in the liquidity pool between currency1 and currency2\n  const [reserves, setReserves] = React.useState([\"0.0\", \"0.0\"]);\n\n  // Stores the current value of their respective text box\n  const [field1Value, setField1Value] = React.useState(\"\");\n  const [field2Value, setField2Value] = React.useState(\"\");\n\n  // Stores information for the Autonity Network\n  const [provider, setProvider] = React.useState(getProvider());\n  const [signer, setSigner] = React.useState(getSigner(provider));\n  const [account, setAccount] = React.useState(undefined); // This is populated in a react hook\n  const [router, setRouter] = React.useState(\n    getRouter(\"0x4489D87C8440B19f11d63FA2246f943F492F3F5F\", signer)\n  );\n  const [weth, setWeth] = React.useState(\n    getWeth(\"0x3f0D1FAA13cbE43D662a37690f0e8027f9D89eBF\", signer)\n  );\n  const [factory, setFactory] = React.useState(\n    getFactory(\"0x4EDFE8706Cefab9DCd52630adFFd00E9b93FF116\", signer)\n  );\n\n  // Controls the loading button\n  const [loading, setLoading] = React.useState(false);\n\n  // Switches the top and bottom currencies, this is called when users hit the swap button or select the opposite\n  // token in the dialog (e.g. if currency1 is TokenA and the user selects TokenB when choosing currency2)\n  const switchFields = () => {\n    setCurrency1(currency2);\n    setCurrency2(currency1);\n    setField1Value(field2Value);\n    setReserves(reserves.reverse());\n  };\n\n  // These functions take an HTML event, pull the data out and puts it into a state variable.\n  const handleChange = {\n    field1: (e) => {\n      setField1Value(e.target.value);\n    },\n  };\n\n  // Turns the account's balance into something nice and readable\n  const formatBalance = (balance, symbol) => {\n    if (balance && symbol)\n      return parseFloat(balance).toPrecision(8) + \" \" + symbol;\n    else return \"0.0\";\n  };\n\n  // Turns the currency's reserves into something nice and readable\n  const formatReserve = (reserve, symbol) => {\n    if (reserve && symbol) return reserve + \" \" + symbol;\n    else return \"0.0\";\n  };\n\n  // Determines whether the button should be enabled or not\n  const isButtonEnabled = () => {\n    let validFloat = new RegExp(\"^[0-9]*[.,]?[0-9]*$\");\n\n    // If both currencies have been selected, and a valid float has been entered which is less than the user's balance, then return true\n    return (\n      currency1.address &&\n      currency2.address &&\n      validFloat.test(field1Value) &&\n      parseFloat(field1Value) <= currency1.balance\n    );\n  };\n\n  const swap = () => {\n    console.log(\"Attempting to swap tokens...\");\n    setLoading(true);\n\n    swapCurrency(\n      currency1.address,\n      currency2.address,\n      parseFloat(field1Value),\n      router,\n      account,\n      provider,\n      signer\n    )\n      .then(() => {\n        setLoading(false);\n\n        // If the transaction was successful, we clear to input to make sure the user doesn't accidental redo the transfer\n        setField1Value(\"\");\n        enqueueSnackbar(\"Transaction Successful\", { variant: \"success\" });\n      })\n      .catch((e) => {\n        setLoading(false);\n        enqueueSnackbar(\"Transaction Failed (\" + e.message + \")\", {\n          variant: \"error\",\n          autoHideDuration: 10000,\n        });\n      });\n  };\n\n  // Called when the dialog window for currency1 exits\n  const onToken1Selected = (address) => {\n    // Close the dialog window\n    setDialog1Open(false);\n\n    // If the user inputs the same token, we want to switch the data in the fields\n    if (address === currency2.address) {\n      switchFields();\n    }\n    // We only update the values if the user provides a token\n    else if (address) {\n      // Getting some token data is async, so we need to wait for the data to return, hence the promise\n      getBalanceAndSymbol(account, address, provider, signer).then((data) => {\n        setCurrency1({\n          address: address,\n          symbol: data.symbol,\n          balance: data.balance,\n        });\n      });\n    }\n  };\n\n  // Called when the dialog window for currency2 exits\n  const onToken2Selected = (address) => {\n    // Close the dialog window\n    setDialog2Open(false);\n\n    // If the user inputs the same token, we want to switch the data in the fields\n    if (address === currency1.address) {\n      switchFields();\n    }\n    // We only update the values if the user provides a token\n    else if (address) {\n      // Getting some token data is async, so we need to wait for the data to return, hence the promise\n      getBalanceAndSymbol(account, address, provider, signer).then((data) => {\n        setCurrency2({\n          address: address,\n          symbol: data.symbol,\n          balance: data.balance,\n        });\n      });\n    }\n  };\n\n  // The lambdas within these useEffects will be called when a particular dependency is updated. These dependencies\n  // are defined in the array of variables passed to the function after the lambda expression. If there are no dependencies\n  // the lambda will only ever be called when the component mounts. These are very useful for calculating new values\n  // after a particular state change, for example, calculating the new exchange rate whenever the addresses\n  // of the two currencies change.\n  useEffect(() => {\n    // This hook is called when either of the state variables `currency1.address` or `currency2.address` change.\n    // It attempts to calculate and set the state variable `conversionRate`\n    // This means that when the user selects a different currency to convert between, or the currencies are swapped,\n    // the new conversion rate will be calculated.\n\n    console.log(\n      \"Trying to get Conversion Rate between:\\n\" +\n        currency1.address +\n        \"\\n\" +\n        currency2.address\n    );\n\n    if (currency1.address && currency2.address) {\n      getConversionRate(router, currency1.address, currency2.address).then(\n        (rate) => setConversionRate(rate)\n      );\n\n      getReserves(\n        currency1.address,\n        currency2.address,\n        factory,\n        signer,\n        account\n      ).then((data) => setReserves(data));\n    }\n  }, [currency1.address, currency2.address]);\n\n  useEffect(() => {\n    // This hook is called when either of the state variables `field1Value` or `conversionRate` change.\n    // It attempts to calculate and set the state variable `field2Value`\n    // This means that if the user types a new value into the conversion box or the conversion rate changes,\n    // the value in the output box will change.\n\n    if (isNaN(parseFloat(field1Value))) {\n      setField2Value(\"\");\n    } else if (field1Value && conversionRate) {\n      let amount = parseFloat(field1Value) * conversionRate;\n      setField2Value(amount.toFixed(7));\n    } else {\n      setField2Value(\"\");\n    }\n  }, [field1Value, conversionRate]);\n\n  useEffect(() => {\n    // This hook creates a timeout that will run every ~10 seconds, it's role is to check if the user's balance has\n    // updated has changed. This allows them to see when a transaction completes by looking at the balance output.\n    // It only updates the balance field in the currency state to prevent this hook from triggering the 'conversionRate' hook.\n\n    const currencyTimeout = setTimeout(() => {\n      console.log(\"Checking balances...\");\n\n      if (currency1.address && currency2.address) {\n        getReserves(\n          currency1.address,\n          currency2.address,\n          factory,\n          signer,\n          account\n        ).then((data) => setReserves(data));\n      }\n\n      if (currency1) {\n        getBalanceAndSymbol(account, currency1.address, provider, signer).then(\n          (data) => {\n            setCurrency1({\n              ...currency1,\n              balance: data.balance,\n            });\n          }\n        );\n      }\n      if (currency2) {\n        getBalanceAndSymbol(account, currency2.address, provider, signer).then(\n          (data) => {\n            setCurrency2({\n              ...currency2,\n              balance: data.balance,\n            });\n          }\n        );\n      }\n    }, 10000);\n\n    return () => clearTimeout(currencyTimeout);\n  });\n\n  useEffect(() => {\n    // This hook will run when the component first mounts, it can be useful to put logic to populate variables here\n\n    getAccount().then((account) => {\n      setAccount(account);\n    });\n  });\n\n  return (\n    <div>\n      {/* Dialog Windows */}\n      <CurrencyDialog\n        open={dialog1Open}\n        onClose={onToken1Selected}\n        coins={COINS.ALL}\n        signer={signer}\n      />\n      <CurrencyDialog\n        open={dialog2Open}\n        onClose={onToken2Selected}\n        coins={COINS.ALL}\n        signer={signer}\n      />\n\n      {/* Currency Swapper */}\n      <Container maxWidth=\"xs\">\n        <Paper className={classes.paperContainer}>\n          <Typography variant=\"h5\" className={classes.title}>\n            Swap Currencies\n          </Typography>\n\n          <Grid container direction=\"column\" alignItems=\"center\" spacing={2}>\n            <Grid item xs={12} className={classes.fullWidth}>\n              <CurrencyField\n                activeField={true}\n                value={field1Value}\n                onClick={() => setDialog1Open(true)}\n                onChange={handleChange.field1}\n                symbol={\n                  currency1.symbol !== undefined ? currency1.symbol : \"Select\"\n                }\n              />\n            </Grid>\n\n            <IconButton onClick={switchFields} className={classes.switchButton}>\n              <SwapVerticalCircleIcon fontSize=\"medium\" />\n            </IconButton>\n\n            <Grid item xs={12} className={classes.fullWidth}>\n              <CurrencyField\n                activeField={false}\n                value={field2Value}\n                onClick={() => setDialog2Open(true)}\n                symbol={\n                  currency2.symbol !== undefined ? currency2.symbol : \"Select\"\n                }\n              />\n            </Grid>\n\n            <hr className={classes.hr} />\n\n            {/* Balance Display */}\n            <Typography variant=\"h6\">Your Balances</Typography>\n            <Grid container direction=\"row\" justifyContent=\"space-between\">\n              <Grid item xs={6}>\n                <Typography variant=\"body1\" className={classes.balance}>\n                  {formatBalance(currency1.balance, currency1.symbol)}\n                </Typography>\n              </Grid>\n              <Grid item xs={6}>\n                <Typography variant=\"body1\" className={classes.balance}>\n                  {formatBalance(currency2.balance, currency2.symbol)}\n                </Typography>\n              </Grid>\n            </Grid>\n\n            <hr className={classes.hr} />\n\n            {/* Reserves Display */}\n            <Typography variant=\"h6\">Reserves</Typography>\n            <Grid container direction=\"row\" justifyContent=\"space-between\">\n              <Grid item xs={6}>\n                <Typography variant=\"body1\" className={classes.balance}>\n                  {formatReserve(reserves[0], currency1.symbol)}\n                </Typography>\n              </Grid>\n              <Grid item xs={6}>\n                <Typography variant=\"body1\" className={classes.balance}>\n                  {formatReserve(reserves[1], currency2.symbol)}\n                </Typography>\n              </Grid>\n            </Grid>\n\n            <hr className={classes.hr} />\n\n            <LoadingButton\n              loading={loading}\n              valid={isButtonEnabled()}\n              success={false}\n              fail={false}\n              onClick={swap}\n            >\n              <LoopIcon />\n              Swap\n            </LoadingButton>\n          </Grid>\n        </Paper>\n      </Container>\n    </div>\n  );\n}\n\nexport default CurrencySwapper;\n","import React, { useEffect } from \"react\";\nimport {\n  Container,\n  Grid,\n  makeStyles,\n  Paper,\n  Typography,\n} from \"@material-ui/core\";\nimport AccountBalanceIcon from \"@material-ui/icons/AccountBalance\";\nimport { useSnackbar } from \"notistack\";\nimport LoopIcon from \"@material-ui/icons/Loop\";\nimport {\n  getAccount,\n  getFactory,\n  getProvider,\n  getRouter,\n  getSigner,\n  getBalanceAndSymbol,\n  getWeth,\n  getReserves,\n  addLiquidity,\n  addLiquidityTest,\n} from \"../ethereumFunctions\";\nimport CurrencyField from \"../CurrencySwapper/CurrencyField\";\nimport CurrencyDialog from \"../CurrencySwapper/CurrencyDialog\";\nimport LoadingButton from \"../Components/LoadingButton\";\nimport * as COINS from \"../constants/coins\";\n\nconst styles = (theme) => ({\n  paperContainer: {\n    borderRadius: theme.spacing(2),\n    padding: theme.spacing(1),\n    paddingBottom: theme.spacing(3),\n  },\n  fullWidth: {\n    width: \"100%\",\n  },\n  title: {\n    textAlign: \"center\",\n    padding: theme.spacing(0.5),\n    marginBottom: theme.spacing(1),\n  },\n  hr: {\n    width: \"100%\",\n  },\n  balance: {\n    padding: theme.spacing(1),\n    overflow: \"wrap\",\n    textAlign: \"center\",\n  },\n  buttonIcon: {\n    marginRight: theme.spacing(1),\n    padding: theme.spacing(0.4),\n  },\n});\n\nconst useStyles = makeStyles(styles);\n\nfunction LiquidityDeployer(props) {\n  const classes = useStyles();\n  const { enqueueSnackbar } = useSnackbar();\n\n  // Stores a record of whether their respective dialog window is open\n  const [dialog1Open, setDialog1Open] = React.useState(false);\n  const [dialog2Open, setDialog2Open] = React.useState(false);\n\n  // Stores data about their respective currency\n  const [currency1, setCurrency1] = React.useState({\n    address: undefined,\n    symbol: undefined,\n    balance: undefined,\n  });\n  const [currency2, setCurrency2] = React.useState({\n    address: undefined,\n    symbol: undefined,\n    balance: undefined,\n  });\n\n  // Stores the current reserves in the liquidity pool between currency1 and currency2\n  const [reserves, setReserves] = React.useState([\"0.0\", \"0.0\"]);\n  const [liquidity_tokens, setLiquidity_tokens] = React.useState(\"\");\n\n  // Stores the current value of their respective text box\n  const [field1Value, setField1Value] = React.useState(\"\");\n  const [field2Value, setField2Value] = React.useState(\"\");\n\n  // Stores information for the Autonity Network\n  const [provider, setProvider] = React.useState(getProvider());\n  const [signer, setSigner] = React.useState(getSigner(provider));\n  const [account, setAccount] = React.useState(undefined); // This is populated in a react hook\n  const [router, setRouter] = React.useState(\n    getRouter(\"0x4489D87C8440B19f11d63FA2246f943F492F3F5F\", signer)\n  );\n  const [weth, setWeth] = React.useState(\n    getWeth(\"0x3f0D1FAA13cbE43D662a37690f0e8027f9D89eBF\", signer)\n  );\n  const [factory, setFactory] = React.useState(\n    getFactory(\"0x4EDFE8706Cefab9DCd52630adFFd00E9b93FF116\", signer)\n  );\n\n  // Controls the loading button\n  const [loading, setLoading] = React.useState(false);\n\n  // Switches the top and bottom currencies, this is called when users hit the swap button or select the opposite\n  // token in the dialog (e.g. if currency1 is TokenA and the user selects TokenB when choosing currency2)\n  const switchFields = () => {\n    let oldField1Value = field1Value;\n    let oldField2Value = field2Value;\n\n    setCurrency1(currency2);\n    setCurrency2(currency1);\n    setField1Value(oldField2Value);\n    setField2Value(oldField1Value);\n    setReserves(reserves.reverse());\n  };\n\n  // These functions take an HTML event, pull the data out and puts it into a state variable.\n  const handleChange = {\n    field1: (e) => {\n      setField1Value(e.target.value);\n    },\n    field2: (e) => {\n      setField2Value(e.target.value);\n    },\n  };\n\n  // Turns the account's balance into something nice and readable\n  const formatBalance = (balance, symbol) => {\n    if (balance && symbol)\n      return parseFloat(balance).toPrecision(8) + \" \" + symbol;\n    else return \"0.0\";\n  };\n\n  // Turns the currency's reserves into something nice and readable\n  const formatReserve = (reserve, symbol) => {\n    if (reserve && symbol) return reserve + \" \" + symbol;\n    else return \"0.0\";\n  };\n\n  // Determines whether the button should be enabled or not\n  const isButtonEnabled = () => {\n    let validFloat = new RegExp(\"^[0-9]*[.,]?[0-9]*$\");\n\n    // If both currencies have been selected, and a valid float has been entered for both, which are less than the user's balances, then return true\n    return (\n      currency1.address &&\n      currency2.address &&\n      validFloat.test(field1Value) &&\n      validFloat.test(field2Value) &&\n      parseFloat(field1Value) <= currency1.balance &&\n      parseFloat(field2Value) <= currency2.balance\n    );\n  };\n\n  const deploy = () => {\n    console.log(\"Attempting to deploy liquidity...\");\n    setLoading(true);\n\n    addLiquidity(\n      currency1.address,\n      currency2.address,\n      parseFloat(field1Value),\n      parseFloat(field2Value),\n      0,\n      0,\n      router,\n      account,\n      signer\n    )\n      .then(() => {\n        setLoading(false);\n\n        // If the transaction was successful, we clear to input to make sure the user doesn't accidental redo the transfer\n        setField1Value(\"\");\n        setField2Value(\"\");\n        enqueueSnackbar(\"Deployment Successful\", { variant: \"success\" });\n      })\n      .catch((e) => {\n        setLoading(false);\n        enqueueSnackbar(\"Deployment Failed (\" + e.message + \")\", {\n          variant: \"error\",\n          autoHideDuration: 10000,\n        });\n      });\n  };\n\n  // Called when the dialog window for currency1 exits\n  const onToken1Selected = (address) => {\n    // Close the dialog window\n    setDialog1Open(false);\n\n    // If the user inputs the same token, we want to switch the data in the fields\n    if (address === currency2.address) {\n      switchFields();\n    }\n    // We only update the values if the user provides a token\n    else if (address) {\n      // Getting some token data is async, so we need to wait for the data to return, hence the promise\n      getBalanceAndSymbol(account, address, provider, signer).then((data) => {\n        setCurrency1({\n          address: address,\n          symbol: data.symbol,\n          balance: data.balance,\n        });\n      });\n    }\n  };\n\n  // Called when the dialog window for currency2 exits\n  const onToken2Selected = (address) => {\n    // Close the dialog window\n    setDialog2Open(false);\n\n    // If the user inputs the same token, we want to switch the data in the fields\n    if (address === currency1.address) {\n      switchFields();\n    }\n    // We only update the values if the user provides a token\n    else if (address) {\n      // Getting some token data is async, so we need to wait for the data to return, hence the promise\n      getBalanceAndSymbol(account, address, provider, signer).then((data) => {\n        setCurrency2({\n          address: address,\n          symbol: data.symbol,\n          balance: data.balance,\n        });\n      });\n    }\n  };\n\n  useEffect(() => {\n    // This hook runs whenever the currencies change, it will attempt to fetch the new liquidity reserves.\n    console.log(\n      \"Trying to get reserves between:\\n\" +\n        currency1.address +\n        \"\\n\" +\n        currency2.address\n    );\n\n    if (currency1.address && currency2.address) {\n      getReserves(\n        currency1.address,\n        currency2.address,\n        factory,\n        signer,\n        account\n      ).then((data) => {\n        setReserves([data[0], data[1]]);\n        setLiquidity_tokens(data[2]);\n      });\n    }\n  }, [currency1.address, currency2.address]);\n\n  useEffect(() => {\n    // This hook runs whenever the field values change or currencies change, it will attempt to do a static call to give a preview of the liquidity deployment.\n\n    if (isButtonEnabled()) {\n      console.log(\"Trying to preview the liquidity deployment\");\n\n      addLiquidityTest(\n        currency1.address,\n        currency2.address,\n        parseFloat(field1Value),\n        parseFloat(field2Value),\n        0,\n        0,\n        router,\n        account,\n        signer\n      );\n    }\n  }, [currency1.address, currency2.address, field1Value, field2Value]);\n\n  useEffect(() => {\n    // This hook creates a timeout that will run every ~10 seconds, it's role is to check if the user's balance has\n    // updated has changed. This allows them to see when a transaction completes by looking at the balance output.\n\n    const currencyTimeout = setTimeout(() => {\n      console.log(\"Checking balances & Getting reserves...\");\n\n      if (currency1.address && currency2.address) {\n        getReserves(\n          currency1.address,\n          currency2.address,\n          factory,\n          signer,\n          account\n        ).then((data) => {\n          setReserves([data[0], data[1]]);\n          setLiquidity_tokens(data[2]);\n        });\n      }\n\n      if (currency1) {\n        getBalanceAndSymbol(account, currency1.address, provider, signer).then(\n          (data) => {\n            setCurrency1({\n              ...currency1,\n              balance: data.balance,\n            });\n          }\n        );\n      }\n      if (currency2) {\n        getBalanceAndSymbol(account, currency2.address, provider, signer).then(\n          (data) => {\n            setCurrency2({\n              ...currency2,\n              balance: data.balance,\n            });\n          }\n        );\n      }\n    }, 10000);\n\n    return () => clearTimeout(currencyTimeout);\n  });\n\n  useEffect(() => {\n    // This hook will run when the component first mounts, it can be useful to put logic to populate variables here\n\n    getAccount().then((account) => {\n      setAccount(account);\n    });\n  });\n\n  return (\n    <div>\n      {/* Currency Swapper */}\n      <Typography variant=\"h5\" className={classes.title}></Typography>\n\n      {/* Dialog Windows */}\n      <CurrencyDialog\n        open={dialog1Open}\n        onClose={onToken1Selected}\n        coins={COINS.ALL}\n        signer={signer}\n      />\n      <CurrencyDialog\n        open={dialog2Open}\n        onClose={onToken2Selected}\n        coins={COINS.ALL}\n        signer={signer}\n      />\n\n      <Grid container direction=\"column\" alignItems=\"center\" spacing={2}>\n        <Grid item xs={12} className={classes.fullWidth}>\n          <CurrencyField\n            activeField={true}\n            value={field1Value}\n            onClick={() => setDialog1Open(true)}\n            onChange={handleChange.field1}\n            symbol={\n              currency1.symbol !== undefined ? currency1.symbol : \"Select\"\n            }\n          />\n        </Grid>\n\n        <Grid item xs={12} className={classes.fullWidth}>\n          <CurrencyField\n            activeField={true}\n            value={field2Value}\n            onClick={() => setDialog2Open(true)}\n            onChange={handleChange.field2}\n            symbol={\n              currency2.symbol !== undefined ? currency2.symbol : \"Select\"\n            }\n          />\n        </Grid>\n\n        <hr className={classes.hr} />\n\n        {/* Balance Display */}\n        <Typography variant=\"h6\">Your Balances</Typography>\n        <Grid container direction=\"row\" justifyContent=\"space-between\">\n          <Grid item xs={6}>\n            <Typography variant=\"body1\" className={classes.balance}>\n              {formatBalance(currency1.balance, currency1.symbol)}\n            </Typography>\n          </Grid>\n          <Grid item xs={6}>\n            <Typography variant=\"body1\" className={classes.balance}>\n              {formatBalance(currency2.balance, currency2.symbol)}\n            </Typography>\n          </Grid>\n        </Grid>\n\n        <hr className={classes.hr} />\n\n        {/* Reserves Display */}\n        <Typography variant=\"h6\">Reserves</Typography>\n        <Grid container direction=\"row\" justifyContent=\"space-between\">\n          <Grid item xs={6}>\n            <Typography variant=\"body1\" className={classes.balance}>\n              {formatReserve(reserves[0], currency1.symbol)}\n            </Typography>\n          </Grid>\n          <Grid item xs={6}>\n            <Typography variant=\"body1\" className={classes.balance}>\n              {formatReserve(reserves[1], currency2.symbol)}\n            </Typography>\n          </Grid>\n        </Grid>\n\n        <hr className={classes.hr} />\n\n        {/* Liquidity Tokens Display */}\n        <Typography variant=\"h6\">Your Liquidity Pool Tokens</Typography>\n        <Grid container direction=\"row\" justifyContent=\"center\">\n          <Grid item xs={6}>\n            <Typography variant=\"body1\" className={classes.balance}>\n              {formatReserve(liquidity_tokens, \"UNI-V2\")}\n            </Typography>\n          </Grid>\n        </Grid>\n\n        <hr className={classes.hr} />\n\n        <LoadingButton\n          loading={loading}\n          valid={isButtonEnabled()}\n          success={false}\n          fail={false}\n          onClick={deploy}\n        >\n          <AccountBalanceIcon className={classes.buttonIcon} />\n          Deploy\n        </LoadingButton>\n      </Grid>\n    </div>\n  );\n}\n\nexport default LiquidityDeployer;\n","import React, { useEffect } from \"react\";\nimport {\n  Container,\n  Grid,\n  makeStyles,\n  Paper,\n  Typography,\n} from \"@material-ui/core\";\nimport AccountBalanceIcon from \"@material-ui/icons/AccountBalance\";\nimport { useSnackbar } from \"notistack\";\nimport {\n  getAccount,\n  getFactory,\n  getProvider,\n  getRouter,\n  getSigner,\n  getBalanceAndSymbol,\n  getWeth,\n  getReserves,\n  removeLiquidity,\n} from \"../ethereumFunctions\";\nimport CurrencyField, {\n  CurrencyField_Reduced,\n} from \"../CurrencySwapper/CurrencyField\";\nimport CurrencyDialog from \"../CurrencySwapper/CurrencyDialog\";\nimport LoadingButton from \"../Components/LoadingButton\";\nimport * as COINS from \"../constants/coins\";\n\nconst styles = (theme) => ({\n  paperContainer: {\n    borderRadius: theme.spacing(2),\n    padding: theme.spacing(1),\n    paddingBottom: theme.spacing(3),\n  },\n  fullWidth: {\n    width: \"100%\",\n  },\n  title: {\n    textAlign: \"center\",\n    padding: theme.spacing(0.5),\n    marginBottom: theme.spacing(1),\n  },\n  hr: {\n    width: \"100%\",\n  },\n  balance: {\n    padding: theme.spacing(1),\n    overflow: \"wrap\",\n    textAlign: \"center\",\n  },\n  buttonIcon: {\n    marginRight: theme.spacing(1),\n    padding: theme.spacing(0.4),\n  },\n});\n\nconst useStyles = makeStyles(styles);\n\nfunction LiquidityRemover(props) {\n  const classes = useStyles();\n  const { enqueueSnackbar } = useSnackbar();\n\n  // Stores a record of whether their respective dialog window is open\n  const [dialog1Open, setDialog1Open] = React.useState(false);\n  const [dialog2Open, setDialog2Open] = React.useState(false);\n\n  // Stores data about their respective currency\n  const [currency1, setCurrency1] = React.useState({\n    address: undefined,\n    symbol: undefined,\n    balance: undefined,\n  });\n  const [currency2, setCurrency2] = React.useState({\n    address: undefined,\n    symbol: undefined,\n    balance: undefined,\n  });\n\n  // Stores the current reserves in the liquidity pool between currency1 and currency2\n  const [reserves, setReserves] = React.useState([\"0.0\", \"0.0\"]);\n  const [liquidity_tokens, setLiquidity_tokens] = React.useState(\"\");\n\n  // Stores the current value of their respective text box\n  const [field1Value, setField1Value] = React.useState(\"\");\n\n  // Stores information for the Autonity Network\n  const [provider, setProvider] = React.useState(getProvider());\n  const [signer, setSigner] = React.useState(getSigner(provider));\n  const [account, setAccount] = React.useState(undefined); // This is populated in a react hook\n  const [router, setRouter] = React.useState(\n    getRouter(\"0x4489D87C8440B19f11d63FA2246f943F492F3F5F\", signer)\n  );\n  const [weth, setWeth] = React.useState(\n    getWeth(\"0x3f0D1FAA13cbE43D662a37690f0e8027f9D89eBF\", signer)\n  );\n  const [factory, setFactory] = React.useState(\n    getFactory(\"0x4EDFE8706Cefab9DCd52630adFFd00E9b93FF116\", signer)\n  );\n\n  // Controls the loading button\n  const [loading, setLoading] = React.useState(false);\n\n  // Switches the top and bottom currencies, this is called when users hit the swap button or select the opposite\n  // token in the dialog (e.g. if currency1 is TokenA and the user selects TokenB when choosing currency2)\n  const switchFields = () => {\n    setCurrency1(currency2);\n    setCurrency2(currency1);\n    setReserves(reserves.reverse());\n  };\n\n  // These functions take an HTML event, pull the data out and puts it into a state variable.\n  const handleChange = {\n    field1: (e) => {\n      setField1Value(e.target.value);\n    },\n  };\n\n  // Turns the account's balance into something nice and readable\n  const formatBalance = (balance, symbol) => {\n    if (balance && symbol)\n      return parseFloat(balance).toPrecision(8) + \" \" + symbol;\n    else return \"0.0\";\n  };\n\n  // Turns the currency's reserves into something nice and readable\n  const formatReserve = (reserve, symbol) => {\n    if (reserve && symbol) return reserve + \" \" + symbol;\n    else return \"0.0\";\n  };\n\n  // Determines whether the button should be enabled or not\n  const isButtonEnabled = () => {\n    let validFloat = new RegExp(\"^[0-9]*[.,]?[0-9]*$\");\n\n    // If both currencies have been selected, and a valid float has been entered for both, which are less than the user's balances, then return true\n    return (\n      currency1.address &&\n      currency2.address &&\n      validFloat.test(field1Value) &&\n      parseFloat(field1Value) <= liquidity_tokens\n    );\n  };\n\n  const deploy = () => {\n    console.log(\"Attempting to remove liquidity...\");\n    setLoading(true);\n\n    removeLiquidity(\n      currency1.address,\n      currency2.address,\n      parseFloat(field1Value),\n      0,\n      0,\n      router,\n      account,\n      signer,\n      factory\n    )\n      .then(() => {\n        setLoading(false);\n\n        // If the transaction was successful, we clear to input to make sure the user doesn't accidental redo the transfer\n        setField1Value(\"\");\n        enqueueSnackbar(\"Removal Successful\", { variant: \"success\" });\n      })\n      .catch((e) => {\n        setLoading(false);\n        enqueueSnackbar(\"Deployment Failed (\" + e.message + \")\", {\n          variant: \"error\",\n          autoHideDuration: 10000,\n        });\n      });\n  };\n\n  // Called when the dialog window for currency1 exits\n  const onToken1Selected = (address) => {\n    // Close the dialog window\n    setDialog1Open(false);\n\n    // If the user inputs the same token, we want to switch the data in the fields\n    if (address === currency2.address) {\n      switchFields();\n    }\n    // We only update the values if the user provides a token\n    else if (address) {\n      // Getting some token data is async, so we need to wait for the data to return, hence the promise\n      getBalanceAndSymbol(account, address, provider, signer).then((data) => {\n        setCurrency1({\n          address: address,\n          symbol: data.symbol,\n          balance: data.balance,\n        });\n      });\n    }\n  };\n\n  // Called when the dialog window for currency2 exits\n  const onToken2Selected = (address) => {\n    // Close the dialog window\n    setDialog2Open(false);\n\n    // If the user inputs the same token, we want to switch the data in the fields\n    if (address === currency1.address) {\n      switchFields();\n    }\n    // We only update the values if the user provides a token\n    else if (address) {\n      // Getting some token data is async, so we need to wait for the data to return, hence the promise\n      getBalanceAndSymbol(account, address, provider, signer).then((data) => {\n        setCurrency2({\n          address: address,\n          symbol: data.symbol,\n          balance: data.balance,\n        });\n      });\n    }\n  };\n\n  useEffect(() => {\n    // This hook runs whenever the currencies change, it will attempt to fetch the new liquidity reserves.\n    console.log(\n      \"Trying to get reserves between:\\n\" +\n        currency1.address +\n        \"\\n\" +\n        currency2.address\n    );\n\n    if (currency1.address && currency2.address) {\n      getReserves(\n        currency1.address,\n        currency2.address,\n        factory,\n        signer,\n        account\n      ).then((data) => {\n        setReserves([data[0], data[1]]);\n        setLiquidity_tokens(data[2]);\n      });\n    }\n  }, [currency1.address, currency2.address]);\n\n  useEffect(() => {\n    // This hook runs whenever the field values change or currencies change, it will attempt to do a static call to give a preview of the liquidity deployment.\n\n    if (isButtonEnabled()) {\n      console.log(\"Trying to preview the liquidity deployment\");\n    }\n  }, [currency1.address, currency2.address, field1Value]);\n\n  useEffect(() => {\n    // This hook creates a timeout that will run every ~10 seconds, it's role is to check if the user's balance has\n    // updated has changed. This allows them to see when a transaction completes by looking at the balance output.\n\n    const currencyTimeout = setTimeout(() => {\n      console.log(\"Checking balances & Getting reserves...\");\n\n      if (currency1.address && currency2.address) {\n        getReserves(\n          currency1.address,\n          currency2.address,\n          factory,\n          signer,\n          account\n        ).then((data) => {\n          setReserves([data[0], data[1]]);\n          setLiquidity_tokens(data[2]);\n        });\n      }\n\n      if (currency1) {\n        getBalanceAndSymbol(account, currency1.address, provider, signer).then(\n          (data) => {\n            setCurrency1({\n              ...currency1,\n              balance: data.balance,\n            });\n          }\n        );\n      }\n      if (currency2) {\n        getBalanceAndSymbol(account, currency2.address, provider, signer).then(\n          (data) => {\n            setCurrency2({\n              ...currency2,\n              balance: data.balance,\n            });\n          }\n        );\n      }\n    }, 10000);\n\n    return () => clearTimeout(currencyTimeout);\n  });\n\n  useEffect(() => {\n    // This hook will run when the component first mounts, it can be useful to put logic to populate variables here\n\n    getAccount().then((account) => {\n      setAccount(account);\n    });\n  });\n\n  return (\n    <div>\n      {/* Currency Swapper */}\n      <Typography variant=\"h5\" className={classes.title}></Typography>\n\n      {/* Dialog Windows */}\n      <CurrencyDialog\n        open={dialog1Open}\n        onClose={onToken1Selected}\n        coins={COINS.ALL}\n        signer={signer}\n      />\n      <CurrencyDialog\n        open={dialog2Open}\n        onClose={onToken2Selected}\n        coins={COINS.ALL}\n        signer={signer}\n      />\n\n      <Grid container direction=\"column\" alignItems=\"center\" spacing={2}>\n        <Grid item xs={12} className={classes.fullWidth}>\n          <CurrencyField\n            activeField={true}\n            value={field1Value}\n            onClick={() => setDialog1Open(true)}\n            onChange={handleChange.field1}\n            symbol={\n              currency1.symbol !== undefined ? currency1.symbol : \"Select\"\n            }\n          />\n        </Grid>\n\n        <Grid item xs={12} className={classes.fullWidth}>\n          <CurrencyField_Reduced\n            activeField={true}\n            onClick={() => setDialog2Open(true)}\n            symbol={\n              currency2.symbol !== undefined ? currency2.symbol : \"Select\"\n            }\n          />\n        </Grid>\n\n        <hr className={classes.hr} />\n\n        {/* Balance Display */}\n        <Typography variant=\"h6\">Your Balances</Typography>\n        <Grid container direction=\"row\" justifyContent=\"space-between\">\n          <Grid item xs={6}>\n            <Typography variant=\"body1\" className={classes.balance}>\n              {formatBalance(currency1.balance, currency1.symbol)}\n            </Typography>\n          </Grid>\n          <Grid item xs={6}>\n            <Typography variant=\"body1\" className={classes.balance}>\n              {formatBalance(currency2.balance, currency2.symbol)}\n            </Typography>\n          </Grid>\n        </Grid>\n\n        <hr className={classes.hr} />\n\n        {/* Reserves Display */}\n        <Typography variant=\"h6\">Reserves</Typography>\n        <Grid container direction=\"row\" justifyContent=\"space-between\">\n          <Grid item xs={6}>\n            <Typography variant=\"body1\" className={classes.balance}>\n              {formatReserve(reserves[0], currency1.symbol)}\n            </Typography>\n          </Grid>\n          <Grid item xs={6}>\n            <Typography variant=\"body1\" className={classes.balance}>\n              {formatReserve(reserves[1], currency2.symbol)}\n            </Typography>\n          </Grid>\n        </Grid>\n\n        <hr className={classes.hr} />\n\n        {/* Liquidity Tokens Display */}\n        <Typography variant=\"h6\">Your Liquidity Pool Tokens</Typography>\n        <Grid container direction=\"row\" justifyContent=\"center\">\n          <Grid item xs={6}>\n            <Typography variant=\"body1\" className={classes.balance}>\n              {formatReserve(liquidity_tokens, \"UNI-V2\")}\n            </Typography>\n          </Grid>\n        </Grid>\n\n        <hr className={classes.hr} />\n\n        <LoadingButton\n          loading={loading}\n          valid={isButtonEnabled()}\n          success={false}\n          fail={false}\n          onClick={deploy}\n        >\n          <AccountBalanceIcon className={classes.buttonIcon} />\n          Remove\n        </LoadingButton>\n      </Grid>\n    </div>\n  );\n}\n\nexport default LiquidityRemover;\n","import React, { useEffect } from \"react\";\nimport {\n  Container,\n  Grid,\n  makeStyles,\n  Paper,\n  Typography,\n  ButtonGroup,\n  Button,\n} from \"@material-ui/core\";\n\nimport { Save, Delete } from \"@material-ui/icons\";\nimport LiquidityDeployer from \"./LiquidityDeployer\";\nimport LiquidityRemover from \"./RemoveLiquidity\";\n\nconst styles = (theme) => ({\n  paperContainer: {\n    borderRadius: theme.spacing(2),\n    padding: theme.spacing(1),\n    paddingBottom: theme.spacing(3),\n  },\n  fullWidth: {\n    width: \"100%\",\n  },\n  title: {\n    textAlign: \"center\",\n    padding: theme.spacing(0.5),\n    marginBottom: theme.spacing(1),\n  },\n  hr: {\n    width: \"100%\",\n  },\n  balance: {\n    padding: theme.spacing(1),\n    overflow: \"wrap\",\n    textAlign: \"center\",\n  },\n  buttonIcon: {\n    marginRight: theme.spacing(1),\n    padding: theme.spacing(0.4),\n  },\n});\n\nconst useStyles = makeStyles(styles);\n\nfunction Liquidity() {\n  const classes = useStyles();\n\n  const [deploy, setDeploy] = React.useState(true);\n\n  const deploy_or_remove = (deploy) => {\n    if (deploy == true) {\n      return <LiquidityDeployer />;\n    }\n    return <LiquidityRemover />;\n  };\n\n  const changeStyles = (K) => {\n    if (K == true) {\n      let add_button = document.getElementById(\"add-button\");\n      add_button.style.backgroundColor = \"#ff0000\";\n\n      let remove_button = document.getElementById(\"remove-button\");\n      remove_button.style.backgroundColor = \"#9e9e9e\";\n    } else {\n      let remove_button = document.getElementById(\"remove-button\");\n      remove_button.style.backgroundColor = \"#ff0000\";\n\n      let add_button = document.getElementById(\"add-button\");\n      add_button.style.backgroundColor = \"#9e9e9e\";\n    }\n  };\n\n  return (\n    <div>\n      <Container maxWidth=\"xs\">\n        <Paper className={classes.paperContainer}>\n          <Typography\n            variant=\"h5\"\n            className={classes.title}\n            color=\"common.white\"\n          >\n            <ButtonGroup size=\"large\" variant=\"contained\">\n              <Button\n                id=\"add-button\"\n                color=\"primary\"\n                text=\"white\"\n                onClick={() => {\n                  setDeploy(true);\n                  changeStyles(true);\n                }}\n              >\n                Deploy Liquidity\n              </Button>\n\n              <Button\n                id=\"remove-button\"\n                color=\"secondary\"\n                text=\"white\"\n                onClick={() => {\n                  setDeploy(false);\n                  changeStyles(false);\n                }}\n              >\n                Remove Liquidity\n              </Button>\n            </ButtonGroup>\n          </Typography>\n\n          {deploy_or_remove(deploy)}\n        </Paper>\n      </Container>\n    </div>\n  );\n}\n\nexport default Liquidity;\n","import React from \"react\";\nimport \"./App.css\";\nimport { ethers } from \"ethers\";\nimport _App from \"./ethereum\";\n// import Swap from \"./Swap\";\n// import Liquidity from \"./Liquidity\";\nimport NarBar from \"./NavBar/NavBar\";\nimport CurrencySwapper from \"./CurrencySwapper/CurrencySwapper\";\nimport { Route, Link } from \"react-router-dom\";\nimport { SnackbarProvider } from \"notistack\";\nimport LiquidityDeployer from \"./LiquidityDeployer/LiquidityDeployer\";\nimport LiquidityRemover from \"./LiquidityDeployer/RemoveLiquidity\";\nimport Liquidity from \"./LiquidityDeployer/Liquidity\";\nimport { createTheme, ThemeProvider } from \"@material-ui/core\";\n\nconst theme = createTheme({\n  palette: {\n    primary: {\n      main: \"#ff0000\",\n      contrastText: \"#ffffff\",\n    },\n    secondary: {\n      main: \"#9e9e9e\",\n      contrastText: \"#ffffff\",\n    },\n  },\n});\n\nfunction App() {\n  return (\n    <div className=\"App\">\n      <SnackbarProvider maxSnack={3}>\n        <ThemeProvider theme={theme}>\n          <NarBar />\n          <Route exact path=\"/uniswap-react/\" component={CurrencySwapper} />\n          <Route exact path=\"/uniswap-react/liquidity\" component={Liquidity} />\n        </ThemeProvider>\n      </SnackbarProvider>\n    </div>\n  );\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport \"bootstrap/dist/css/bootstrap.css\";\nimport \"./index.css\";\nimport App from \"./App\";\nimport reportWebVitals from \"./reportWebVitals\";\nimport { BrowserRouter } from \"react-router-dom\";\n\nReactDOM.render(\n  <BrowserRouter>\n    <React.StrictMode>\n      <App />\n    </React.StrictMode>\n  </BrowserRouter>,\n\n  document.getElementById(\"root\")\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}