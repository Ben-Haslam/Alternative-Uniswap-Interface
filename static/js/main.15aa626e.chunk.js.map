{"version":3,"sources":["ethereum.js","CurrencySwapper/CurrencyButton.js","constants/coins.js","ethereumFunctions.js","CurrencySwapper/CurrencyDialog.js","NavBar/MenuItems.js","assets/img/logo.svg","NavBar/NavBar.js","CurrencySwapper/CurrencyField.js","Components/LoadingButton.js","CurrencySwapper/CurrencySwapper.js","LiquidityDeployer/LiquidityDeployer.js","App.js","reportWebVitals.js","index.js"],"names":["ROUTER","require","ERC20","FACTORY","PAIR","Component","useStyles","makeStyles","theme","button","width","paddingTop","spacing","paddingBottom","backgroundColor","COLORS","coinName","opacity","CurrencyButton","props","coinAbbr","onClick","classes","ButtonBase","focusRipple","className","Grid","container","direction","Typography","variant","AUTONITY","name","abbr","address","TOKEN_A","TOKEN_B","ALL","ALL_WITHOUT_AUTONITY","getProvider","ethers","providers","Web3Provider","window","ethereum","getSigner","provider","getRouter","signer","Contract","abi","getWeth","getFactory","getAccount","a","request","method","accounts","router","token1_address","token2_address","getAmountsOut","utils","parseEther","amount_out","rate","formatEther","Number","getBalanceAndSymbol","accountAddress","COINS","getBalance","balanceRaw","balance","symbol","token","balanceOf","address1","address2","amount","routerContract","currencies","time","Math","floor","Date","now","deadline","BigNumber","from","amountIn","toString","callStatic","amountOut","currency1","approve","swapExactETHForTokens","value","swapExactTokensForETH","swapExactTokensForTokens","getReserves","factory","getPair","pairAddress","pair","reservesRaw","results","toFixed","token0","token1","amount1","amount2","amount1Min","amount2Min","account","amountInA","amountInB","amountAMin","amountBMin","token2","console","log","addLiquidity","styles","dialogContainer","borderRadius","titleSection","padding","titleText","alignSelf","hr","margin","paddingLeft","paddingRight","currencyList","height","overflowY","currencyContainer","marginTop","overflow","DialogTitle","withStyles","children","onClose","other","disableTypography","justifyContent","alignContent","IconButton","aria-label","DialogActions","root","MuiDialogActions","CurrencyDialog","open","coins","React","useState","setAddress","error","setError","exit","Dialog","undefined","fullWidth","maxWidth","paper","TextField","onChange","e","target","placeholder","helperText","item","map","coin","index","xs","Button","autoFocus","err","doesTokenExist","color","MenuItems","title","url","cName","NavBar","state","clicked","src","logo","to","minHeight","borderColor","borderWidth","borderStyle","grid","fab","zIndex","input","typography","h5","inputBase","textAlign","CurrencyField","activeField","alignItems","Fab","size","InputBase","disabled","wrapper","position","success","green","fail","red","progress","top","left","marginLeft","LoadingButton","loading","valid","type","CircularProgress","paperContainer","switchButton","marginBottom","CurrencySwapper","enqueueSnackbar","useSnackbar","dialog1Open","setDialog1Open","dialog2Open","setDialog2Open","setCurrency1","currency2","setCurrency2","conversionRate","setConversionRate","reserves","setReserves","field1Value","setField1Value","field2Value","setField2Value","setAccount","setLoading","switchFields","reverse","handleChange","field1","formatBalance","parseFloat","toPrecision","formatReserve","reserve","useEffect","getConversionRate","then","data","isNaN","currencyTimeout","setTimeout","clearTimeout","Container","Paper","fontSize","validFloat","RegExp","test","isButtonEnabled","swapCurrency","catch","message","autoHideDuration","buttonIcon","marginRight","LiquidityDeployer","oldField1Value","oldField2Value","field2","App","maxSnack","exact","path","component","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.15aa626e.chunk.js","sourcesContent":["import {Contract, ethers} from \"ethers\";\nimport {Component} from \"react\";\n\nconst ROUTER = require(\"./build/UniswapV2Router02.json\");\nconst ERC20 = require(\"./build/ERC20.json\");\nconst FACTORY = require(\"./build/IUniswapV2Factory.json\");\nconst PAIR = require(\"./build/IUniswapV2Pair.json\");\n\nexport class _App extends Component {\n  async loadBlockchainData() {\n    const accounts = await window.ethereum.request({\n      method: \"eth_requestAccounts\",\n    });\n    const provider = new ethers.providers.Web3Provider(window.ethereum);\n    const signer = provider.getSigner();\n    let balance_0 = await provider.getBalance(accounts[0]);\n    let balance_1 = ethers.utils.formatEther(balance_0);\n\n    this.setState({ account: accounts[0] });\n    this.setState({ provider: provider });\n    this.setState({ signer: signer });\n    this.setState({ balance: balance_1 });\n\n    const Router = new Contract(\n        this.state.Router_address,\n        ROUTER.abi,\n        this.state.signer\n    );\n\n    const Weth = new Contract(\n        this.state.Weth_address,\n        ERC20.abi,\n        this.state.signer\n    );\n\n    const Factory = new Contract(\n        this.state.Factory_address,\n        FACTORY.abi,\n        this.state.provider\n    );\n\n    this.setState({ Router: Router });\n    this.setState({ Weth: Weth });\n    this.setState({ Factory: Factory });\n  }\n\n  async getTokenAData(address) {\n    try {\n      const TokenA = new Contract(address, ERC20.abi, this.state.signer);\n\n      const TokenA_balance_0 = await TokenA.balanceOf(this.state.account);\n      const TokenA_balance_1 = ethers.utils.formatEther(TokenA_balance_0);\n      const TokenA_symbol = await TokenA.symbol();\n\n      this.setState({ TokenA_balance: TokenA_balance_1 });\n      this.setState({ TokenA: TokenA });\n      document.getElementById(\"TokenA_message\").innerHTML =\n          TokenA_symbol.concat(\" balance: \");\n    } catch (err) {\n      document.getElementById(\"TokenA_message\").innerHTML =\n          \"Error: Please enter a valid token address\";\n    }\n  }\n\n  async getTokenBData(address) {\n    try {\n      const TokenB = new Contract(address, ERC20.abi, this.state.signer);\n\n      const TokenB_balance_0 = await TokenB.balanceOf(this.state.account);\n      const TokenB_balance_1 = ethers.utils.formatEther(TokenB_balance_0);\n      const TokenB_symbol = await TokenB.symbol();\n\n      this.setState({ TokenB_balance: TokenB_balance_1 });\n      this.setState({ TokenB: TokenB });\n      document.getElementById(\"TokenB_message\").innerHTML =\n          TokenB_symbol.concat(\" balance: \");\n    } catch (err) {\n      document.getElementById(\"TokenB_message\").innerHTML =\n          \"Error: Please enter a valid token address\";\n    }\n  }\n\n  async getPair(address0, address1) {\n    if (this.state.TokenA !== undefined && this.state.TokenB !== undefined) {\n      const Factory = this.state.Factory;\n      const pairAddress = await Factory.getPair(address0, address1);\n\n      const pair = new Contract(pairAddress, PAIR.abi, this.state.signer);\n      const reserves_BN = await pair.getReserves();\n\n      const reserves0 = Number(\n          ethers.utils.formatEther(reserves_BN[0])\n      ).toFixed(2);\n      const reserves1 = Number(\n          ethers.utils.formatEther(reserves_BN[1])\n      ).toFixed(2);\n\n      return [reserves0, reserves1];\n    }\n  }\n}\n\nexport default _App;\n","import React from \"react\";\nimport {ButtonBase, Grid, makeStyles, Typography} from \"@material-ui/core\";\nimport PropTypes from \"prop-types\";\nimport * as COLORS from \"@material-ui/core/colors\";\n\nconst useStyles = makeStyles((theme) => ({\n    button: {\n        width: \"100%\",\n        paddingTop: theme.spacing(0.5),\n        paddingBottom: theme.spacing(0.5),\n        '&:hover, &$focusVisible': {\n            backgroundColor: COLORS.grey[200]\n        },\n    },\n    coinName: {\n        opacity: 0.6\n    },\n}));\n\nCurrencyButton.propTypes = {\n    coinName: PropTypes.string.isRequired,\n    coinAbbr: PropTypes.string.isRequired,\n    onClick: PropTypes.func.isRequired\n}\n\nexport default function CurrencyButton(props) {\n    const {coinName, coinAbbr, onClick, ...other} = props;\n    const classes = useStyles();\n\n    return (\n        <ButtonBase\n            focusRipple\n            className={classes.button}\n            onClick={onClick}\n        >\n            <Grid container direction=\"column\">\n                <Typography variant=\"h6\">{coinAbbr}</Typography>\n                <Typography variant=\"body2\" className={classes.coinName}>{coinName}</Typography>\n            </Grid>\n        </ButtonBase>\n    )\n}","export const AUTONITY = {\n    name: \"Autonity\",  // TODO Is this right?\n    abbr: \"AUT\",\n    address: \"0x3f0D1FAA13cbE43D662a37690f0e8027f9D89eBF\"\n}\n\nexport const TOKEN_A = {\n    name: \"Token A\",\n    abbr: \"TA\",\n    address: \"0x1d29BD2ACedBff15A59e946a4DE26d5257447727\"\n}\n\nexport const TOKEN_B = {\n    name: \"Token B\",\n    abbr: \"TB\",\n    address: \"0xc108a13D00371520EbBeCc7DF5C8610C71F4FfbA\"\n}\n\nexport const ALL = [AUTONITY, TOKEN_A, TOKEN_B];\nexport const ALL_WITHOUT_AUTONITY = [TOKEN_A, TOKEN_B];","import {Contract, ethers} from \"ethers\";\nimport * as COINS from \"./constants/coins\";\n\nconst ROUTER = require(\"./build/UniswapV2Router02.json\");\nconst ERC20 = require(\"./build/ERC20.json\");\nconst FACTORY = require(\"./build/IUniswapV2Factory.json\");\nconst PAIR = require(\"./build/IUniswapV2Pair.json\");\n\nexport function getProvider() {\n    return new ethers.providers.Web3Provider(window.ethereum);\n}\n\nexport function getSigner(provider) {\n    return provider.getSigner();\n}\n\nexport function getRouter(address, signer) {\n    return new Contract(\n        address,\n        ROUTER.abi,\n        signer\n    );\n}\n\nexport function getWeth(address, signer) {\n    return new Contract(\n        address,\n        ERC20.abi,\n        signer\n    );\n}\n\nexport function getFactory(address, signer) {\n    return new Contract(\n        address,\n        FACTORY.abi,\n        signer\n    );\n}\n\nexport async function getAccount() {\n    const accounts = await window.ethereum.request({\n        method: \"eth_requestAccounts\",\n    });\n\n    return accounts[0];\n}\n\nexport async function getConversionRate(router, token1_address, token2_address) {\n    try {\n        const amount_out = await router.getAmountsOut(ethers.utils.parseEther(\"1\"), [token1_address, token2_address]);\n        const rate = ethers.utils.formatEther(amount_out[1]);\n        return Number(rate);\n    }\n    catch {\n        return false;\n    }\n}\n\n// This function returns an object with 2 fields: `balance` which container's the account's balance in the particular currency,\n// and `symbol` which is the abbreviation of the token name. To work correctly it must be provided with 4 arguments:\n//    `accountAddress` - An Ethereum address of the current user's account\n//    `address` - An Ethereum address of the currency to check for (either a token or AUT)\n//    `provider` - The current provider\n//    `signer` - The current signer\nexport async function getBalanceAndSymbol(accountAddress, address, provider, signer) {\n    try {\n        if (address === COINS.AUTONITY.address) {\n            const balanceRaw = await provider.getBalance(accountAddress);\n\n            return {\n                balance: ethers.utils.formatEther(balanceRaw),\n                symbol: COINS.AUTONITY.abbr\n            }\n        }\n        else {\n            const token = new Contract(address, ERC20.abi, signer);\n            const balanceRaw = await token.balanceOf(accountAddress);\n            const symbol = await token.symbol();\n\n            return {\n                balance: ethers.utils.formatEther(balanceRaw),\n                symbol: symbol\n            }\n        }\n    }\n    catch (err) {\n        return false\n    }\n}\n\nexport function doesTokenExist(address, signer) {\n    try {\n        return new Contract(address, ERC20.abi, signer)\n    }\n    catch (err) {\n        return false\n    }\n}\n\n// This function swaps two particular currencies, it can handle switching from Eth to Token, Token to Eth, and Token to Token.\n// No error handling is done, so any issues can be caught with the use of .catch()\n// To work correctly, there needs to be 7 arguments:\n//    `address1` - An Ethereum address of the currency to trade from (either a token or AUT)\n//    `address2` - An Ethereum address of the currency to trade to (either a token or AUT)\n//    `amount` - A float or similar number representing how many of address1's currency to trade\n//    `routerContract` - The router contract to carry out this trade\n//    `accountAddress` - An Ethereum address of the current user's account\n//    `provider` - The current provider\n//    `signer` - The current signer\nexport async function swapCurrency(address1, address2, amount, routerContract, accountAddress, provider, signer) {\n    const currencies = [address1, address2];\n    const time = Math.floor(Date.now() / 1000) + 200000;\n    const deadline = ethers.BigNumber.from(time);\n\n    const amountIn = ethers.utils.parseEther(amount.toString());\n    const amountOut = await routerContract.callStatic.getAmountsOut(amountIn, currencies);\n\n    const currency1 = new Contract(address1, ERC20.abi, signer)\n    await currency1.approve(routerContract.address, amountIn);\n\n    if (address1 === COINS.AUTONITY.address) {\n        // Eth -> Token\n        await routerContract.swapExactETHForTokens(\n            amountOut[1],\n            currencies,\n            accountAddress,\n            deadline,\n            { value: amountIn }\n        );\n    }\n    else if (address2 === COINS.AUTONITY.address) {\n        // Token -> Eth\n        await routerContract.swapExactTokensForETH(\n            amountIn,\n            amountOut[1],\n            currencies,\n            accountAddress,\n            deadline\n        );\n    }\n    else {\n        await routerContract.swapExactTokensForTokens(\n            amountIn,\n            amountOut[1],\n            currencies,\n            accountAddress,\n            deadline\n        );\n    }\n}\n\n// This function returns the reserves stored in a the liquidity pool between the currency of address1 and the currency\n// of address2. Some extra logic was needed to make sure that the results were returned in the correct order, as\n// `pair.getReserves()` would always return the reserves in the same order regardless of which order the addresses were.\n//    `address1` - An Ethereum address of the currency to trade from (either a token or AUT)\n//    `address2` - An Ethereum address of the currency to trade to (either a token or AUT)\n//    `factory` - The current factory\n//    `signer` - The current signer\nexport async function getReserves(address1, address2, factory, signer) {\n    const pairAddress = await factory.getPair(address1, address2);\n\n    const pair = new Contract(pairAddress, PAIR.abi, signer);\n    const reservesRaw = await pair.getReserves();\n\n    let results = [\n        Number(ethers.utils.formatEther(reservesRaw[0])).toFixed(2),\n        Number(ethers.utils.formatEther(reservesRaw[1])).toFixed(2)\n    ];\n\n    return [\n        await pair.token0() === address1 ? results[0] : results[1],\n        await pair.token1() === address2 ? results[1] : results[0],\n    ]\n}\n\nexport async function addLiquidity(address1, address2, amount1, amount2, amount1Min, amount2Min, routerContract, account, signer) {\n    const amountInA = ethers.utils.parseEther(amount1.toString());\n    const amountInB = ethers.utils.parseEther(amount2.toString());\n\n    const amountAMin = ethers.utils.parseEther(amount1Min.toString());\n    const amountBMin = ethers.utils.parseEther(amount2Min.toString());\n\n    const time = Math.floor(Date.now() / 1000) + 200000;\n    const deadline = ethers.BigNumber.from(time);\n\n    const token1 = new Contract(address1, ERC20.abi, signer)\n    const token2 = new Contract(address2, ERC20.abi, signer)\n\n    await token1.approve(routerContract.address, amountInA);\n    await token2.approve(routerContract.address, amountInB);\n\n    console.log([\n        address1,\n        address2,\n        Number(amountInA),\n        Number(amountInB),\n        Number(amountAMin),\n        Number(amountBMin),\n        account,\n        deadline\n    ])\n\n    await routerContract.addLiquidity(\n        address1,\n        address2,\n        amountInA,\n        amountInB,\n        amountAMin,\n        amountBMin,\n        account,\n        deadline\n    );\n}","import React from \"react\";\nimport {\n    Button,\n    Dialog,\n    Grid,\n    IconButton, makeStyles,\n    TextField,\n    Typography,\n    withStyles\n} from \"@material-ui/core\";\nimport MuiDialogTitle from '@material-ui/core/DialogTitle';\nimport MuiDialogActions from '@material-ui/core/DialogActions';\nimport CloseIcon from '@material-ui/icons/Close';\nimport CurrencyButton from \"./CurrencyButton\";\nimport {doesTokenExist} from \"../ethereumFunctions\";\nimport PropTypes from \"prop-types\";\nimport * as COLORS from \"@material-ui/core/colors\"\n\nconst styles = (theme) => ({\n    dialogContainer: {\n        borderRadius: theme.spacing(2),\n    },\n    titleSection: {\n        padding: theme.spacing(2)\n    },\n    titleText: {\n        alignSelf: \"center\"\n    },\n    hr: {\n        margin: 0\n    },\n    address: {\n        paddingLeft: theme.spacing(2.5),\n        paddingRight: theme.spacing(2.5),\n        paddingBottom: theme.spacing(2)\n    },\n    currencyList: {\n        height: \"300px\",\n        overflowY: \"scroll\",\n    },\n    currencyContainer: {\n        paddingLeft: theme.spacing(0.5),\n        paddingRight: theme.spacing(0.5),\n        paddingTop: theme.spacing(2),\n        marginTop: theme.spacing(2),\n        overflow: \"hidden\"\n    }\n})\n\nconst useStyles = makeStyles(styles);\n\n// This is a modified version of MaterialUI's DialogTitle component, I've added a close button in the top right corner\nconst DialogTitle = withStyles(styles)((props) => {\n    const { children, classes, onClose, ...other } = props;\n    return (\n        <MuiDialogTitle disableTypography className={classes.titleSection} {...other}>\n            <Grid container direction=\"row\" justifyContent=\"space-between\" alignContent=\"center\">\n                <Typography variant=\"h6\" className={classes.titleText}>{children}</Typography>\n                {onClose ? (\n                    <IconButton aria-label=\"close\" onClick={onClose}>\n                        <CloseIcon />\n                    </IconButton>\n                ) : null}\n            </Grid>\n        </MuiDialogTitle>\n    );\n});\n\n// This is a modified version of MaterialUI's DialogActions component, the color has been changed by modifying the CSS\nconst DialogActions = withStyles((theme) => ({\n    root: {\n        margin: 0,\n        padding: theme.spacing(1),\n        backgroundColor: COLORS.grey[100],\n    },\n}))(MuiDialogActions);\n\nCurrencyDialog.propTypes = {\n    onClose: PropTypes.func.isRequired,\n    open: PropTypes.bool.isRequired,\n    coins: PropTypes.array.isRequired\n}\n\nexport default function CurrencyDialog(props) {\n    // The CurrencyDialog component will display a dialog window on top of the page, allowing a user to select a currency\n    // from a list (list can be found in 'src/constants/coins.js') or enter an address into a search field. Any entered\n    // addresses will first be validated to make sure they exist.\n    // When the dialog closes, it will call the `onClose` prop with 1 argument which will either be undefined (if the\n    // user closes the dialog without selecting anything), or will be a string containing the address of a currency.\n\n    const classes = useStyles();\n    const {onClose, open, coins, signer, ...others} = props;\n\n    const [address, setAddress] = React.useState(\"\");\n    const [error, setError] = React.useState(\"\");\n\n    // Called when the user tries to input a custom address, this function will validate the address and will either\n    // then close the dialog and return the validated address, or will display an error.\n    const submit = () => {\n        if (doesTokenExist(address, signer)) {\n            exit(address)\n        }\n        else {\n            setError(\"This address is not valid\")\n        }\n    }\n\n    // Resets any fields in the dialog (in case it's opened in the future) and calls the `onClose` prop\n    const exit = (value) => {\n        setError(\"\");\n        setAddress(\"\");\n        onClose(value);\n    }\n\n    return (\n        <Dialog\n            open={open}\n            onClose={() => exit(undefined)}\n            fullWidth\n            maxWidth=\"sm\"\n            classes={{paper: classes.dialogContainer}}\n        >\n            <DialogTitle onClose={() => exit(undefined)}>\n                Select Currency\n            </DialogTitle>\n\n            <hr className={classes.hr}/>\n\n            <div className={classes.currencyContainer}>\n                <Grid container direction=\"column\" spacing={1} alignContent=\"center\">\n                    <TextField\n                        value={address}\n                        onChange={(e) => setAddress(e.target.value)}\n                        variant=\"outlined\"\n                        placeholder=\"Paste Address\"\n                        error={error !== \"\"}\n                        helperText={error}\n                        fullWidth\n                        className={classes.address}\n                    />\n\n                    <hr className={classes.hr}/>\n\n                    <Grid item className={classes.currencyList}>\n                        <Grid container direction=\"column\">\n                            {/* Maps all of the currencies in the constants file to buttons */}\n                            {coins.map((coin, index) => (\n                                <Grid item key={index} xs={12}>\n                                    <CurrencyButton\n                                        coinName={coin.name}\n                                        coinAbbr={coin.abbr}\n                                        onClick={() => exit(coin.address)}\n                                    />\n                                </Grid>\n                            ))}\n                        </Grid>\n                    </Grid>\n                </Grid>\n            </div>\n\n            <hr className={classes.hr}/>\n\n            <DialogActions>\n                <Button autoFocus onClick={submit} color=\"primary\">\n                    Enter\n                </Button>\n            </DialogActions>\n        </Dialog>\n    )\n}\n","export const MenuItems = [\n  // {\n  //   title: \"Swap\",\n  //   url: \"/uniswap-react/\",\n  //   cName: \"nav-links\",\n  // },\n  {\n    title: \"Swap\",\n    url: \"/uniswap-react/\",\n    cName: \"nav-links\",\n  },\n  // {\n  //   title: \"Deploy Liquidity\",\n  //   url: \"/uniswap-react/liquidity\",\n  //   cName: \"nav-links\",\n  // },\n  {\n    title: \"Liquidity\",\n    url: \"/uniswap-react/liquidity-beta\",\n    cName: \"nav-links\",\n  },\n];\n","export default __webpack_public_path__ + \"static/media/logo.28418735.svg\";","import React, { Component } from \"react\";\nimport { Link } from \"react-router-dom\";\nimport { MenuItems } from \"./MenuItems\";\nimport logo from \"../assets/img/logo.svg\";\nimport \"./NavBar.css\";\n\nclass NavBar extends Component {\n  state = { clicked: false };\n\n  render() {\n    return (\n      <nav>\n        <div className=\"Title\">\n          <h1 className=\"navbar-logo\">\n            <img src={logo} className=\"logo\"></img> Autonity Uniswap\n          </h1>\n        </div>\n\n        <div className=\"NavbarItems\">\n          <ul className={`nav-menu`}>\n            {MenuItems.map((item, index) => {\n              return (\n                <li key={index}>\n                  <Link className={\"nav-links\"} to={item.url}>\n                    {item.title}\n                  </Link>\n                </li>\n              );\n            })}\n          </ul>\n        </div>\n      </nav>\n    );\n  }\n}\n\nexport default NavBar;\n","import React from \"react\";\nimport {Fab, Grid, InputBase, makeStyles} from \"@material-ui/core\";\nimport ExpandMoreIcon from \"@material-ui/icons/ExpandMore\";\nimport PropTypes from \"prop-types\";\nimport * as COLORS from \"@material-ui/core/colors\";\n\nconst useStyles = makeStyles((theme) => ({\n    container: {\n        padding: theme.spacing(1),\n        minHeight: \"80px\",\n        backgroundColor: COLORS.grey[50],\n        borderRadius: theme.spacing(2),\n        borderColor: COLORS.grey[300],\n        borderWidth: \"1px\",\n        borderStyle: \"solid\"\n    },\n    grid: {\n        height: \"60px\"\n    },\n    fab: {\n        zIndex: \"0\",\n    },\n    input: {\n        ...theme.typography.h5,\n        width: \"100%\",\n    },\n    inputBase: {\n        textAlign: \"right\"\n    }\n}));\n\nCurrencyField.propTypes = {\n    onClick: PropTypes.func.isRequired,\n    symbol: PropTypes.string.isRequired,\n    value: PropTypes.string.isRequired,\n    onChange: PropTypes.func,\n    activeField: PropTypes.bool.isRequired\n}\n\nexport default function CurrencyField(props) {\n    // This component is used to selecting a currency and entering a value, the props are explained below:\n    //      onClick - (string) => void - Called when the button is clicked\n    //      symbol - string - The text displayed on the button\n    //      value - string - The value of the text field\n    //      onChange - (e) => void - Called when the text field changes\n    //      activeField - boolean - Whether text can be entered into this field or not\n\n    const classes = useStyles();\n    const {onClick, symbol, value, onChange, activeField} = props;\n\n    return (\n        <div className={classes.container}>\n            <Grid container direction=\"row\" justifyContent=\"space-between\" alignItems=\"center\" className={classes.grid}>\n                {/* Button */}\n                <Grid item xs={3}>\n                    <Fab\n                        size=\"small\"\n                        variant=\"extended\"\n                        onClick={onClick}\n                        className={classes.fab}\n                    >\n                        {symbol}\n                        <ExpandMoreIcon/>\n                    </Fab>\n                </Grid>\n\n                {/* Text Field */}\n                <Grid item xs={9}>\n                    <InputBase\n                        value={value}\n                        onChange={onChange}\n                        placeholder=\"0.0\"\n                        disabled={!activeField}\n                        classes={{root: classes.input, input: classes.inputBase}}\n                    />\n                </Grid>\n            </Grid>\n        </div>\n    )\n}","import React from \"react\";\nimport {Button, CircularProgress, makeStyles} from \"@material-ui/core\";\nimport green from \"@material-ui/core/colors/green\";\nimport red from \"@material-ui/core/colors/red\";\n\n\nconst useStyles = makeStyles((theme) => ({\n    wrapper: {\n        margin: 0,\n        position: 'relative',\n    },\n    success: {\n        backgroundColor: green[500],\n        '&:hover': {\n            backgroundColor: green[700],\n        },\n    },\n    fail: {\n        backgroundColor: red[500],\n        '&:hover': {\n            backgroundColor: red[700],\n        },\n    },\n    progress: {\n        color: green[500],\n        position: 'absolute',\n        top: '50%',\n        left: '50%',\n        marginTop: -12,\n        marginLeft: -12,\n    },\n}));\n\nexport default function LoadingButton(props) {\n    const classes = useStyles();\n\n    const { children, loading, valid, success, fail, onClick, ...other} = props;\n\n    const calculateClass = () => {\n        if (fail) { return classes.fail}\n        if (!loading && success) { return classes.success }\n    }\n\n    return (\n        <div className={classes.wrapper}>\n            <Button variant=\"contained\" color=\"primary\" fullWidth disabled={loading || !valid} type=\"submit\" onClick={onClick} className={calculateClass()} {...other}>\n                {children}\n            </Button>\n            {loading && <CircularProgress size={24} className={classes.progress} />}\n        </div>\n    )\n}\n","import React, {useEffect} from \"react\";\nimport {\n    Container,\n    Grid,\n    IconButton,\n    makeStyles,\n    Paper,\n    Typography,\n} from \"@material-ui/core\";\nimport SwapVerticalCircleIcon from '@material-ui/icons/SwapVerticalCircle';\nimport { useSnackbar } from \"notistack\";\nimport LoopIcon from '@material-ui/icons/Loop';\nimport {\n    getAccount,\n    getConversionRate,\n    getFactory,\n    getProvider,\n    getRouter,\n    getSigner,\n    getBalanceAndSymbol,\n    getWeth,\n    swapCurrency,\n    getReserves\n} from \"../ethereumFunctions\";\nimport CurrencyField from \"./CurrencyField\";\nimport CurrencyDialog from \"./CurrencyDialog\";\nimport LoadingButton from \"../Components/LoadingButton\";\nimport * as COINS from '../constants/coins';\n\nconst styles = (theme) => ({\n    paperContainer: {\n        borderRadius: theme.spacing(2),\n        padding: theme.spacing(1),\n        paddingBottom: theme.spacing(3)\n    },\n    switchButton: {\n        zIndex: 1,\n        margin: \"-16px\",\n        padding: theme.spacing(0.5)\n    },\n    fullWidth: {\n        width: \"100%\"\n    },\n    title: {\n        textAlign: \"center\",\n        padding: theme.spacing(0.5),\n        marginBottom: theme.spacing(1)\n    },\n    hr: {\n        width: \"100%\"\n    },\n    balance: {\n        padding: theme.spacing(1),\n        overflow: \"wrap\",\n        textAlign: \"center\"\n    }\n})\n\nconst useStyles = makeStyles(styles);\n\nfunction CurrencySwapper(props) {\n    const classes = useStyles();\n    const { enqueueSnackbar } = useSnackbar();\n\n    // Stores a record of whether their respective dialog window is open\n    const [dialog1Open, setDialog1Open] = React.useState(false);\n    const [dialog2Open, setDialog2Open] = React.useState(false);\n\n    // Stores data about their respective currency\n    const [currency1, setCurrency1] = React.useState({\n        address: undefined,\n        symbol: undefined,\n        balance: undefined,\n    });\n    const [currency2, setCurrency2] = React.useState({\n        address: undefined,\n        symbol: undefined,\n        balance: undefined\n    });\n\n    // Stores the current conversion rate between currency1 and currency2\n    const [conversionRate, setConversionRate] = React.useState(undefined);\n\n    // Stores the current reserves in the liquidity pool between currency1 and currency2\n    const [reserves, setReserves] = React.useState([\"0.0\", \"0.0\"]);\n\n    // Stores the current value of their respective text box\n    const [field1Value, setField1Value] = React.useState(\"\");\n    const [field2Value, setField2Value] = React.useState(\"\");\n\n    // Stores information for the Autonity Network\n    const [provider, setProvider] = React.useState(getProvider());\n    const [signer, setSigner] = React.useState(getSigner(provider));\n    const [account, setAccount] = React.useState(undefined);  // This is populated in a react hook\n    const [router, setRouter] = React.useState(getRouter(\"0x4489D87C8440B19f11d63FA2246f943F492F3F5F\", signer));\n    const [weth, setWeth] = React.useState(getWeth(\"0x3f0D1FAA13cbE43D662a37690f0e8027f9D89eBF\", signer));\n    const [factory, setFactory] = React.useState(getFactory(\"0x4EDFE8706Cefab9DCd52630adFFd00E9b93FF116\", signer));\n\n    // Controls the loading button\n    const [loading, setLoading] = React.useState(false);\n\n    // Switches the top and bottom currencies, this is called when users hit the swap button or select the opposite\n    // token in the dialog (e.g. if currency1 is TokenA and the user selects TokenB when choosing currency2)\n    const switchFields = () => {\n        setCurrency1(currency2);\n        setCurrency2(currency1);\n        setField1Value(field2Value);\n        setReserves(reserves.reverse());\n    }\n\n    // These functions take an HTML event, pull the data out and puts it into a state variable.\n    const handleChange = {\n        field1: (e) => {\n            setField1Value(e.target.value);\n        }\n    }\n\n    // Turns the account's balance into something nice and readable\n    const formatBalance = (balance, symbol) => {\n        if (balance && symbol)\n            return parseFloat(balance).toPrecision(8) + \" \" + symbol;\n        else\n            return \"0.0\";\n    }\n\n    // Turns the currency's reserves into something nice and readable\n    const formatReserve = (reserve, symbol) => {\n        if (reserve && symbol)\n            return reserve + \" \" + symbol;\n        else\n            return \"0.0\";\n    }\n\n    // Determines whether the button should be enabled or not\n    const isButtonEnabled = () => {\n        let validFloat = new RegExp(\"^[0-9]*[.,]?[0-9]*$\")\n\n        // If both currencies have been selected, and a valid float has been entered which is less than the user's balance, then return true\n        return (currency1.address && currency2.address)\n            && validFloat.test(field1Value)\n            && (parseFloat(field1Value) <= currency1.balance);\n    }\n\n    const swap = () => {\n        console.log(\"Attempting to swap tokens...\")\n        setLoading(true);\n\n        swapCurrency(\n            currency1.address,\n            currency2.address,\n            parseFloat(field1Value),\n            router,\n            account,\n            provider,\n            signer\n        )\n            .then(() => {\n                setLoading(false);\n\n                // If the transaction was successful, we clear to input to make sure the user doesn't accidental redo the transfer\n                setField1Value(\"\");\n                enqueueSnackbar(\"Transaction Successful\", {variant: \"success\"});\n            })\n            .catch((e) => {\n                setLoading(false);\n                enqueueSnackbar(\"Transaction Failed (\" + e.message + \")\", {variant: \"error\", autoHideDuration: 10000});\n            })\n    }\n\n    // Called when the dialog window for currency1 exits\n    const onToken1Selected = (address) => {\n        // Close the dialog window\n        setDialog1Open(false);\n\n        // If the user inputs the same token, we want to switch the data in the fields\n        if (address === currency2.address) {\n            switchFields();\n        }\n        // We only update the values if the user provides a token\n        else if (address) {\n            // Getting some token data is async, so we need to wait for the data to return, hence the promise\n            getBalanceAndSymbol(account, address, provider, signer)\n                .then(data => {\n                    setCurrency1({\n                        address: address,\n                        symbol: data.symbol,\n                        balance: data.balance,\n                    })\n                })\n        }\n    }\n\n    // Called when the dialog window for currency2 exits\n    const onToken2Selected = (address) => {\n        // Close the dialog window\n        setDialog2Open(false);\n\n        // If the user inputs the same token, we want to switch the data in the fields\n        if (address === currency1.address) {\n            switchFields();\n        }\n        // We only update the values if the user provides a token\n        else if (address) {\n            // Getting some token data is async, so we need to wait for the data to return, hence the promise\n            getBalanceAndSymbol(account, address, provider, signer)\n                .then(data => {\n                    setCurrency2({\n                        address: address,\n                        symbol: data.symbol,\n                        balance: data.balance,\n                    })\n                })\n        }\n    }\n\n    // The lambdas within these useEffects will be called when a particular dependency is updated. These dependencies\n    // are defined in the array of variables passed to the function after the lambda expression. If there are no dependencies\n    // the lambda will only ever be called when the component mounts. These are very useful for calculating new values\n    // after a particular state change, for example, calculating the new exchange rate whenever the addresses\n    // of the two currencies change.\n    useEffect(() => {\n        // This hook is called when either of the state variables `currency1.address` or `currency2.address` change.\n        // It attempts to calculate and set the state variable `conversionRate`\n        // This means that when the user selects a different currency to convert between, or the currencies are swapped,\n        // the new conversion rate will be calculated.\n\n        console.log(\"Trying to get Conversion Rate between:\\n\" + currency1.address + \"\\n\" + currency2.address)\n\n        if (currency1.address && currency2.address) {\n            getConversionRate(router, currency1.address, currency2.address)\n                .then(rate => setConversionRate(rate));\n\n            getReserves(currency1.address, currency2.address, factory, signer)\n                .then(data => setReserves(data))\n        }\n\n    }, [currency1.address, currency2.address]);\n\n    useEffect(() => {\n        // This hook is called when either of the state variables `field1Value` or `conversionRate` change.\n        // It attempts to calculate and set the state variable `field2Value`\n        // This means that if the user types a new value into the conversion box or the conversion rate changes,\n        // the value in the output box will change.\n\n        if (isNaN(parseFloat(field1Value))) {\n            setField2Value(\"\");\n        }\n        else if (field1Value && conversionRate) {\n            let amount = parseFloat(field1Value) * conversionRate;\n            setField2Value(amount.toFixed(7));\n        }\n        else {\n            setField2Value(\"\");\n        }\n\n    }, [field1Value, conversionRate]);\n\n    useEffect(() => {\n        // This hook creates a timeout that will run every ~10 seconds, it's role is to check if the user's balance has\n        // updated has changed. This allows them to see when a transaction completes by looking at the balance output.\n        // It only updates the balance field in the currency state to prevent this hook from triggering the 'conversionRate' hook.\n\n        const currencyTimeout = setTimeout(() => {\n            console.log(\"Checking balances...\")\n\n            if (currency1.address && currency2.address) {\n                getReserves(currency1.address, currency2.address, factory, signer)\n                    .then(data => setReserves(data))\n            }\n\n            if (currency1) {\n                getBalanceAndSymbol(account, currency1.address, provider, signer)\n                    .then(data => {\n                        setCurrency1({\n                            ...currency1,\n                            balance: data.balance,\n                        })\n                    })\n            }\n            if (currency2) {\n                getBalanceAndSymbol(account, currency2.address, provider, signer)\n                    .then(data => {\n                        setCurrency2({\n                            ...currency2,\n                            balance: data.balance,\n                        })\n                    })\n            }\n        }, 10000);\n\n        return () => clearTimeout(currencyTimeout);\n    })\n\n    useEffect(() => {\n        // This hook will run when the component first mounts, it can be useful to put logic to populate variables here\n\n        getAccount().then(account => {\n            setAccount(account);\n        })\n    })\n\n    return (\n        <div>\n            {/* Dialog Windows */}\n            <CurrencyDialog open={dialog1Open} onClose={onToken1Selected} coins={COINS.ALL} signer={signer}/>\n            <CurrencyDialog open={dialog2Open} onClose={onToken2Selected} coins={COINS.ALL} signer={signer}/>\n\n            {/* Currency Swapper */}\n            <Container maxWidth=\"xs\">\n                <Paper className={classes.paperContainer}>\n                    <Typography variant=\"h5\" className={classes.title}>Swap Currencies</Typography>\n\n                    <Grid container direction=\"column\" alignItems=\"center\" spacing={2}>\n                        <Grid item xs={12} className={classes.fullWidth}>\n                            <CurrencyField\n                                activeField={true}\n                                value={field1Value}\n                                onClick={() => setDialog1Open(true)}\n                                onChange={handleChange.field1}\n                                symbol={currency1.symbol !== undefined ? currency1.symbol : \"Select\"}\n                            />\n                        </Grid>\n\n                        <IconButton onClick={switchFields} className={classes.switchButton}>\n                            <SwapVerticalCircleIcon fontSize=\"medium\"/>\n                        </IconButton>\n\n                        <Grid item xs={12} className={classes.fullWidth}>\n                            <CurrencyField\n                                activeField={false}\n                                value={field2Value}\n                                onClick={() => setDialog2Open(true)}\n                                symbol={currency2.symbol !== undefined ? currency2.symbol : \"Select\"}\n                            />\n                        </Grid>\n\n                        <hr className={classes.hr}/>\n\n                        {/* Balance Display */}\n                        <Typography variant=\"h6\">Your Balances</Typography>\n                        <Grid container direction=\"row\" justifyContent=\"space-between\">\n                            <Grid item xs={6}>\n                                <Typography variant=\"body1\" className={classes.balance}>\n                                    {formatBalance(currency1.balance, currency1.symbol)}\n                                </Typography>\n                            </Grid>\n                            <Grid item xs={6}>\n                                <Typography variant=\"body1\" className={classes.balance}>\n                                    {formatBalance(currency2.balance, currency2.symbol)}\n                                </Typography>\n                            </Grid>\n                        </Grid>\n\n                        <hr className={classes.hr}/>\n\n                        {/* Reserves Display */}\n                        <Typography variant=\"h6\">Reserves</Typography>\n                        <Grid container direction=\"row\" justifyContent=\"space-between\">\n                            <Grid item xs={6}>\n                                <Typography variant=\"body1\" className={classes.balance}>\n                                    {formatReserve(reserves[0], currency1.symbol)}\n                                </Typography>\n                            </Grid>\n                            <Grid item xs={6}>\n                                <Typography variant=\"body1\" className={classes.balance}>\n                                    {formatReserve(reserves[1], currency2.symbol)}\n                                </Typography>\n                            </Grid>\n                        </Grid>\n\n                        <hr className={classes.hr}/>\n\n                        <LoadingButton\n                            loading={loading}\n                            valid={isButtonEnabled()}\n                            success={false}\n                            fail={false}\n                            onClick={swap}\n                        >\n                            <LoopIcon/>\n                            Swap\n                        </LoadingButton>\n                    </Grid>\n                </Paper>\n            </Container>\n        </div>\n    )\n}\n\nexport default CurrencySwapper;","import React, {useEffect} from \"react\";\nimport {\n    Container,\n    Grid,\n    makeStyles,\n    Paper,\n    Typography,\n} from \"@material-ui/core\";\nimport AccountBalanceIcon from '@material-ui/icons/AccountBalance';\nimport { useSnackbar } from \"notistack\";\nimport LoopIcon from '@material-ui/icons/Loop';\nimport {\n    getAccount,\n    getFactory,\n    getProvider,\n    getRouter,\n    getSigner,\n    getBalanceAndSymbol,\n    getWeth,\n    getReserves,\n    addLiquidity\n} from \"../ethereumFunctions\";\nimport CurrencyField from \"../CurrencySwapper/CurrencyField\";\nimport CurrencyDialog from \"../CurrencySwapper/CurrencyDialog\";\nimport LoadingButton from \"../Components/LoadingButton\";\nimport * as COINS from '../constants/coins';\n\nconst styles = (theme) => ({\n    paperContainer: {\n        borderRadius: theme.spacing(2),\n        padding: theme.spacing(1),\n        paddingBottom: theme.spacing(3)\n    },\n    fullWidth: {\n        width: \"100%\"\n    },\n    title: {\n        textAlign: \"center\",\n        padding: theme.spacing(0.5),\n        marginBottom: theme.spacing(1)\n    },\n    hr: {\n        width: \"100%\"\n    },\n    balance: {\n        padding: theme.spacing(1),\n        overflow: \"wrap\",\n        textAlign: \"center\"\n    },\n    buttonIcon: {\n        marginRight: theme.spacing(1),\n        padding: theme.spacing(0.4)\n    }\n})\n\nconst useStyles = makeStyles(styles);\n\nfunction LiquidityDeployer(props) {\n    const classes = useStyles();\n    const { enqueueSnackbar } = useSnackbar();\n\n    // Stores a record of whether their respective dialog window is open\n    const [dialog1Open, setDialog1Open] = React.useState(false);\n    const [dialog2Open, setDialog2Open] = React.useState(false);\n\n    // Stores data about their respective currency\n    const [currency1, setCurrency1] = React.useState({\n        address: undefined,\n        symbol: undefined,\n        balance: undefined,\n    });\n    const [currency2, setCurrency2] = React.useState({\n        address: undefined,\n        symbol: undefined,\n        balance: undefined\n    });\n\n    // Stores the current reserves in the liquidity pool between currency1 and currency2\n    const [reserves, setReserves] = React.useState([\"0.0\", \"0.0\"]);\n\n    // Stores the current value of their respective text box\n    const [field1Value, setField1Value] = React.useState(\"\");\n    const [field2Value, setField2Value] = React.useState(\"\");\n\n    // Stores information for the Autonity Network\n    const [provider, setProvider] = React.useState(getProvider());\n    const [signer, setSigner] = React.useState(getSigner(provider));\n    const [account, setAccount] = React.useState(undefined);  // This is populated in a react hook\n    const [router, setRouter] = React.useState(getRouter(\"0x4489D87C8440B19f11d63FA2246f943F492F3F5F\", signer));\n    const [weth, setWeth] = React.useState(getWeth(\"0x3f0D1FAA13cbE43D662a37690f0e8027f9D89eBF\", signer));\n    const [factory, setFactory] = React.useState(getFactory(\"0x4EDFE8706Cefab9DCd52630adFFd00E9b93FF116\", signer));\n\n    // Controls the loading button\n    const [loading, setLoading] = React.useState(false);\n\n    // Switches the top and bottom currencies, this is called when users hit the swap button or select the opposite\n    // token in the dialog (e.g. if currency1 is TokenA and the user selects TokenB when choosing currency2)\n    const switchFields = () => {\n        let oldField1Value = field1Value;\n        let oldField2Value = field2Value;\n\n        setCurrency1(currency2);\n        setCurrency2(currency1);\n        setField1Value(oldField2Value);\n        setField2Value(oldField1Value);\n        setReserves(reserves.reverse());\n    }\n\n    // These functions take an HTML event, pull the data out and puts it into a state variable.\n    const handleChange = {\n        field1: (e) => {\n            setField1Value(e.target.value);\n        },\n        field2: (e) => {\n            setField2Value(e.target.value);\n        }\n    }\n\n    // Turns the account's balance into something nice and readable\n    const formatBalance = (balance, symbol) => {\n        if (balance && symbol)\n            return parseFloat(balance).toPrecision(8) + \" \" + symbol;\n        else\n            return \"0.0\";\n    }\n\n    // Turns the currency's reserves into something nice and readable\n    const formatReserve = (reserve, symbol) => {\n        if (reserve && symbol)\n            return reserve + \" \" + symbol;\n        else\n            return \"0.0\";\n    }\n\n    // Determines whether the button should be enabled or not\n    const isButtonEnabled = () => {\n        let validFloat = new RegExp(\"^[0-9]*[.,]?[0-9]*$\")\n\n        // If both currencies have been selected, and a valid float has been entered for both, which are less than the user's balances, then return true\n        return (currency1.address && currency2.address)\n            && (validFloat.test(field1Value) && validFloat.test(field2Value))\n            && ((parseFloat(field1Value) <= currency1.balance) && (parseFloat(field2Value) <= currency2.balance));\n    }\n\n    const deploy = () => {\n        console.log(\"Attempting to deploy liquidity...\")\n        setLoading(true);\n\n        addLiquidity(\n            currency1.address,\n            currency2.address,\n            parseFloat(field1Value),\n            parseFloat(field2Value),\n            0,\n            0,\n            router,\n            account,\n            signer\n        )\n            .then(() => {\n                setLoading(false);\n\n                // If the transaction was successful, we clear to input to make sure the user doesn't accidental redo the transfer\n                setField1Value(\"\");\n                setField2Value(\"\");\n                enqueueSnackbar(\"Deployment Successful\", {variant: \"success\"});\n            })\n            .catch((e) => {\n                setLoading(false);\n                enqueueSnackbar(\"Deployment Failed (\" + e.message + \")\", {variant: \"error\", autoHideDuration: 10000});\n            })\n    }\n\n    // Called when the dialog window for currency1 exits\n    const onToken1Selected = (address) => {\n        // Close the dialog window\n        setDialog1Open(false);\n\n        // If the user inputs the same token, we want to switch the data in the fields\n        if (address === currency2.address) {\n            switchFields();\n        }\n        // We only update the values if the user provides a token\n        else if (address) {\n            // Getting some token data is async, so we need to wait for the data to return, hence the promise\n            getBalanceAndSymbol(account, address, provider, signer)\n                .then(data => {\n                    setCurrency1({\n                        address: address,\n                        symbol: data.symbol,\n                        balance: data.balance,\n                    })\n                })\n        }\n    }\n\n    // Called when the dialog window for currency2 exits\n    const onToken2Selected = (address) => {\n        // Close the dialog window\n        setDialog2Open(false);\n\n        // If the user inputs the same token, we want to switch the data in the fields\n        if (address === currency1.address) {\n            switchFields();\n        }\n        // We only update the values if the user provides a token\n        else if (address) {\n            // Getting some token data is async, so we need to wait for the data to return, hence the promise\n            getBalanceAndSymbol(account, address, provider, signer)\n                .then(data => {\n                    setCurrency2({\n                        address: address,\n                        symbol: data.symbol,\n                        balance: data.balance,\n                    })\n                })\n        }\n    }\n\n    useEffect(() => {\n        // This hook runs whenever the currencies change, it will attempt to fetch the new liquidity reserves.\n        console.log(\"Trying to get reserves between:\\n\" + currency1.address + \"\\n\" + currency2.address)\n\n        if (currency1.address && currency2.address) {\n            getReserves(currency1.address, currency2.address, factory, signer)\n                .then(data => setReserves(data))\n        }\n\n    }, [currency1.address, currency2.address]);\n\n    useEffect(() => {\n        // This hook creates a timeout that will run every ~10 seconds, it's role is to check if the user's balance has\n        // updated has changed. This allows them to see when a transaction completes by looking at the balance output.\n\n        const currencyTimeout = setTimeout(() => {\n            console.log(\"Checking balances & Getting reserves...\")\n\n            if (currency1.address && currency2.address) {\n                getReserves(currency1.address, currency2.address, factory, signer)\n                    .then(data => setReserves(data))\n            }\n\n            if (currency1) {\n                getBalanceAndSymbol(account, currency1.address, provider, signer)\n                    .then(data => {\n                        setCurrency1({\n                            ...currency1,\n                            balance: data.balance,\n                        })\n                    })\n            }\n            if (currency2) {\n                getBalanceAndSymbol(account, currency2.address, provider, signer)\n                    .then(data => {\n                        setCurrency2({\n                            ...currency2,\n                            balance: data.balance,\n                        })\n                    })\n            }\n        }, 10000);\n\n        return () => clearTimeout(currencyTimeout);\n    })\n\n    useEffect(() => {\n        // This hook will run when the component first mounts, it can be useful to put logic to populate variables here\n\n        getAccount().then(account => {\n            setAccount(account);\n        })\n    })\n\n    return (\n        <div>\n            {/* Dialog Windows */}\n            <CurrencyDialog open={dialog1Open} onClose={onToken1Selected} coins={COINS.ALL_WITHOUT_AUTONITY} signer={signer}/>\n            <CurrencyDialog open={dialog2Open} onClose={onToken2Selected} coins={COINS.ALL_WITHOUT_AUTONITY} signer={signer}/>\n\n            {/* Currency Swapper */}\n            <Container maxWidth=\"xs\">\n                <Paper className={classes.paperContainer}>\n                    <Typography variant=\"h5\" className={classes.title}>Deploy Liquidity</Typography>\n\n                    <Grid container direction=\"column\" alignItems=\"center\" spacing={2}>\n                        <Grid item xs={12} className={classes.fullWidth}>\n                            <CurrencyField\n                                activeField={true}\n                                value={field1Value}\n                                onClick={() => setDialog1Open(true)}\n                                onChange={handleChange.field1}\n                                symbol={currency1.symbol !== undefined ? currency1.symbol : \"Select\"}\n                            />\n                        </Grid>\n\n                        <Grid item xs={12} className={classes.fullWidth}>\n                            <CurrencyField\n                                activeField={true}\n                                value={field2Value}\n                                onClick={() => setDialog2Open(true)}\n                                onChange={handleChange.field2}\n                                symbol={currency2.symbol !== undefined ? currency2.symbol : \"Select\"}\n                            />\n                        </Grid>\n\n                        <hr className={classes.hr}/>\n\n                        {/* Balance Display */}\n                        <Typography variant=\"h6\">Your Balances</Typography>\n                        <Grid container direction=\"row\" justifyContent=\"space-between\">\n                            <Grid item xs={6}>\n                                <Typography variant=\"body1\" className={classes.balance}>\n                                    {formatBalance(currency1.balance, currency1.symbol)}\n                                </Typography>\n                            </Grid>\n                            <Grid item xs={6}>\n                                <Typography variant=\"body1\" className={classes.balance}>\n                                    {formatBalance(currency2.balance, currency2.symbol)}\n                                </Typography>\n                            </Grid>\n                        </Grid>\n\n                        <hr className={classes.hr}/>\n\n                        {/* Reserves Display */}\n                        <Typography variant=\"h6\">Reserves</Typography>\n                        <Grid container direction=\"row\" justifyContent=\"space-between\">\n                            <Grid item xs={6}>\n                                <Typography variant=\"body1\" className={classes.balance}>\n                                    {formatReserve(reserves[0], currency1.symbol)}\n                                </Typography>\n                            </Grid>\n                            <Grid item xs={6}>\n                                <Typography variant=\"body1\" className={classes.balance}>\n                                    {formatReserve(reserves[1], currency2.symbol)}\n                                </Typography>\n                            </Grid>\n                        </Grid>\n\n                        <hr className={classes.hr}/>\n\n                        <LoadingButton\n                            loading={loading}\n                            valid={isButtonEnabled()}\n                            success={false}\n                            fail={false}\n                            onClick={deploy}\n                        >\n                            <AccountBalanceIcon className={classes.buttonIcon}/>\n                            Deploy\n                        </LoadingButton>\n                    </Grid>\n                </Paper>\n            </Container>\n        </div>\n    )\n}\n\nexport default LiquidityDeployer;","import React from \"react\";\nimport \"./App.css\";\nimport { ethers } from \"ethers\";\nimport _App from \"./ethereum\";\nimport Swap from \"./Swap\";\nimport Liquidity from \"./Liquidity\";\nimport NarBar from \"./NavBar/NavBar\";\nimport CurrencySwapper from \"./CurrencySwapper/CurrencySwapper\"\nimport { Route, Link } from \"react-router-dom\";\nimport {SnackbarProvider} from \"notistack\";\nimport LiquidityDeployer from \"./LiquidityDeployer/LiquidityDeployer\";\n\nfunction App() {\n    return (\n        <div className=\"App\">\n            <SnackbarProvider maxSnack={3}>\n                <NarBar />\n                {/* <Route exact path=\"/uniswap-react/\" component={Swap} /> */}\n                <Route exact path=\"/uniswap-react/\" component={CurrencySwapper} />\n                <Route exact path=\"/uniswap-react/liquidity-beta\" component={LiquidityDeployer} />\n                {/* <Route exact path=\"/uniswap-react/liquidity\" component={Liquidity} /> */}\n            </SnackbarProvider>\n        </div>\n    );\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport \"bootstrap/dist/css/bootstrap.css\";\nimport \"./index.css\";\nimport App from \"./App\";\nimport reportWebVitals from \"./reportWebVitals\";\nimport { BrowserRouter } from \"react-router-dom\";\n\nReactDOM.render(\n  <BrowserRouter>\n    <React.StrictMode>\n      <App />\n    </React.StrictMode>\n  </BrowserRouter>,\n\n  document.getElementById(\"root\")\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}