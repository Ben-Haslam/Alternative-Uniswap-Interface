{"version":3,"sources":["NavBar/MenuItems.js","assets/img/logo.svg","NavBar/NavBar.js","constants/coins.js","ethereumFunctions.js","CurrencySwapper/CurrencyField.js","CurrencySwapper/CurrencyButton.js","CurrencySwapper/CurrencyDialog.js","Components/LoadingButton.js","CurrencySwapper/CurrencySwapper.js","LiquidityDeployer/liquidityFunctions.js","LiquidityDeployer/LiquidityDeployer.js","LiquidityDeployer/RemoveLiquidity.js","LiquidityDeployer/Liquidity.js","Components/connectWalletPage.js","App.js","reportWebVitals.js","index.js"],"names":["MenuItems","title","url","cName","NavBar","state","clicked","className","src","logo","map","item","index","to","Component","AUTONITY","name","abbr","address","TOKEN_A","TOKEN_B","TOKEN_C","TOKEN_D","ALL","ROUTER","require","ERC20","FACTORY","PAIR","getProvider","ethers","providers","Web3Provider","window","ethereum","getSigner","provider","getRouter","signer","Contract","abi","getWeth","getFactory","getAccount","a","request","method","accounts","router","token1_address","token2_address","getAmountsOut","utils","parseEther","amount_out","rate","formatEther","Number","getBalanceAndSymbol","accountAddress","COINS","getBalance","balanceRaw","balance","symbol","token","balanceOf","address1","address2","amount","routerContract","currencies","time","Math","floor","Date","now","deadline","BigNumber","from","amountIn","toString","callStatic","amountOut","currency1","approve","swapExactETHForTokens","value","swapExactTokensForETH","swapExactTokensForTokens","fetchReserves","pair","getReserves","reservesRaw","results","token0","token1","console","log","factory","getPair","pairAddress","liquidityTokens_BN","LiquidityTokens","toFixed","useStyles","makeStyles","theme","container","padding","spacing","minHeight","backgroundColor","COLORS","borderRadius","borderColor","borderWidth","borderStyle","container_input","marginLeft","textAlign","container_blank","grid","height","fab","zIndex","input","typography","h5","width","inputBase","RemoveLiquidityField1","props","classes","onClick","onChange","activeField","Grid","direction","justifyContent","alignItems","xs","Fab","size","variant","InputBase","placeholder","disabled","root","RemoveLiquidityField2","CurrencyField","button","paddingTop","paddingBottom","coinName","opacity","CurrencyButton","coinAbbr","ButtonBase","focusRipple","Typography","styles","dialogContainer","titleSection","titleText","alignSelf","hr","margin","paddingLeft","paddingRight","currencyList","overflowY","currencyContainer","marginTop","overflow","DialogTitle","withStyles","children","onClose","other","disableTypography","alignContent","IconButton","aria-label","DialogActions","MuiDialogActions","CurrencyDialog","open","coins","React","useState","setAddress","error","setError","exit","Dialog","undefined","fullWidth","maxWidth","paper","TextField","e","target","helperText","coin","Button","autoFocus","err","doesTokenExist","color","wrapper","position","success","green","fail","red","progress","top","left","LoadingButton","loading","valid","type","CircularProgress","paperContainer","switchButton","marginBottom","footer","CurrencySwapper","enqueueSnackbar","useSnackbar","dialog1Open","setDialog1Open","dialog2Open","setDialog2Open","setCurrency1","currency2","setCurrency2","conversionRate","setConversionRate","reserves","setReserves","field1Value","setField1Value","field2Value","setField2Value","account","setAccount","setLoading","switchFields","reverse","handleChange","field1","formatBalance","parseFloat","toPrecision","formatReserve","reserve","useEffect","getConversionRate","then","data","isNaN","currencyTimeout","setTimeout","clearTimeout","Container","Paper","fontSize","validFloat","RegExp","test","isButtonEnabled","swapCurrency","catch","message","autoHideDuration","href","amount1","amount2","amount1min","amount2min","amountIn1","amountIn2","amount1Min","amount2Min","token2","addLiquidityETH","addLiquidity","liquidity_tokens","liquidity","removeLiquidityETH","removeLiquidity","quote","amountA","reserveA","reserveB","amountADesired","amountBDesired","amountBOptimal","amountAOptimal","feeTo","feeOn","kLast","_kLast","totalSupply","_totalSupply","feeLiquidity","sqrt","Aout","Bout","background","values","buttonIcon","marginRight","LiquidityDeployer","setLiquidity_tokens","liquidity_out","setLiquidity_out","oldField1Value","oldField2Value","field2","quoteAddLiquidity","LiquidityRemover","tokensOut","setTokensOut","quoteRemoveLiquidity","Liquidity","deploy","setDeploy","changeStyles","K","document","getElementById","style","ButtonGroup","id","text","deploy_or_remove","ConnectWalletPage","createTheme","palette","primary","main","contrastText","secondary","App","maxSnack","ThemeProvider","exact","path","component","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode"],"mappings":"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","file":"static/js/main.66be1c1c.chunk.js","sourcesContent":["export const MenuItems = [\n  {\n    title: \"Swap\",\n    url: \"/uniswap-react/\",\n    cName: \"nav-links\",\n  },\n  {\n    title: \"Liquidity\",\n    url: \"/uniswap-react/liquidity\",\n    cName: \"nav-links\",\n  },\n];\n","export default __webpack_public_path__ + \"static/media/logo.28418735.svg\";","import React, { Component } from \"react\";\nimport { Link } from \"react-router-dom\";\nimport { MenuItems } from \"./MenuItems\";\nimport logo from \"../assets/img/logo.svg\";\nimport \"./NavBar.css\";\n\nclass NavBar extends Component {\n  state = { clicked: false };\n\n  render() {\n    return (\n      <nav>\n        <div className=\"Title\">\n          <h1 className=\"navbar-logo\">\n            <img src={logo} className=\"logo\"></img> Autonity Uniswap\n          </h1>\n        </div>\n\n        <div className=\"NavbarItems\">\n          <ul className={`nav-menu`}>\n            {MenuItems.map((item, index) => {\n              return (\n                <li key={index}>\n                  <Link className={\"nav-links\"} to={item.url}>\n                    {item.title}\n                  </Link>\n                </li>\n              );\n            })}\n          </ul>\n        </div>\n      </nav>\n    );\n  }\n}\n\nexport default NavBar;\n","export const AUTONITY = {\n  name: \"Auton\",\n  abbr: \"AUT\",\n  address: \"0x3f0D1FAA13cbE43D662a37690f0e8027f9D89eBF\", // Weth address\n};\n\nexport const TOKEN_A = {\n  name: \"Token A\",\n  abbr: \"TA\",\n  address: \"0x1d29BD2ACedBff15A59e946a4DE26d5257447727\",\n};\n\nexport const TOKEN_B = {\n  name: \"Token B\",\n  abbr: \"TB\",\n  address: \"0xc108a13D00371520EbBeCc7DF5C8610C71F4FfbA\",\n};\n\nexport const TOKEN_C = {\n  name: \"Token C\",\n  abbr: \"TC\",\n  address: \"0xC8E25055A4666F39179abE06d466F5A98423863F\",\n};\n\nexport const TOKEN_D = {\n  name: \"Token D\",\n  abbr: \"TD\",\n  address: \"0x23238098F2B4dd9Ba3bb8bc78b639dD113da697e\",\n};\n\nexport const ALL = [AUTONITY, TOKEN_A, TOKEN_B, TOKEN_C, TOKEN_D];\nexport const ALL_WITHOUT_AUTONITY = [TOKEN_A, TOKEN_B, TOKEN_C, TOKEN_D];\n","import { Contract, ethers } from \"ethers\";\nimport * as COINS from \"./constants/coins\";\n\nconst ROUTER = require(\"./build/UniswapV2Router02.json\");\nconst ERC20 = require(\"./build/ERC20.json\");\nconst FACTORY = require(\"./build/IUniswapV2Factory.json\");\nconst PAIR = require(\"./build/IUniswapV2Pair.json\");\n\nexport function getProvider() {\n  return new ethers.providers.Web3Provider(window.ethereum);\n}\n\nexport function getSigner(provider) {\n  return provider.getSigner();\n}\n\nexport function getRouter(address, signer) {\n  return new Contract(address, ROUTER.abi, signer);\n}\n\nexport function getWeth(address, signer) {\n  return new Contract(address, ERC20.abi, signer);\n}\n\nexport function getFactory(address, signer) {\n  return new Contract(address, FACTORY.abi, signer);\n}\n\nexport async function getAccount() {\n  const accounts = await window.ethereum.request({\n    method: \"eth_requestAccounts\",\n  });\n\n  return accounts[0];\n}\n\nexport async function getConversionRate(\n  router,\n  token1_address,\n  token2_address\n) {\n  try {\n    const amount_out = await router.getAmountsOut(\n      ethers.utils.parseEther(\"1\"),\n      [token1_address, token2_address]\n    );\n    const rate = ethers.utils.formatEther(amount_out[1]);\n    return Number(rate);\n  } catch {\n    return false;\n  }\n}\n\n// This function returns an object with 2 fields: `balance` which container's the account's balance in the particular currency,\n// and `symbol` which is the abbreviation of the token name. To work correctly it must be provided with 4 arguments:\n//    `accountAddress` - An Ethereum address of the current user's account\n//    `address` - An Ethereum address of the currency to check for (either a token or AUT)\n//    `provider` - The current provider\n//    `signer` - The current signer\nexport async function getBalanceAndSymbol(\n  accountAddress,\n  address,\n  provider,\n  signer\n) {\n  try {\n    if (address === COINS.AUTONITY.address) {\n      const balanceRaw = await provider.getBalance(accountAddress);\n\n      return {\n        balance: ethers.utils.formatEther(balanceRaw),\n        symbol: COINS.AUTONITY.abbr,\n      };\n    } else {\n      const token = new Contract(address, ERC20.abi, signer);\n      const balanceRaw = await token.balanceOf(accountAddress);\n      const symbol = await token.symbol();\n\n      return {\n        balance: ethers.utils.formatEther(balanceRaw),\n        symbol: symbol,\n      };\n    }\n  } catch (err) {\n    return false;\n  }\n}\n\nexport function doesTokenExist(address, signer) {\n  try {\n    return new Contract(address, ERC20.abi, signer);\n  } catch (err) {\n    return false;\n  }\n}\n\n// This function swaps two particular currencies, it can handle switching from Eth to Token, Token to Eth, and Token to Token.\n// No error handling is done, so any issues can be caught with the use of .catch()\n// To work correctly, there needs to be 7 arguments:\n//    `address1` - An Ethereum address of the currency to trade from (either a token or AUT)\n//    `address2` - An Ethereum address of the currency to trade to (either a token or AUT)\n//    `amount` - A float or similar number representing the value of address1's currency to trade\n//    `routerContract` - The router contract to carry out this trade\n//    `accountAddress` - An Ethereum address of the current user's account\n//    `provider` - The current provider\n//    `signer` - The current signer\nexport async function swapCurrency(\n  address1,\n  address2,\n  amount,\n  routerContract,\n  accountAddress,\n  provider,\n  signer\n) {\n  const currencies = [address1, address2];\n  const time = Math.floor(Date.now() / 1000) + 200000;\n  const deadline = ethers.BigNumber.from(time);\n\n  const amountIn = ethers.utils.parseEther(amount.toString());\n  const amountOut = await routerContract.callStatic.getAmountsOut(\n    amountIn,\n    currencies\n  );\n\n  const currency1 = new Contract(address1, ERC20.abi, signer);\n  await currency1.approve(routerContract.address, amountIn);\n\n  if (address1 === COINS.AUTONITY.address) {\n    // Eth -> Token\n    await routerContract.swapExactETHForTokens(\n      amountOut[1],\n      currencies,\n      accountAddress,\n      deadline,\n      { value: amountIn }\n    );\n  } else if (address2 === COINS.AUTONITY.address) {\n    // Token -> Eth\n    await routerContract.swapExactTokensForETH(\n      amountIn,\n      amountOut[1],\n      currencies,\n      accountAddress,\n      deadline\n    );\n  } else {\n    await routerContract.swapExactTokensForTokens(\n      amountIn,\n      amountOut[1],\n      currencies,\n      accountAddress,\n      deadline\n    );\n  }\n}\n\nexport async function fetchReserves(address1, address2, pair) {\n  try {\n    const reservesRaw = await pair.getReserves();\n    let results = [\n      Number(ethers.utils.formatEther(reservesRaw[0])),\n      Number(ethers.utils.formatEther(reservesRaw[1])),\n    ];\n\n    return [\n      (await pair.token0()) === address1 ? results[0] : results[1],\n      (await pair.token1()) === address2 ? results[1] : results[0],\n    ];\n  } catch (err) {\n    console.log(\"no reserves yet\");\n    return [0, 0];\n  }\n}\n\n// This function returns the reserves stored in a the liquidity pool between the currency of address1 and the currency\n// of address2. Some extra logic was needed to make sure that the results were returned in the correct order, as\n// `pair.getReserves()` would always return the reserves in the same order regardless of which order the addresses were.\n//    `address1` - An Ethereum address of the currency to trade from (either a token or AUT)\n//    `address2` - An Ethereum address of the currency to trade to (either a token or AUT)\n//    `factory` - The current factory\n//    `signer` - The current signer\nexport async function getReserves(\n  address1,\n  address2,\n  factory,\n  signer,\n  accountAddress\n) {\n  const pairAddress = await factory.getPair(address1, address2);\n  const pair = new Contract(pairAddress, PAIR.abi, signer);\n\n  const reservesRaw = await fetchReserves(address1, address2, pair);\n  const liquidityTokens_BN = await pair.balanceOf(accountAddress);\n  const LiquidityTokens = Number(\n    ethers.utils.formatEther(liquidityTokens_BN)\n  ).toFixed(2);\n\n  return [\n    reservesRaw[0].toFixed(2),\n    reservesRaw[1].toFixed(2),\n    LiquidityTokens,\n  ];\n}\n","import React from \"react\";\nimport { Fab, Grid, InputBase, makeStyles } from \"@material-ui/core\";\nimport ExpandMoreIcon from \"@material-ui/icons/ExpandMore\";\nimport PropTypes from \"prop-types\";\nimport * as COLORS from \"@material-ui/core/colors\";\n\nconst useStyles = makeStyles((theme) => ({\n  container: {\n    padding: theme.spacing(1),\n    minHeight: \"80px\",\n    backgroundColor: COLORS.grey[50],\n    borderRadius: theme.spacing(2),\n    borderColor: COLORS.grey[300],\n    borderWidth: \"1px\",\n    borderStyle: \"solid\",\n  },\n  container_input: {\n    padding: theme.spacing(1),\n    minHeight: \"68px\",\n    backgroundColor: COLORS.grey[50],\n    borderRadius: theme.spacing(2),\n    borderColor: COLORS.grey[300],\n    borderWidth: \"1px\",\n    borderStyle: \"solid\",\n    marginLeft: \"50%\",\n    textAlign: \"right\",\n  },\n  container_blank: {\n    padding: theme.spacing(1),\n    minHeight: \"80px\",\n    borderRadius: theme.spacing(2),\n  },\n  grid: {\n    height: \"60px\",\n  },\n  fab: {\n    zIndex: \"0\",\n  },\n  input: {\n    ...theme.typography.h5,\n    width: \"100%\",\n  },\n  inputBase: {\n    textAlign: \"right\",\n  },\n}));\n\nCurrencyField.propTypes = {\n  onClick: PropTypes.func.isRequired,\n  symbol: PropTypes.string.isRequired,\n  value: PropTypes.string.isRequired,\n  onChange: PropTypes.func,\n  activeField: PropTypes.bool.isRequired,\n};\n\nexport function RemoveLiquidityField1(props) {\n  // This component is used to selecting a currency and entering a value, the props are explained below:\n  //      onClick - (string) => void - Called when the button is clicked\n  //      symbol - string - The text displayed on the button\n  //      value - string - The value of the text field\n  //      onChange - (e) => void - Called when the text field changes\n  //      activeField - boolean - Whether text can be entered into this field or not\n\n  const classes = useStyles();\n  const { onClick, symbol, value, onChange, activeField } = props;\n  return (\n    <div className={classes.container_blank}>\n      <Grid\n        container\n        direction=\"row\"\n        justifyContent=\"space-between\"\n        alignItems=\"center\"\n        className={classes.grid}\n      >\n        {/* Button */}\n        <Grid item xs={3}>\n          <Fab\n            size=\"small\"\n            variant=\"extended\"\n            onClick={onClick}\n            className={classes.fab}\n          >\n            {symbol}\n            <ExpandMoreIcon />\n          </Fab>\n        </Grid>\n        {/* Text Field */}\n        <Grid item xs={9}>\n          <InputBase\n            value={value}\n            onChange={onChange}\n            placeholder=\"0.0\"\n            disabled={!activeField}\n            classes={{\n              root: classes.container_input,\n              input: classes.inputBase,\n            }}\n          />\n        </Grid>\n        {/* </div> */}\n      </Grid>\n    </div>\n  );\n}\n\nexport function RemoveLiquidityField2(props) {\n  // This component is used to selecting a currency and entering a value, the props are explained below:\n  //      onClick - (string) => void - Called when the button is clicked\n  //      symbol - string - The text displayed on the button\n  //      value - string - The value of the text field\n  //      onChange - (e) => void - Called when the text field changes\n  //      activeField - boolean - Whether text can be entered into this field or not\n\n  const classes = useStyles();\n  const { onClick, symbol } = props;\n\n  return (\n    <div className={classes.container_blank}>\n      <Grid\n        container\n        direction=\"row\"\n        justifyContent=\"space-between\"\n        alignItems=\"center\"\n        className={classes.grid}\n      >\n        {/* Button */}\n        <Grid item xs={3}>\n          <Fab\n            size=\"small\"\n            variant=\"extended\"\n            onClick={onClick}\n            className={classes.fab}\n          >\n            {symbol}\n            <ExpandMoreIcon />\n          </Fab>\n        </Grid>\n      </Grid>\n    </div>\n  );\n}\n\nexport default function CurrencyField(props) {\n  // This component is used to selecting a currency and entering a value, the props are explained below:\n  //      onClick - (string) => void - Called when the button is clicked\n  //      symbol - string - The text displayed on the button\n  //      value - string - The value of the text field\n  //      onChange - (e) => void - Called when the text field changes\n  //      activeField - boolean - Whether text can be entered into this field or not\n\n  const classes = useStyles();\n  const { onClick, symbol, value, onChange, activeField } = props;\n\n  return (\n    <div className={classes.container}>\n      <Grid\n        container\n        direction=\"row\"\n        justifyContent=\"space-between\"\n        alignItems=\"center\"\n        className={classes.grid}\n      >\n        {/* Button */}\n        <Grid item xs={3}>\n          <Fab\n            size=\"small\"\n            variant=\"extended\"\n            onClick={onClick}\n            className={classes.fab}\n          >\n            {symbol}\n            <ExpandMoreIcon />\n          </Fab>\n        </Grid>\n\n        {/* Text Field */}\n        <Grid item xs={9}>\n          <InputBase\n            value={value}\n            onChange={onChange}\n            placeholder=\"0.0\"\n            disabled={!activeField}\n            classes={{ root: classes.input, input: classes.inputBase }}\n          />\n        </Grid>\n      </Grid>\n    </div>\n  );\n}\n","import React from \"react\";\nimport {ButtonBase, Grid, makeStyles, Typography} from \"@material-ui/core\";\nimport PropTypes from \"prop-types\";\nimport * as COLORS from \"@material-ui/core/colors\";\n\nconst useStyles = makeStyles((theme) => ({\n    button: {\n        width: \"100%\",\n        paddingTop: theme.spacing(0.5),\n        paddingBottom: theme.spacing(0.5),\n        '&:hover, &$focusVisible': {\n            backgroundColor: COLORS.grey[200]\n        },\n    },\n    coinName: {\n        opacity: 0.6\n    },\n}));\n\nCurrencyButton.propTypes = {\n    coinName: PropTypes.string.isRequired,\n    coinAbbr: PropTypes.string.isRequired,\n    onClick: PropTypes.func.isRequired\n}\n\nexport default function CurrencyButton(props) {\n    const {coinName, coinAbbr, onClick, ...other} = props;\n    const classes = useStyles();\n\n    return (\n        <ButtonBase\n            focusRipple\n            className={classes.button}\n            onClick={onClick}\n        >\n            <Grid container direction=\"column\">\n                <Typography variant=\"h6\">{coinAbbr}</Typography>\n                <Typography variant=\"body2\" className={classes.coinName}>{coinName}</Typography>\n            </Grid>\n        </ButtonBase>\n    )\n}","import React from \"react\";\nimport {\n  Button,\n  Dialog,\n  Grid,\n  IconButton,\n  makeStyles,\n  TextField,\n  Typography,\n  withStyles,\n} from \"@material-ui/core\";\nimport MuiDialogTitle from \"@material-ui/core/DialogTitle\";\nimport MuiDialogActions from \"@material-ui/core/DialogActions\";\nimport CloseIcon from \"@material-ui/icons/Close\";\nimport CurrencyButton from \"./CurrencyButton\";\nimport { doesTokenExist } from \"../ethereumFunctions\";\nimport PropTypes from \"prop-types\";\nimport * as COLORS from \"@material-ui/core/colors\";\n\nconst styles = (theme) => ({\n  dialogContainer: {\n    borderRadius: theme.spacing(2),\n  },\n  titleSection: {\n    padding: theme.spacing(2),\n  },\n  titleText: {\n    alignSelf: \"center\",\n  },\n  hr: {\n    margin: 0,\n  },\n  address: {\n    paddingLeft: theme.spacing(2.5),\n    paddingRight: theme.spacing(2.5),\n    paddingBottom: theme.spacing(2),\n  },\n  currencyList: {\n    height: \"300px\",\n    overflowY: \"scroll\",\n  },\n  currencyContainer: {\n    paddingLeft: theme.spacing(0.5),\n    paddingRight: theme.spacing(0.5),\n    paddingTop: theme.spacing(2),\n    marginTop: theme.spacing(2),\n    overflow: \"hidden\",\n  },\n});\n\nconst useStyles = makeStyles(styles);\n\n// This is a modified version of MaterialUI's DialogTitle component, I've added a close button in the top right corner\nconst DialogTitle = withStyles(styles)((props) => {\n  const { children, classes, onClose, ...other } = props;\n  return (\n    <MuiDialogTitle\n      disableTypography\n      className={classes.titleSection}\n      {...other}\n    >\n      <Grid\n        container\n        direction=\"row\"\n        justifyContent=\"space-between\"\n        alignContent=\"center\"\n      >\n        <Typography variant=\"h6\" className={classes.titleText}>\n          {children}\n        </Typography>\n        {onClose ? (\n          <IconButton aria-label=\"close\" onClick={onClose}>\n            <CloseIcon />\n          </IconButton>\n        ) : null}\n      </Grid>\n    </MuiDialogTitle>\n  );\n});\n\n// This is a modified version of MaterialUI's DialogActions component, the color has been changed by modifying the CSS\nconst DialogActions = withStyles((theme) => ({\n  root: {\n    margin: 0,\n    padding: theme.spacing(1),\n    backgroundColor: COLORS.grey[100],\n  },\n}))(MuiDialogActions);\n\nCurrencyDialog.propTypes = {\n  onClose: PropTypes.func.isRequired,\n  open: PropTypes.bool.isRequired,\n  coins: PropTypes.array.isRequired,\n};\n\nexport default function CurrencyDialog(props) {\n  // The CurrencyDialog component will display a dialog window on top of the page, allowing a user to select a currency\n  // from a list (list can be found in 'src/constants/coins.js') or enter an address into a search field. Any entered\n  // addresses will first be validated to make sure they exist.\n  // When the dialog closes, it will call the `onClose` prop with 1 argument which will either be undefined (if the\n  // user closes the dialog without selecting anything), or will be a string containing the address of a currency.\n\n  const classes = useStyles();\n  const { onClose, open, coins, signer, ...others } = props;\n\n  const [address, setAddress] = React.useState(\"\");\n  const [error, setError] = React.useState(\"\");\n\n  // Called when the user tries to input a custom address, this function will validate the address and will either\n  // then close the dialog and return the validated address, or will display an error.\n  const submit = () => {\n    if (doesTokenExist(address, signer)) {\n      exit(address);\n    } else {\n      setError(\"This address is not valid\");\n    }\n  };\n\n  // Resets any fields in the dialog (in case it's opened in the future) and calls the `onClose` prop\n  const exit = (value) => {\n    setError(\"\");\n    setAddress(\"\");\n    onClose(value);\n  };\n\n  return (\n    <Dialog\n      open={open}\n      onClose={() => exit(undefined)}\n      fullWidth\n      maxWidth=\"sm\"\n      classes={{ paper: classes.dialogContainer }}\n    >\n      <DialogTitle onClose={() => exit(undefined)}>Select Coin</DialogTitle>\n\n      <hr className={classes.hr} />\n\n      <div className={classes.currencyContainer}>\n        <Grid container direction=\"column\" spacing={1} alignContent=\"center\">\n          <TextField\n            value={address}\n            onChange={(e) => setAddress(e.target.value)}\n            variant=\"outlined\"\n            placeholder=\"Paste Address\"\n            error={error !== \"\"}\n            helperText={error}\n            fullWidth\n            className={classes.address}\n          />\n\n          <hr className={classes.hr} />\n\n          <Grid item className={classes.currencyList}>\n            <Grid container direction=\"column\">\n              {/* Maps all of the currencies in the constants file to buttons */}\n              {coins.map((coin, index) => (\n                <Grid item key={index} xs={12}>\n                  <CurrencyButton\n                    coinName={coin.name}\n                    coinAbbr={coin.abbr}\n                    onClick={() => exit(coin.address)}\n                  />\n                </Grid>\n              ))}\n            </Grid>\n          </Grid>\n        </Grid>\n      </div>\n\n      <hr className={classes.hr} />\n\n      <DialogActions>\n        <Button autoFocus onClick={submit} color=\"primary\">\n          Enter\n        </Button>\n      </DialogActions>\n    </Dialog>\n  );\n}\n","import React from \"react\";\nimport {Button, CircularProgress, makeStyles} from \"@material-ui/core\";\nimport green from \"@material-ui/core/colors/green\";\nimport red from \"@material-ui/core/colors/red\";\n\n\nconst useStyles = makeStyles((theme) => ({\n    wrapper: {\n        margin: 0,\n        position: 'relative',\n    },\n    success: {\n        backgroundColor: green[500],\n        '&:hover': {\n            backgroundColor: green[700],\n        },\n    },\n    fail: {\n        backgroundColor: red[500],\n        '&:hover': {\n            backgroundColor: red[700],\n        },\n    },\n    progress: {\n        color: green[500],\n        position: 'absolute',\n        top: '50%',\n        left: '50%',\n        marginTop: -12,\n        marginLeft: -12,\n    },\n}));\n\nexport default function LoadingButton(props) {\n    const classes = useStyles();\n\n    const { children, loading, valid, success, fail, onClick, ...other} = props;\n\n    const calculateClass = () => {\n        if (fail) { return classes.fail}\n        if (!loading && success) { return classes.success }\n    }\n\n    return (\n        <div className={classes.wrapper}>\n            <Button variant=\"contained\" color=\"primary\" fullWidth disabled={loading || !valid} type=\"submit\" onClick={onClick} className={calculateClass()} {...other}>\n                {children}\n            </Button>\n            {loading && <CircularProgress size={24} className={classes.progress} />}\n        </div>\n    )\n}\n","import React, { useEffect } from \"react\";\nimport {\n  Container,\n  Grid,\n  IconButton,\n  makeStyles,\n  Paper,\n  Typography,\n} from \"@material-ui/core\";\nimport SwapVerticalCircleIcon from \"@material-ui/icons/SwapVerticalCircle\";\nimport { useSnackbar } from \"notistack\";\nimport LoopIcon from \"@material-ui/icons/Loop\";\nimport {\n  getAccount,\n  getConversionRate,\n  getFactory,\n  getProvider,\n  getRouter,\n  getSigner,\n  getBalanceAndSymbol,\n  getWeth,\n  swapCurrency,\n  getReserves,\n} from \"../ethereumFunctions\";\nimport CurrencyField from \"./CurrencyField\";\nimport CurrencyDialog from \"./CurrencyDialog\";\nimport LoadingButton from \"../Components/LoadingButton\";\nimport * as COINS from \"../constants/coins\";\n\nconst styles = (theme) => ({\n  paperContainer: {\n    borderRadius: theme.spacing(2),\n    padding: theme.spacing(1),\n    paddingBottom: theme.spacing(3),\n  },\n  switchButton: {\n    zIndex: 1,\n    margin: \"-16px\",\n    padding: theme.spacing(0.5),\n  },\n  fullWidth: {\n    width: \"100%\",\n  },\n  title: {\n    textAlign: \"center\",\n    padding: theme.spacing(0.5),\n    marginBottom: theme.spacing(1),\n  },\n  hr: {\n    width: \"100%\",\n  },\n  balance: {\n    padding: theme.spacing(1),\n    overflow: \"wrap\",\n    textAlign: \"center\",\n  },\n  footer: {\n    marginTop: \"285px\",\n  },\n});\n\nconst useStyles = makeStyles(styles);\n\nfunction CurrencySwapper(props) {\n  const classes = useStyles();\n  const { enqueueSnackbar } = useSnackbar();\n\n  // Stores a record of whether their respective dialog window is open\n  const [dialog1Open, setDialog1Open] = React.useState(false);\n  const [dialog2Open, setDialog2Open] = React.useState(false);\n\n  // Stores data about their respective currency\n  const [currency1, setCurrency1] = React.useState({\n    address: undefined,\n    symbol: undefined,\n    balance: undefined,\n  });\n  const [currency2, setCurrency2] = React.useState({\n    address: undefined,\n    symbol: undefined,\n    balance: undefined,\n  });\n\n  // Stores the current conversion rate between currency1 and currency2\n  const [conversionRate, setConversionRate] = React.useState(undefined);\n\n  // Stores the current reserves in the liquidity pool between currency1 and currency2\n  const [reserves, setReserves] = React.useState([\"0.0\", \"0.0\"]);\n\n  // Stores the current value of their respective text box\n  const [field1Value, setField1Value] = React.useState(\"\");\n  const [field2Value, setField2Value] = React.useState(\"\");\n\n  // Stores information for the Autonity Network\n\n  const [provider, setProvider] = React.useState(getProvider());\n  const [signer, setSigner] = React.useState(getSigner(provider));\n  const [account, setAccount] = React.useState(undefined); // This is populated in a react hook\n  const [router, setRouter] = React.useState(\n    getRouter(\"0x4489D87C8440B19f11d63FA2246f943F492F3F5F\", signer)\n  );\n  const [weth, setWeth] = React.useState(\n    getWeth(\"0x3f0D1FAA13cbE43D662a37690f0e8027f9D89eBF\", signer)\n  );\n  const [factory, setFactory] = React.useState(\n    getFactory(\"0x4EDFE8706Cefab9DCd52630adFFd00E9b93FF116\", signer)\n  );\n\n  // Controls the loading button\n  const [loading, setLoading] = React.useState(false);\n\n  // Switches the top and bottom currencies, this is called when users hit the swap button or select the opposite\n  // token in the dialog (e.g. if currency1 is TokenA and the user selects TokenB when choosing currency2)\n  const switchFields = () => {\n    setCurrency1(currency2);\n    setCurrency2(currency1);\n    setField1Value(field2Value);\n    setReserves(reserves.reverse());\n  };\n\n  // These functions take an HTML event, pull the data out and puts it into a state variable.\n  const handleChange = {\n    field1: (e) => {\n      setField1Value(e.target.value);\n    },\n  };\n\n  // Turns the account's balance into something nice and readable\n  const formatBalance = (balance, symbol) => {\n    if (balance && symbol)\n      return parseFloat(balance).toPrecision(8) + \" \" + symbol;\n    else return \"0.0\";\n  };\n\n  // Turns the currency's reserves into something nice and readable\n  const formatReserve = (reserve, symbol) => {\n    if (reserve && symbol) return reserve + \" \" + symbol;\n    else return \"0.0\";\n  };\n\n  // Determines whether the button should be enabled or not\n  const isButtonEnabled = () => {\n    let validFloat = new RegExp(\"^[0-9]*[.,]?[0-9]*$\");\n\n    // If both currencies have been selected, and a valid float has been entered which is less than the user's balance, then return true\n    return (\n      currency1.address &&\n      currency2.address &&\n      validFloat.test(field1Value) &&\n      parseFloat(field1Value) <= currency1.balance\n    );\n  };\n\n  const swap = () => {\n    console.log(\"Attempting to swap tokens...\");\n    setLoading(true);\n\n    swapCurrency(\n      currency1.address,\n      currency2.address,\n      parseFloat(field1Value),\n      router,\n      account,\n      provider,\n      signer\n    )\n      .then(() => {\n        setLoading(false);\n\n        // If the transaction was successful, we clear to input to make sure the user doesn't accidental redo the transfer\n        setField1Value(\"\");\n        enqueueSnackbar(\"Transaction Successful\", { variant: \"success\" });\n      })\n      .catch((e) => {\n        setLoading(false);\n        enqueueSnackbar(\"Transaction Failed (\" + e.message + \")\", {\n          variant: \"error\",\n          autoHideDuration: 10000,\n        });\n      });\n  };\n\n  // Called when the dialog window for currency1 exits\n  const onToken1Selected = (address) => {\n    // Close the dialog window\n    setDialog1Open(false);\n\n    // If the user inputs the same token, we want to switch the data in the fields\n    if (address === currency2.address) {\n      switchFields();\n    }\n    // We only update the values if the user provides a token\n    else if (address) {\n      // Getting some token data is async, so we need to wait for the data to return, hence the promise\n      getBalanceAndSymbol(account, address, provider, signer).then((data) => {\n        setCurrency1({\n          address: address,\n          symbol: data.symbol,\n          balance: data.balance,\n        });\n      });\n    }\n  };\n\n  // Called when the dialog window for currency2 exits\n  const onToken2Selected = (address) => {\n    // Close the dialog window\n    setDialog2Open(false);\n\n    // If the user inputs the same token, we want to switch the data in the fields\n    if (address === currency1.address) {\n      switchFields();\n    }\n    // We only update the values if the user provides a token\n    else if (address) {\n      // Getting some token data is async, so we need to wait for the data to return, hence the promise\n      getBalanceAndSymbol(account, address, provider, signer).then((data) => {\n        setCurrency2({\n          address: address,\n          symbol: data.symbol,\n          balance: data.balance,\n        });\n      });\n    }\n  };\n\n  // The lambdas within these useEffects will be called when a particular dependency is updated. These dependencies\n  // are defined in the array of variables passed to the function after the lambda expression. If there are no dependencies\n  // the lambda will only ever be called when the component mounts. These are very useful for calculating new values\n  // after a particular state change, for example, calculating the new exchange rate whenever the addresses\n  // of the two currencies change.\n  useEffect(() => {\n    // This hook is called when either of the state variables `currency1.address` or `currency2.address` change.\n    // It attempts to calculate and set the state variable `conversionRate`\n    // This means that when the user selects a different currency to convert between, or the currencies are swapped,\n    // the new conversion rate will be calculated.\n\n    console.log(\n      \"Trying to get Conversion Rate between:\\n\" +\n        currency1.address +\n        \"\\n\" +\n        currency2.address\n    );\n\n    if (currency1.address && currency2.address) {\n      getConversionRate(router, currency1.address, currency2.address).then(\n        (rate) => setConversionRate(rate)\n      );\n\n      getReserves(\n        currency1.address,\n        currency2.address,\n        factory,\n        signer,\n        account\n      ).then((data) => setReserves(data));\n    }\n  }, [currency1.address, currency2.address, account, factory, router, signer]);\n\n  useEffect(() => {\n    // This hook is called when either of the state variables `field1Value` or `conversionRate` change.\n    // It attempts to calculate and set the state variable `field2Value`\n    // This means that if the user types a new value into the conversion box or the conversion rate changes,\n    // the value in the output box will change.\n\n    if (isNaN(parseFloat(field1Value))) {\n      setField2Value(\"\");\n    } else if (field1Value && conversionRate) {\n      let amount = parseFloat(field1Value) * conversionRate;\n      setField2Value(amount.toFixed(7));\n    } else {\n      setField2Value(\"\");\n    }\n  }, [field1Value, conversionRate]);\n\n  useEffect(() => {\n    // This hook creates a timeout that will run every ~10 seconds, it's role is to check if the user's balance has\n    // updated has changed. This allows them to see when a transaction completes by looking at the balance output.\n    // It only updates the balance field in the currency state to prevent this hook from triggering the 'conversionRate' hook.\n\n    const currencyTimeout = setTimeout(() => {\n      console.log(\"Checking balances...\");\n\n      if (currency1.address && currency2.address) {\n        getReserves(\n          currency1.address,\n          currency2.address,\n          factory,\n          signer,\n          account\n        ).then((data) => setReserves(data));\n      }\n\n      if (currency1) {\n        getBalanceAndSymbol(account, currency1.address, provider, signer).then(\n          (data) => {\n            setCurrency1({\n              ...currency1,\n              balance: data.balance,\n            });\n          }\n        );\n      }\n      if (currency2) {\n        getBalanceAndSymbol(account, currency2.address, provider, signer).then(\n          (data) => {\n            setCurrency2({\n              ...currency2,\n              balance: data.balance,\n            });\n          }\n        );\n      }\n    }, 10000);\n\n    return () => clearTimeout(currencyTimeout);\n  });\n\n  useEffect(() => {\n    // This hook will run when the component first mounts, it can be useful to put logic to populate variables here\n\n    getAccount().then((account) => {\n      setAccount(account);\n    });\n  });\n\n  return (\n    <div>\n      {/* Dialog Windows */}\n      <CurrencyDialog\n        open={dialog1Open}\n        onClose={onToken1Selected}\n        coins={COINS.ALL}\n        signer={signer}\n      />\n      <CurrencyDialog\n        open={dialog2Open}\n        onClose={onToken2Selected}\n        coins={COINS.ALL}\n        signer={signer}\n      />\n\n      {/* Currency Swapper */}\n      <Container maxWidth=\"xs\">\n        <Paper className={classes.paperContainer}>\n          <Typography variant=\"h5\" className={classes.title}>\n            Swap Coins\n          </Typography>\n\n          <Grid container direction=\"column\" alignItems=\"center\" spacing={2}>\n            <Grid item xs={12} className={classes.fullWidth}>\n              <CurrencyField\n                activeField={true}\n                value={field1Value}\n                onClick={() => setDialog1Open(true)}\n                onChange={handleChange.field1}\n                symbol={\n                  currency1.symbol !== undefined ? currency1.symbol : \"Select\"\n                }\n              />\n            </Grid>\n\n            <IconButton onClick={switchFields} className={classes.switchButton}>\n              <SwapVerticalCircleIcon fontSize=\"medium\" />\n            </IconButton>\n\n            <Grid item xs={12} className={classes.fullWidth}>\n              <CurrencyField\n                activeField={false}\n                value={field2Value}\n                onClick={() => setDialog2Open(true)}\n                symbol={\n                  currency2.symbol !== undefined ? currency2.symbol : \"Select\"\n                }\n              />\n            </Grid>\n\n            <hr className={classes.hr} />\n\n            {/* Balance Display */}\n            <Typography variant=\"h6\">Your Balances</Typography>\n            <Grid container direction=\"row\" justifyContent=\"space-between\">\n              <Grid item xs={6}>\n                <Typography variant=\"body1\" className={classes.balance}>\n                  {formatBalance(currency1.balance, currency1.symbol)}\n                </Typography>\n              </Grid>\n              <Grid item xs={6}>\n                <Typography variant=\"body1\" className={classes.balance}>\n                  {formatBalance(currency2.balance, currency2.symbol)}\n                </Typography>\n              </Grid>\n            </Grid>\n\n            <hr className={classes.hr} />\n\n            {/* Reserves Display */}\n            <Typography variant=\"h6\">Reserves</Typography>\n            <Grid container direction=\"row\" justifyContent=\"space-between\">\n              <Grid item xs={6}>\n                <Typography variant=\"body1\" className={classes.balance}>\n                  {formatReserve(reserves[0], currency1.symbol)}\n                </Typography>\n              </Grid>\n              <Grid item xs={6}>\n                <Typography variant=\"body1\" className={classes.balance}>\n                  {formatReserve(reserves[1], currency2.symbol)}\n                </Typography>\n              </Grid>\n            </Grid>\n\n            <hr className={classes.hr} />\n\n            <LoadingButton\n              loading={loading}\n              valid={isButtonEnabled()}\n              success={false}\n              fail={false}\n              onClick={swap}\n            >\n              <LoopIcon />\n              Swap\n            </LoadingButton>\n          </Grid>\n        </Paper>\n      </Container>\n\n      <Grid\n        container\n        className={classes.footer}\n        direction=\"row\"\n        justifyContent=\"center\"\n        alignItems=\"flex-end\"\n      >\n        <p>\n          Clearmatics Autonity Uniswap | Get AUT for use in the bakerloo testnet{\" \"}\n          <a href=\"https://faucet.bakerloo.autonity.network/\">here</a>\n        </p>\n      </Grid>\n    </div>\n  );\n}\n\nexport default CurrencySwapper;\n","import { Contract, ethers } from \"ethers\";\nimport * as COINS from \"../constants/coins\";\n\nimport { fetchReserves } from \"../ethereumFunctions\";\n\nconst ERC20 = require(\"../build/ERC20.json\");\nconst PAIR = require(\"../build/IUniswapV2Pair.json\");\n\n// Function used to add Liquidity to any pair of tokens or token-AUT\n// To work correctly, there needs to be 9 arguments:\n//    `address1` - An Ethereum address of the currency to add from (either a token or AUT)\n//    `address2` - An Ethereum address of the currency to add to (either a token or AUT)\n//    `amount1` - A float or similar number representing the value of address1's currency to add\n//    `amount2` - A float or similar number representing the value of address2's currency to add\n//    `amount1Min` - A float or similar number representing the minimum of address1's currency to add\n//    `amount2Min` - A float or similar number representing the minimum of address2's currency to add\n//    `routerContract` - The router contract to carry out this trade\n//    `accountAddress` - An Ethereum address of the current user's account\n//    `provider` - The current provider\n//    `signer` - The current signer\nexport async function addLiquidity(\n  address1,\n  address2,\n  amount1,\n  amount2,\n  amount1min,\n  amount2min,\n  routerContract,\n  account,\n  signer\n) {\n  const amountIn1 = ethers.utils.parseEther(amount1.toString());\n  const amountIn2 = ethers.utils.parseEther(amount2.toString());\n\n  const amount1Min = ethers.utils.parseEther(amount1min.toString());\n  const amount2Min = ethers.utils.parseEther(amount2min.toString());\n\n  const time = Math.floor(Date.now() / 1000) + 200000;\n  const deadline = ethers.BigNumber.from(time);\n\n  const token1 = new Contract(address1, ERC20.abi, signer);\n  const token2 = new Contract(address2, ERC20.abi, signer);\n\n  await token1.approve(routerContract.address, amountIn1);\n  await token2.approve(routerContract.address, amountIn2);\n\n  console.log([\n    address1,\n    address2,\n    Number(amountIn1),\n    Number(amountIn2),\n    Number(amount1Min),\n    Number(amount2Min),\n    account,\n    deadline,\n  ]);\n\n  if (address1 === COINS.AUTONITY.address) {\n    // Eth + Token\n    await routerContract.addLiquidityETH(\n      address2,\n      amountIn2,\n      amount2Min,\n      amount1Min,\n      account,\n      deadline,\n      { value: amountIn1 }\n    );\n  } else if (address2 === COINS.AUTONITY.address) {\n    // Token + Eth\n    await routerContract.addLiquidityETH(\n      address1,\n      amountIn1,\n      amount1Min,\n      amount2Min,\n      account,\n      deadline,\n      { value: amountIn2 }\n    );\n  } else {\n    // Token + Token\n    await routerContract.addLiquidity(\n      address1,\n      address2,\n      amountIn1,\n      amountIn2,\n      amount1Min,\n      amount2Min,\n      account,\n      deadline\n    );\n  }\n}\n\n// Function used to remove Liquidity from any pair of tokens or token-AUT\n// To work correctly, there needs to be 9 arguments:\n//    `address1` - An Ethereum address of the currency to recieve (either a token or AUT)\n//    `address2` - An Ethereum address of the currency to recieve (either a token or AUT)\n//    `liquidity_tokens` - A float or similar number representing the value of liquidity tokens you will burn to get tokens back\n//    `amount1Min` - A float or similar number representing the minimum of address1's currency to recieve\n//    `amount2Min` - A float or similar number representing the minimum of address2's currency to recieve\n//    `routerContract` - The router contract to carry out this trade\n//    `accountAddress` - An Ethereum address of the current user's account\n//    `provider` - The current provider\n//    `signer` - The current signer\nexport async function removeLiquidity(\n  address1,\n  address2,\n  liquidity_tokens,\n  amount1min,\n  amount2min,\n  routerContract,\n  account,\n  signer,\n  factory\n) {\n  const liquidity = ethers.utils.parseEther(liquidity_tokens.toString());\n\n  const amount1Min = ethers.utils.parseEther(amount1min.toString());\n  const amount2Min = ethers.utils.parseEther(amount2min.toString());\n\n  const time = Math.floor(Date.now() / 1000) + 200000;\n  const deadline = ethers.BigNumber.from(time);\n\n  const pairAddress = await factory.getPair(address1, address2);\n  const pair = new Contract(pairAddress, PAIR.abi, signer);\n\n  await pair.approve(routerContract.address, liquidity);\n\n  console.log([\n    address1,\n    address2,\n    Number(liquidity),\n    Number(amount1Min),\n    Number(amount2Min),\n    account,\n    deadline,\n  ]);\n\n  if (address1 === COINS.AUTONITY.address) {\n    // Eth + Token\n    await routerContract.removeLiquidityETH(\n      address2,\n      liquidity,\n      amount2Min,\n      amount1Min,\n      account,\n      deadline\n    );\n  } else if (address2 === COINS.AUTONITY.address) {\n    // Token + Eth\n    await routerContract.removeLiquidityETH(\n      address1,\n      liquidity,\n      amount1Min,\n      amount2Min,\n      account,\n      deadline\n    );\n  } else {\n    // Token + Token\n    await routerContract.removeLiquidity(\n      address1,\n      address2,\n      liquidity,\n      amount1Min,\n      amount2Min,\n      account,\n      deadline\n    );\n  }\n}\n\nconst quote = (amountA, reserveA, reserveB) => {\n  const amountB = amountA * (reserveB / reserveA);\n  return amountB;\n};\n\n// Function used to get a quote of the liquidity addition\n//    `address1` - An Ethereum address of the currency to recieve (either a token or AUT)\n//    `address2` - An Ethereum address of the currency to recieve (either a token or AUT)\n//    `amountA_desired` - The prefered value of the first token that the user would like to deploy as liquidity\n//    `amountB_desired` - The prefered value of the second token that the user would like to deploy as liquidity\n//    `factory` - The current factory\n//    `signer` - The current signer\n\nexport async function quoteAddLiquidity(\n  address1,\n  address2,\n  amountADesired,\n  amountBDesired,\n  factory,\n  signer\n) {\n  const pairAddress = await factory.getPair(address1, address2);\n  const pair = new Contract(pairAddress, PAIR.abi, signer);\n\n  const reservesRaw = await fetchReserves(address1, address2, pair); // Returns the reserves already formated as ethers\n  const reserveA = reservesRaw[0];\n  const reserveB = reservesRaw[1];\n\n  if (reserveA === 0 && reserveB === 0) {\n    return [amountADesired.toString(), amountBDesired.toString()];\n  } else {\n    const amountBOptimal = quote(amountADesired, reserveA, reserveB);\n    if (amountBOptimal <= amountBDesired) {\n      return [amountADesired.toString(), amountBOptimal.toString()];\n    } else {\n      const amountAOptimal = quote(amountBDesired, reserveB, reserveA);\n      return [amountAOptimal.toString(), amountBDesired.toString()];\n    }\n  }\n}\n\n// Function used to get a quote of the liquidity removal\n//    `address1` - An Ethereum address of the currency to recieve (either a token or AUT)\n//    `address2` - An Ethereum address of the currency to recieve (either a token or AUT)\n//    `liquidity` - The amount of liquidity tokens the user will burn to get their tokens back\n//    `factory` - The current factory\n//    `signer` - The current signer\n\nexport async function quoteRemoveLiquidity(\n  address1,\n  address2,\n  liquidity,\n  factory,\n  signer\n) {\n  const pairAddress = await factory.getPair(address1, address2);\n  console.log(\"pair address\", pairAddress);\n  const pair = new Contract(pairAddress, PAIR.abi, signer);\n\n  const reservesRaw = await fetchReserves(address1, address2, pair); // Returns the reserves already formated as ethers\n  const reserveA = reservesRaw[0];\n  const reserveB = reservesRaw[1];\n\n  //// Older, simpler method\n  // const Aout = liquidity * Math.sqrt(reserveA / reserveB);\n  // const Bout = liquidity * Math.sqrt(reserveB / reserveA);\n\n  // New, precise method\n  const feeOn =\n    (await factory.feeTo()) !== 0x0000000000000000000000000000000000000000;\n\n  const _kLast = await pair.kLast();\n  const kLast = Number(ethers.utils.formatEther(_kLast));\n\n  const _totalSupply = await pair.totalSupply();\n  let totalSupply = Number(ethers.utils.formatEther(_totalSupply));\n\n  if (feeOn && kLast > 0) {\n    const feeLiquidity =\n      (totalSupply * (Math.sqrt(reserveA * reserveB) - Math.sqrt(kLast))) /\n      (5 * Math.sqrt(reserveA * reserveB) + Math.sqrt(kLast));\n    totalSupply = totalSupply + feeLiquidity;\n  }\n\n  const Aout = (reserveA * liquidity) / totalSupply;\n  const Bout = (reserveB * liquidity) / totalSupply;\n\n  return [liquidity, Aout, Bout];\n}\n","import React, { useEffect } from \"react\";\nimport { Grid, makeStyles, Paper, Typography } from \"@material-ui/core\";\nimport AccountBalanceIcon from \"@material-ui/icons/AccountBalance\";\nimport { useSnackbar } from \"notistack\";\nimport {\n  getAccount,\n  getFactory,\n  getProvider,\n  getRouter,\n  getSigner,\n  getBalanceAndSymbol,\n  getWeth,\n  getReserves,\n} from \"../ethereumFunctions\";\n\nimport { addLiquidity, quoteAddLiquidity } from \"./liquidityFunctions\";\n\nimport CurrencyField from \"../CurrencySwapper/CurrencyField\";\nimport CurrencyDialog from \"../CurrencySwapper/CurrencyDialog\";\nimport LoadingButton from \"../Components/LoadingButton\";\nimport * as COINS from \"../constants/coins\";\n\nconst styles = (theme) => ({\n  paperContainer: {\n    borderRadius: theme.spacing(2),\n    padding: theme.spacing(2),\n    paddingBottom: theme.spacing(3),\n    width: \"40%\",\n    overflow: \"wrap\",\n    background: \"linear-gradient(45deg, #ff0000 30%, #FF8E53 90%)\",\n    color: \"white\",\n  },\n  fullWidth: {\n    width: \"100%\",\n  },\n  values: {\n    width: \"50%\",\n  },\n  title: {\n    textAlign: \"center\",\n    padding: theme.spacing(0.5),\n    marginBottom: theme.spacing(1),\n  },\n  hr: {\n    width: \"100%\",\n  },\n  balance: {\n    padding: theme.spacing(1),\n    overflow: \"wrap\",\n    textAlign: \"center\",\n  },\n  buttonIcon: {\n    marginRight: theme.spacing(1),\n    padding: theme.spacing(0.4),\n  },\n});\n\nconst useStyles = makeStyles(styles);\n\nfunction LiquidityDeployer(props) {\n  const classes = useStyles();\n  const { enqueueSnackbar } = useSnackbar();\n\n  // Stores a record of whether their respective dialog window is open\n  const [dialog1Open, setDialog1Open] = React.useState(false);\n  const [dialog2Open, setDialog2Open] = React.useState(false);\n\n  // Stores data about their respective currency\n  const [currency1, setCurrency1] = React.useState({\n    address: undefined,\n    symbol: undefined,\n    balance: undefined,\n  });\n  const [currency2, setCurrency2] = React.useState({\n    address: undefined,\n    symbol: undefined,\n    balance: undefined,\n  });\n\n  // Stores the current reserves in the liquidity pool between currency1 and currency2\n  const [reserves, setReserves] = React.useState([\"0.0\", \"0.0\"]);\n  const [liquidity_tokens, setLiquidity_tokens] = React.useState(\"\");\n\n  // Stores the current value of their respective text box\n  const [field1Value, setField1Value] = React.useState(\"\");\n  const [field2Value, setField2Value] = React.useState(\"\");\n\n  // Stores information for the Autonity Network\n  const [provider, setProvider] = React.useState(getProvider());\n  const [signer, setSigner] = React.useState(getSigner(provider));\n  const [account, setAccount] = React.useState(undefined); // This is populated in a react hook\n  const [router, setRouter] = React.useState(\n    getRouter(\"0x4489D87C8440B19f11d63FA2246f943F492F3F5F\", signer)\n  );\n  const [weth, setWeth] = React.useState(\n    getWeth(\"0x3f0D1FAA13cbE43D662a37690f0e8027f9D89eBF\", signer)\n  );\n  const [factory, setFactory] = React.useState(\n    getFactory(\"0x4EDFE8706Cefab9DCd52630adFFd00E9b93FF116\", signer)\n  );\n\n  // Controls the loading button\n  const [loading, setLoading] = React.useState(false);\n\n  // Used when getting a quote of liquidity\n  const [liquidity_out, setLiquidity_out] = React.useState([0, 0, 0]);\n\n  // Switches the top and bottom currencies, this is called when users hit the swap button or select the opposite\n  // token in the dialog (e.g. if currency1 is TokenA and the user selects TokenB when choosing currency2)\n  const switchFields = () => {\n    let oldField1Value = field1Value;\n    let oldField2Value = field2Value;\n\n    setCurrency1(currency2);\n    setCurrency2(currency1);\n    setField1Value(oldField2Value);\n    setField2Value(oldField1Value);\n    setReserves(reserves.reverse());\n  };\n\n  // These functions take an HTML event, pull the data out and puts it into a state variable.\n  const handleChange = {\n    field1: (e) => {\n      setField1Value(e.target.value);\n    },\n    field2: (e) => {\n      setField2Value(e.target.value);\n    },\n  };\n\n  // Turns the account's balance into something nice and readable\n  const formatBalance = (balance, symbol) => {\n    if (balance && symbol)\n      return parseFloat(balance).toPrecision(8) + \" \" + symbol;\n    else return \"0.0\";\n  };\n\n  // Turns the currency's reserves into something nice and readable\n  const formatReserve = (reserve, symbol) => {\n    if (reserve && symbol) return reserve + \" \" + symbol;\n    else return \"0.0\";\n  };\n\n  // Determines whether the button should be enabled or not\n  const isButtonEnabled = () => {\n    let validFloat = new RegExp(\"^[0-9]*[.,]?[0-9]*$\");\n\n    // If both currencies have been selected, and a valid float has been entered for both, which are less than the user's balances, then return true\n    return (\n      currency1.address &&\n      currency2.address &&\n      validFloat.test(field1Value) &&\n      validFloat.test(field2Value) &&\n      parseFloat(field1Value) <= currency1.balance &&\n      parseFloat(field2Value) <= currency2.balance\n    );\n  };\n\n  const deploy = () => {\n    console.log(\"Attempting to deploy liquidity...\");\n    setLoading(true);\n\n    addLiquidity(\n      currency1.address,\n      currency2.address,\n      parseFloat(field1Value),\n      parseFloat(field2Value),\n      0,\n      0,\n      router,\n      account,\n      signer\n    )\n      .then(() => {\n        setLoading(false);\n\n        // If the transaction was successful, we clear to input to make sure the user doesn't accidental redo the transfer\n        setField1Value(\"\");\n        setField2Value(\"\");\n        enqueueSnackbar(\"Deployment Successful\", { variant: \"success\" });\n      })\n      .catch((e) => {\n        setLoading(false);\n        enqueueSnackbar(\"Deployment Failed (\" + e.message + \")\", {\n          variant: \"error\",\n          autoHideDuration: 10000,\n        });\n      });\n  };\n\n  // Called when the dialog window for currency1 exits\n  const onToken1Selected = (address) => {\n    // Close the dialog window\n    setDialog1Open(false);\n\n    // If the user inputs the same token, we want to switch the data in the fields\n    if (address === currency2.address) {\n      switchFields();\n    }\n    // We only update the values if the user provides a token\n    else if (address) {\n      // Getting some token data is async, so we need to wait for the data to return, hence the promise\n      getBalanceAndSymbol(account, address, provider, signer).then((data) => {\n        setCurrency1({\n          address: address,\n          symbol: data.symbol,\n          balance: data.balance,\n        });\n      });\n    }\n  };\n\n  // Called when the dialog window for currency2 exits\n  const onToken2Selected = (address) => {\n    // Close the dialog window\n    setDialog2Open(false);\n\n    // If the user inputs the same token, we want to switch the data in the fields\n    if (address === currency1.address) {\n      switchFields();\n    }\n    // We only update the values if the user provides a token\n    else if (address) {\n      // Getting some token data is async, so we need to wait for the data to return, hence the promise\n      getBalanceAndSymbol(account, address, provider, signer).then((data) => {\n        setCurrency2({\n          address: address,\n          symbol: data.symbol,\n          balance: data.balance,\n        });\n      });\n    }\n  };\n\n  useEffect(() => {\n    // This hook runs whenever the currencies change, it will attempt to fetch the new liquidity reserves.\n    console.log(\n      \"Trying to get reserves between:\\n\" +\n        currency1.address +\n        \"\\n\" +\n        currency2.address\n    );\n\n    if (currency1.address && currency2.address) {\n      getReserves(\n        currency1.address,\n        currency2.address,\n        factory,\n        signer,\n        account\n      ).then((data) => {\n        setReserves([data[0], data[1]]);\n        setLiquidity_tokens(data[2]);\n      });\n    }\n  }, [currency1.address, currency2.address, account, factory, signer]);\n\n  useEffect(() => {\n    // This hook runs whenever the field values change or currencies change, it will attempt to do a static call to give a preview of the liquidity deployment.\n\n    if (isButtonEnabled()) {\n      console.log(\"Trying to preview the liquidity deployment\");\n\n      quoteAddLiquidity(\n        currency1.address,\n        currency2.address,\n        parseFloat(field1Value),\n        parseFloat(field2Value),\n        factory,\n        signer\n      ).then((data) => {\n        // console.log(data);\n        console.log(\"TokenA in: \", data[0]);\n        console.log(\"TokenB in: \", data[1]);\n        const liquidity_out = Math.sqrt(data[0] * data[1]);\n        console.log(\"Liquidity out: \", liquidity_out);\n        setLiquidity_out([data[0], data[1], liquidity_out]);\n      });\n    }\n  }, [\n    currency1.address,\n    currency2.address,\n    field1Value,\n    field2Value,\n    factory,\n    signer,\n  ]);\n\n  useEffect(() => {\n    // This hook creates a timeout that will run every ~10 seconds, it's role is to check if the user's balance has\n    // updated has changed. This allows them to see when a transaction completes by looking at the balance output.\n\n    const currencyTimeout = setTimeout(() => {\n      console.log(\"Checking balances & Getting reserves...\");\n\n      if (currency1.address && currency2.address) {\n        getReserves(\n          currency1.address,\n          currency2.address,\n          factory,\n          signer,\n          account\n        ).then((data) => {\n          setReserves([data[0], data[1]]);\n          setLiquidity_tokens(data[2]);\n        });\n      }\n\n      if (currency1) {\n        getBalanceAndSymbol(account, currency1.address, provider, signer).then(\n          (data) => {\n            setCurrency1({\n              ...currency1,\n              balance: data.balance,\n            });\n          }\n        );\n      }\n      if (currency2) {\n        getBalanceAndSymbol(account, currency2.address, provider, signer).then(\n          (data) => {\n            setCurrency2({\n              ...currency2,\n              balance: data.balance,\n            });\n          }\n        );\n      }\n    }, 10000);\n\n    return () => clearTimeout(currencyTimeout);\n  });\n\n  useEffect(() => {\n    // This hook will run when the component first mounts, it can be useful to put logic to populate variables here\n\n    getAccount().then((account) => {\n      setAccount(account);\n    });\n  });\n\n  return (\n    <div>\n      {/* Liquidity deployer */}\n      <Typography variant=\"h5\" className={classes.title}></Typography>\n\n      {/* Dialog Windows */}\n      <CurrencyDialog\n        open={dialog1Open}\n        onClose={onToken1Selected}\n        coins={COINS.ALL}\n        signer={signer}\n      />\n      <CurrencyDialog\n        open={dialog2Open}\n        onClose={onToken2Selected}\n        coins={COINS.ALL}\n        signer={signer}\n      />\n\n      <Grid container direction=\"column\" alignItems=\"center\" spacing={2}>\n        <Grid item xs={12} className={classes.fullWidth}>\n          <CurrencyField\n            activeField={true}\n            value={field1Value}\n            onClick={() => setDialog1Open(true)}\n            onChange={handleChange.field1}\n            symbol={\n              currency1.symbol !== undefined ? currency1.symbol : \"Select\"\n            }\n          />\n        </Grid>\n\n        <Grid item xs={12} className={classes.fullWidth}>\n          <CurrencyField\n            activeField={true}\n            value={field2Value}\n            onClick={() => setDialog2Open(true)}\n            onChange={handleChange.field2}\n            symbol={\n              currency2.symbol !== undefined ? currency2.symbol : \"Select\"\n            }\n          />\n        </Grid>\n      </Grid>\n\n      <Grid\n        container\n        direction=\"row\"\n        alignItems=\"center\"\n        justifyContent=\"center\"\n        spacing={4}\n        className={classes.balance}\n      >\n        <hr className={classes.hr} />\n        <Grid\n          container\n          item\n          className={classes.values}\n          direction=\"column\"\n          alignItems=\"center\"\n          spacing={2}\n        >\n          {/* Balance Display */}\n          <Typography variant=\"h6\">Your Balances</Typography>\n          <Grid container direction=\"row\" justifyContent=\"space-between\">\n            <Grid item xs={6}>\n              <Typography variant=\"body1\" className={classes.balance}>\n                {formatBalance(currency1.balance, currency1.symbol)}\n              </Typography>\n            </Grid>\n            <Grid item xs={6}>\n              <Typography variant=\"body1\" className={classes.balance}>\n                {formatBalance(currency2.balance, currency2.symbol)}\n              </Typography>\n            </Grid>\n          </Grid>\n\n          <hr className={classes.hr} />\n\n          {/* Reserves Display */}\n          <Typography variant=\"h6\">Reserves</Typography>\n          <Grid container direction=\"row\" justifyContent=\"space-between\">\n            <Grid item xs={6}>\n              <Typography variant=\"body1\" className={classes.balance}>\n                {formatReserve(reserves[0], currency1.symbol)}\n              </Typography>\n            </Grid>\n            <Grid item xs={6}>\n              <Typography variant=\"body1\" className={classes.balance}>\n                {formatReserve(reserves[1], currency2.symbol)}\n              </Typography>\n            </Grid>\n          </Grid>\n\n          <hr className={classes.hr} />\n\n          {/* Liquidity Tokens Display */}\n          <Typography variant=\"h6\">Your Liquidity Pool Tokens</Typography>\n          <Grid container direction=\"row\" justifyContent=\"center\">\n            <Grid item xs={6}>\n              <Typography variant=\"body1\" className={classes.balance}>\n                {formatReserve(liquidity_tokens, \"UNI-V2\")}\n              </Typography>\n            </Grid>\n          </Grid>\n        </Grid>\n        <Paper className={classes.paperContainer}>\n          {/*Red  Display to show the quote */}\n          <Grid\n            container\n            item\n            direction=\"column\"\n            alignItems=\"center\"\n            spacing={2}\n            className={classes.fullWidth}\n          >\n            {/* Tokens in */}\n            <Typography variant=\"h6\">Tokens in</Typography>\n            <Grid container direction=\"row\" justifyContent=\"space-between\">\n              <Grid item xs={6}>\n                <Typography variant=\"body1\" className={classes.balance}>\n                  {formatBalance(liquidity_out[0], currency1.symbol)}\n                </Typography>\n              </Grid>\n              <Grid item xs={6}>\n                <Typography variant=\"body1\" className={classes.balance}>\n                  {formatBalance(liquidity_out[1], currency2.symbol)}\n                </Typography>\n              </Grid>\n            </Grid>\n\n            <hr className={classes.hr} />\n\n            {/* Liquidity Tokens Display */}\n            <Typography variant=\"h6\">Liquidity Pool Tokens Out</Typography>\n            <Grid container direction=\"row\" justifyContent=\"center\">\n              <Grid item xs={6}>\n                <Typography variant=\"body1\" className={classes.balance}>\n                  {formatReserve(liquidity_out[2], \"UNI-V2\")}\n                </Typography>\n              </Grid>\n            </Grid>\n          </Grid>\n        </Paper>\n\n        <hr className={classes.hr} />\n      </Grid>\n      <Grid container direction=\"column\" alignItems=\"center\" spacing={2}>\n        <LoadingButton\n          loading={loading}\n          valid={isButtonEnabled()}\n          success={false}\n          fail={false}\n          onClick={deploy}\n        >\n          <AccountBalanceIcon className={classes.buttonIcon} />\n          Deploy\n        </LoadingButton>\n      </Grid>\n    </div>\n  );\n}\n\nexport default LiquidityDeployer;\n","import React, { useEffect } from \"react\";\nimport { Grid, makeStyles, Paper, Typography } from \"@material-ui/core\";\nimport ArrowDownwardIcon from \"@material-ui/icons/ArrowDownward\";\nimport { useSnackbar } from \"notistack\";\nimport {\n  getAccount,\n  getFactory,\n  getProvider,\n  getRouter,\n  getSigner,\n  getBalanceAndSymbol,\n  getWeth,\n  getReserves,\n} from \"../ethereumFunctions\";\nimport { removeLiquidity, quoteRemoveLiquidity } from \"./liquidityFunctions\";\nimport {\n  RemoveLiquidityField1,\n  RemoveLiquidityField2,\n} from \"../CurrencySwapper/CurrencyField\";\nimport CurrencyDialog from \"../CurrencySwapper/CurrencyDialog\";\nimport LoadingButton from \"../Components/LoadingButton\";\nimport * as COINS from \"../constants/coins\";\n\nconst styles = (theme) => ({\n  paperContainer: {\n    borderRadius: theme.spacing(2),\n    padding: theme.spacing(2),\n    paddingBottom: theme.spacing(3),\n    width: \"40%\",\n    overflow: \"wrap\",\n    background: \"linear-gradient(45deg, #ff0000 30%, #FF8E53 90%)\",\n    color: \"white\",\n  },\n  fullWidth: {\n    width: \"100%\",\n  },\n  values: {\n    width: \"50%\",\n  },\n  title: {\n    textAlign: \"center\",\n    padding: theme.spacing(0.5),\n    marginBottom: theme.spacing(1),\n  },\n  hr: {\n    width: \"100%\",\n  },\n  balance: {\n    padding: theme.spacing(1),\n    overflow: \"wrap\",\n    textAlign: \"center\",\n  },\n  buttonIcon: {\n    marginRight: theme.spacing(1),\n    padding: theme.spacing(0.4),\n  },\n});\n\nconst useStyles = makeStyles(styles);\n\nfunction LiquidityRemover(props) {\n  const classes = useStyles();\n  const { enqueueSnackbar } = useSnackbar();\n\n  // Stores a record of whether their respective dialog window is open\n  const [dialog1Open, setDialog1Open] = React.useState(false);\n  const [dialog2Open, setDialog2Open] = React.useState(false);\n\n  // Stores data about their respective currency\n  const [currency1, setCurrency1] = React.useState({\n    address: undefined,\n    symbol: undefined,\n    balance: undefined,\n  });\n  const [currency2, setCurrency2] = React.useState({\n    address: undefined,\n    symbol: undefined,\n    balance: undefined,\n  });\n\n  // Stores the current reserves in the liquidity pool between currency1 and currency2\n  const [reserves, setReserves] = React.useState([\"0.0\", \"0.0\"]);\n  // Stores the liquidity tokens the use has\n  const [liquidity_tokens, setLiquidity_tokens] = React.useState(\"\");\n  // Stores the input and output for the liquidity removal preview\n  const [tokensOut, setTokensOut] = React.useState([0, 0, 0]);\n\n  // Stores the current value of their respective text box\n  const [field1Value, setField1Value] = React.useState(\"\");\n\n  // Stores information for the Autonity Network\n  const [provider, setProvider] = React.useState(getProvider());\n  const [signer, setSigner] = React.useState(getSigner(provider));\n  const [account, setAccount] = React.useState(undefined); // This is populated in a react hook\n  const [router, setRouter] = React.useState(\n    getRouter(\"0x4489D87C8440B19f11d63FA2246f943F492F3F5F\", signer)\n  );\n  const [weth, setWeth] = React.useState(\n    getWeth(\"0x3f0D1FAA13cbE43D662a37690f0e8027f9D89eBF\", signer)\n  );\n  const [factory, setFactory] = React.useState(\n    getFactory(\"0x4EDFE8706Cefab9DCd52630adFFd00E9b93FF116\", signer)\n  );\n\n  // Controls the loading button\n  const [loading, setLoading] = React.useState(false);\n\n  // Switches the top and bottom currencies, this is called when users hit the swap button or select the opposite\n  // token in the dialog (e.g. if currency1 is TokenA and the user selects TokenB when choosing currency2)\n  const switchFields = () => {\n    setCurrency1(currency2);\n    setCurrency2(currency1);\n    setReserves(reserves.reverse());\n  };\n\n  // These functions take an HTML event, pull the data out and puts it into a state variable.\n  const handleChange = {\n    field1: (e) => {\n      setField1Value(e.target.value);\n    },\n  };\n\n  // Turns the account's balance into something nice and readable\n  const formatBalance = (balance, symbol) => {\n    if (balance && symbol)\n      return parseFloat(balance).toPrecision(8) + \" \" + symbol;\n    else return \"0.0\";\n  };\n\n  // Turns the currency's reserves into something nice and readable\n  const formatReserve = (reserve, symbol) => {\n    if (reserve && symbol) return reserve + \" \" + symbol;\n    else return \"0.0\";\n  };\n\n  // Determines whether the button should be enabled or not\n  const isButtonEnabled = () => {\n    let validFloat = new RegExp(\"^[0-9]*[.,]?[0-9]*$\");\n\n    // If both currencies have been selected, and a valid float has been entered for both, which are less than the user's balances, then return true\n    return (\n      currency1.address &&\n      currency2.address &&\n      validFloat.test(field1Value) &&\n      parseFloat(field1Value) <= liquidity_tokens\n    );\n  };\n\n  const deploy = () => {\n    console.log(\"Attempting to remove liquidity...\");\n    setLoading(true);\n\n    removeLiquidity(\n      currency1.address,\n      currency2.address,\n      parseFloat(field1Value),\n      0,\n      0,\n      router,\n      account,\n      signer,\n      factory\n    )\n      .then(() => {\n        setLoading(false);\n\n        // If the transaction was successful, we clear to input to make sure the user doesn't accidental redo the transfer\n        setField1Value(\"\");\n        enqueueSnackbar(\"Removal Successful\", { variant: \"success\" });\n      })\n      .catch((e) => {\n        setLoading(false);\n        enqueueSnackbar(\"Deployment Failed (\" + e.message + \")\", {\n          variant: \"error\",\n          autoHideDuration: 10000,\n        });\n      });\n  };\n\n  // Called when the dialog window for currency1 exits\n  const onToken1Selected = (address) => {\n    // Close the dialog window\n    setDialog1Open(false);\n\n    // If the user inputs the same token, we want to switch the data in the fields\n    if (address === currency2.address) {\n      switchFields();\n    }\n    // We only update the values if the user provides a token\n    else if (address) {\n      // Getting some token data is async, so we need to wait for the data to return, hence the promise\n      getBalanceAndSymbol(account, address, provider, signer).then((data) => {\n        setCurrency1({\n          address: address,\n          symbol: data.symbol,\n          balance: data.balance,\n        });\n      });\n    }\n  };\n\n  // Called when the dialog window for currency2 exits\n  const onToken2Selected = (address) => {\n    // Close the dialog window\n    setDialog2Open(false);\n\n    // If the user inputs the same token, we want to switch the data in the fields\n    if (address === currency1.address) {\n      switchFields();\n    }\n    // We only update the values if the user provides a token\n    else if (address) {\n      // Getting some token data is async, so we need to wait for the data to return, hence the promise\n      getBalanceAndSymbol(account, address, provider, signer).then((data) => {\n        setCurrency2({\n          address: address,\n          symbol: data.symbol,\n          balance: data.balance,\n        });\n      });\n    }\n  };\n\n  useEffect(() => {\n    // This hook runs whenever the currencies change, it will attempt to fetch the new liquidity reserves.\n    console.log(\n      \"Trying to get reserves between:\\n\" +\n        currency1.address +\n        \"\\n\" +\n        currency2.address\n    );\n\n    if (currency1.address && currency2.address) {\n      getReserves(\n        currency1.address,\n        currency2.address,\n        factory,\n        signer,\n        account\n      ).then((data) => {\n        setReserves([data[0], data[1]]);\n        setLiquidity_tokens(data[2]);\n      });\n    }\n  }, [currency1.address, currency2.address, account, factory, signer]);\n\n  useEffect(() => {\n    // This hook runs whenever the field values change or currencies change, it will attempt to give a preview of the liquidity removal.\n\n    if (isButtonEnabled()) {\n      console.log(\"Trying to preview the liquidity removal\");\n      quoteRemoveLiquidity(\n        currency1.address,\n        currency2.address,\n        field1Value,\n        factory,\n        signer\n      ).then((data) => {\n        console.log(data);\n        setTokensOut(data);\n      });\n    }\n  }, [currency1.address, currency2.address, field1Value, factory, signer]);\n\n  useEffect(() => {\n    // This hook creates a timeout that will run every ~10 seconds, it's role is to check if the user's balance has\n    // updated has changed. This allows them to see when a transaction completes by looking at the balance output.\n\n    const currencyTimeout = setTimeout(() => {\n      console.log(\"Checking balances & Getting reserves...\");\n\n      if (currency1.address && currency2.address) {\n        getReserves(\n          currency1.address,\n          currency2.address,\n          factory,\n          signer,\n          account\n        ).then((data) => {\n          setReserves([data[0], data[1]]);\n          setLiquidity_tokens(data[2]);\n        });\n      }\n\n      if (currency1) {\n        getBalanceAndSymbol(account, currency1.address, provider, signer).then(\n          (data) => {\n            setCurrency1({\n              ...currency1,\n              balance: data.balance,\n            });\n          }\n        );\n      }\n      if (currency2) {\n        getBalanceAndSymbol(account, currency2.address, provider, signer).then(\n          (data) => {\n            setCurrency2({\n              ...currency2,\n              balance: data.balance,\n            });\n          }\n        );\n      }\n    }, 10000);\n\n    return () => clearTimeout(currencyTimeout);\n  });\n\n  useEffect(() => {\n    // This hook will run when the component first mounts, it can be useful to put logic to populate variables here\n\n    getAccount().then((account) => {\n      setAccount(account);\n    });\n  });\n\n  return (\n    <div>\n      {/* Currency Swapper */}\n      <Typography variant=\"h5\" className={classes.title}></Typography>\n\n      {/* Dialog Windows */}\n      <CurrencyDialog\n        open={dialog1Open}\n        onClose={onToken1Selected}\n        coins={COINS.ALL}\n        signer={signer}\n      />\n      <CurrencyDialog\n        open={dialog2Open}\n        onClose={onToken2Selected}\n        coins={COINS.ALL}\n        signer={signer}\n      />\n\n      <Grid container direction=\"column\" alignItems=\"center\" spacing={2}>\n        <Grid item xs={12} className={classes.fullWidth}>\n          <RemoveLiquidityField1\n            activeField={true}\n            value={field1Value}\n            onClick={() => setDialog1Open(true)}\n            onChange={handleChange.field1}\n            symbol={\n              currency1.symbol !== undefined ? currency1.symbol : \"Select\"\n            }\n          />\n        </Grid>\n\n        <Grid item xs={12} className={classes.fullWidth}>\n          <RemoveLiquidityField2\n            activeField={true}\n            onClick={() => setDialog2Open(true)}\n            symbol={\n              currency2.symbol !== undefined ? currency2.symbol : \"Select\"\n            }\n          />\n        </Grid>\n      </Grid>\n\n      <Grid\n        container\n        direction=\"row\"\n        alignItems=\"center\"\n        justifyContent=\"center\"\n        spacing={4}\n        className={classes.balance}\n      >\n        <hr className={classes.hr} />\n        <Grid\n          container\n          item\n          className={classes.values}\n          direction=\"column\"\n          alignItems=\"center\"\n          spacing={2}\n        >\n          {/* Balance Display */}\n          <Typography variant=\"h6\">Your Balances</Typography>\n          <Grid container direction=\"row\" justifyContent=\"space-between\">\n            <Grid item xs={6}>\n              <Typography variant=\"body1\" className={classes.balance}>\n                {formatBalance(currency1.balance, currency1.symbol)}\n              </Typography>\n            </Grid>\n            <Grid item xs={6}>\n              <Typography variant=\"body1\" className={classes.balance}>\n                {formatBalance(currency2.balance, currency2.symbol)}\n              </Typography>\n            </Grid>\n          </Grid>\n\n          <hr className={classes.hr} />\n\n          {/* Reserves Display */}\n          <Typography variant=\"h6\">Reserves</Typography>\n          <Grid container direction=\"row\" justifyContent=\"space-between\">\n            <Grid item xs={6}>\n              <Typography variant=\"body1\" className={classes.balance}>\n                {formatReserve(reserves[0], currency1.symbol)}\n              </Typography>\n            </Grid>\n            <Grid item xs={6}>\n              <Typography variant=\"body1\" className={classes.balance}>\n                {formatReserve(reserves[1], currency2.symbol)}\n              </Typography>\n            </Grid>\n          </Grid>\n\n          <hr className={classes.hr} />\n\n          {/* Liquidity Tokens Display */}\n          <Typography variant=\"h6\">Your Liquidity Pool Tokens</Typography>\n          <Grid container direction=\"row\" justifyContent=\"center\">\n            <Grid item xs={6}>\n              <Typography variant=\"body1\" className={classes.balance}>\n                {formatReserve(liquidity_tokens, \"UNI-V2\")}\n              </Typography>\n            </Grid>\n          </Grid>\n        </Grid>\n\n        <Paper className={classes.paperContainer}>\n          {/*Red  Display to show the quote */}\n          <Grid\n            container\n            item\n            direction=\"column\"\n            alignItems=\"center\"\n            spacing={2}\n            className={classes.fullWidth}\n          >\n            {/* Tokens in */}\n            <Typography variant=\"h6\">Liquidity Pool Tokens in</Typography>\n            <Grid container direction=\"row\" justifyContent=\"center\">\n              <Grid item xs={6}>\n                <Typography variant=\"body1\" className={classes.balance}>\n                  {formatBalance(tokensOut[0], \"UNI-V2\")}\n                </Typography>\n              </Grid>\n            </Grid>\n\n            <hr className={classes.hr} />\n\n            {/* Liquidity Tokens Display */}\n            <Typography variant=\"h6\">Tokens Out</Typography>\n            <Grid container direction=\"row\" justifyContent=\"spaces-between\">\n              <Grid item xs={6}>\n                <Typography variant=\"body1\" className={classes.balance}>\n                  {formatBalance(tokensOut[1], currency1.symbol)}\n                </Typography>\n              </Grid>\n              <Grid item xs={6}>\n                <Typography variant=\"body1\" className={classes.balance}>\n                  {formatBalance(tokensOut[2], currency2.symbol)}\n                </Typography>\n              </Grid>\n            </Grid>\n          </Grid>\n        </Paper>\n        <hr className={classes.hr} />\n      </Grid>\n\n      <Grid container direction=\"column\" alignItems=\"center\" spacing={2}>\n        <LoadingButton\n          loading={loading}\n          valid={isButtonEnabled()}\n          success={false}\n          fail={false}\n          onClick={deploy}\n        >\n          <ArrowDownwardIcon className={classes.buttonIcon} />\n          Remove\n        </LoadingButton>\n      </Grid>\n    </div>\n  );\n}\n\nexport default LiquidityRemover;\n","import React from \"react\";\nimport {\n  Container,\n  Grid,\n  makeStyles,\n  Paper,\n  Typography,\n  ButtonGroup,\n  Button,\n} from \"@material-ui/core\";\n\nimport LiquidityDeployer from \"./LiquidityDeployer\";\nimport LiquidityRemover from \"./RemoveLiquidity\";\n\nconst styles = (theme) => ({\n  paperContainer: {\n    borderRadius: theme.spacing(2),\n    padding: theme.spacing(1),\n    paddingBottom: theme.spacing(3),\n    maxWidth: 700,\n    margin: \"auto\",\n  },\n  fullWidth: {\n    width: \"100%\",\n  },\n  title: {\n    textAlign: \"center\",\n    padding: theme.spacing(0.5),\n    marginBottom: theme.spacing(1),\n  },\n  hr: {\n    width: \"100%\",\n  },\n  balance: {\n    padding: theme.spacing(1),\n    overflow: \"wrap\",\n    textAlign: \"center\",\n  },\n  buttonIcon: {\n    marginRight: theme.spacing(1),\n    padding: theme.spacing(0.4),\n  },\n  footer: {\n    marginTop: \"155px\",\n  },\n});\n\nconst useStyles = makeStyles(styles);\n\nfunction Liquidity() {\n  const classes = useStyles();\n\n  const [deploy, setDeploy] = React.useState(true);\n\n  const deploy_or_remove = (deploy) => {\n    if (deploy === true) {\n      return <LiquidityDeployer />;\n    }\n    return <LiquidityRemover />;\n  };\n\n  const changeStyles = (K) => {\n    if (K === true) {\n      let add_button = document.getElementById(\"add-button\");\n      add_button.style.backgroundColor = \"#ff0000\";\n\n      let remove_button = document.getElementById(\"remove-button\");\n      remove_button.style.backgroundColor = \"#9e9e9e\";\n    } else {\n      let remove_button = document.getElementById(\"remove-button\");\n      remove_button.style.backgroundColor = \"#ff0000\";\n\n      let add_button = document.getElementById(\"add-button\");\n      add_button.style.backgroundColor = \"#9e9e9e\";\n    }\n  };\n\n  return (\n    <div>\n      <Container>\n        <Paper className={classes.paperContainer}>\n          <Typography\n            variant=\"h5\"\n            className={classes.title}\n            color=\"common.white\"\n          >\n            <ButtonGroup size=\"large\" variant=\"contained\">\n              <Button\n                id=\"add-button\"\n                color=\"primary\"\n                text=\"white\"\n                onClick={() => {\n                  setDeploy(true);\n                  changeStyles(true);\n                }}\n              >\n                Deploy Liquidity\n              </Button>\n\n              <Button\n                id=\"remove-button\"\n                color=\"secondary\"\n                text=\"white\"\n                onClick={() => {\n                  setDeploy(false);\n                  changeStyles(false);\n                }}\n              >\n                Remove Liquidity\n              </Button>\n            </ButtonGroup>\n          </Typography>\n\n          {deploy_or_remove(deploy)}\n        </Paper>\n      </Container>\n\n      <Grid\n        container\n        className={classes.footer}\n        direction=\"row\"\n        justifyContent=\"center\"\n        alignItems=\"flex-end\"\n      >\n        <p>\n          Clearmatics Autonity Uniswap | Get AUT for use in the bakerloo testnet{\" \"}\n          <a href=\"https://faucet.bakerloo.autonity.network/\">here</a>\n        </p>\n      </Grid>\n    </div>\n  );\n}\n\nexport default Liquidity;\n","import React from \"react\";\nimport {\n  Container,\n  Grid,\n  makeStyles,\n  Paper,\n  Typography,\n} from \"@material-ui/core\";\n\nconst styles = (theme) => ({\n  paperContainer: {\n    borderRadius: theme.spacing(2),\n    padding: theme.spacing(1),\n    paddingBottom: theme.spacing(3),\n    maxWidth: 700,\n    margin: \"auto\",\n    marginTop: \"200px\",\n  },\n  fullWidth: {\n    width: \"100%\",\n  },\n  title: {\n    textAlign: \"center\",\n    padding: theme.spacing(0.5),\n    marginBottom: theme.spacing(1),\n  },\n  hr: {\n    width: \"100%\",\n  },\n  balance: {\n    padding: theme.spacing(1),\n    overflow: \"wrap\",\n    textAlign: \"center\",\n  },\n  buttonIcon: {\n    marginRight: theme.spacing(1),\n    padding: theme.spacing(0.4),\n  },\n  footer: {\n    marginTop: \"155px\",\n  },\n});\n\nconst useStyles = makeStyles(styles);\n\nfunction ConnectWalletPage() {\n  const classes = useStyles();\n  return (\n    <div>\n      <Container>\n        <Paper className={classes.paperContainer}>\n          <Typography\n            variant=\"h6\"\n            className={classes.title}\n            color=\"common.white\"\n          >\n            Please connect an Ethereum wallet to your browser to use the\n            application\n          </Typography>\n        </Paper>\n      </Container>\n\n      <Grid\n        container\n        className={classes.footer}\n        direction=\"row\"\n        justifyContent=\"center\"\n        alignItems=\"flex-end\"\n      >\n        <p>\n          Clearmatics Autonity Uniswap | Get AUT for use in the bakerloo testnet{\" \"}\n          <a href=\"https://faucet.bakerloo.autonity.network/\">here</a>\n        </p>\n      </Grid>\n    </div>\n  );\n}\n\nexport default ConnectWalletPage;\n","import React from \"react\";\nimport \"./App.css\";\nimport { ethers } from \"ethers\";\nimport NarBar from \"./NavBar/NavBar\";\nimport CurrencySwapper from \"./CurrencySwapper/CurrencySwapper\";\nimport { Route } from \"react-router-dom\";\nimport { SnackbarProvider } from \"notistack\";\nimport Liquidity from \"./LiquidityDeployer/Liquidity\";\nimport ConnectWalletPage from \"./Components/connectWalletPage\";\nimport { createTheme, ThemeProvider } from \"@material-ui/core\";\n\nconst theme = createTheme({\n  palette: {\n    primary: {\n      main: \"#ff0000\",\n      contrastText: \"#ffffff\",\n    },\n    secondary: {\n      main: \"#9e9e9e\",\n      contrastText: \"#ffffff\",\n    },\n  },\n});\n\nfunction App() {\n  // Check if wallet is here:\n  try {\n    const provider = new ethers.providers.Web3Provider(window.ethereum);\n    return (\n      <div className=\"App\">\n        <SnackbarProvider maxSnack={3}>\n          <ThemeProvider theme={theme}>\n            <NarBar />\n            <Route exact path=\"/uniswap-react/\" component={CurrencySwapper} />\n            <Route\n              exact\n              path=\"/uniswap-react/liquidity\"\n              component={Liquidity}\n            />\n          </ThemeProvider>\n        </SnackbarProvider>\n      </div>\n    );\n  } catch (err) {\n    return (\n      <div className=\"App\">\n        <SnackbarProvider maxSnack={3}>\n          <ThemeProvider theme={theme}>\n            <ConnectWalletPage />\n          </ThemeProvider>\n        </SnackbarProvider>\n      </div>\n    );\n  }\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport \"bootstrap/dist/css/bootstrap.css\";\nimport \"./index.css\";\nimport App from \"./App\";\nimport reportWebVitals from \"./reportWebVitals\";\nimport { BrowserRouter } from \"react-router-dom\";\n\nReactDOM.render(\n  <BrowserRouter>\n    <React.StrictMode>\n      <App />\n    </React.StrictMode>\n  </BrowserRouter>,\n\n  document.getElementById(\"root\")\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}