{"version":3,"sources":["NavBar/MenuItems.js","assets/img/logo.svg","NavBar/NavBar.js","constants/coins.js","ethereumFunctions.js","CoinSwapper/CoinField.js","CoinSwapper/CoinButton.js","CoinSwapper/CoinDialog.js","Components/LoadingButton.js","CoinSwapper/CoinSwapper.js","Liquidity/LiquidityFunctions.js","Liquidity/LiquidityDeployer.js","Liquidity/RemoveLiquidity.js","Liquidity/SwitchButton.js","Liquidity/Liquidity.js","Components/connectWalletPage.js","App.js","reportWebVitals.js","index.js"],"names":["MenuItems","title","url","cName","NavBar","state","clicked","className","src","logo","map","item","index","to","Component","AUTONITY","name","abbr","address","TOKEN_A","TOKEN_B","TOKEN_C","TOKEN_D","ALL","ROUTER","require","ERC20","FACTORY","PAIR","getProvider","ethers","providers","Web3Provider","window","ethereum","getSigner","provider","getRouter","signer","Contract","abi","getWeth","getFactory","getAccount","a","request","method","accounts","getBalanceAndSymbol","accountAddress","COINS","getBalance","balanceRaw","balance","utils","formatEther","symbol","token","balanceOf","address1","address2","amount","routerContract","tokens","time","Math","floor","Date","now","deadline","BigNumber","from","amountIn","parseEther","toString","callStatic","getAmountsOut","amountOut","token1","approve","swapExactETHForTokens","value","swapExactTokensForETH","swapExactTokensForTokens","values_out","amount_out","Number","fetchReserves","pair","getReserves","reservesRaw","results","token0","console","log","factory","getPair","pairAddress","liquidityTokens_BN","liquidityTokens","toFixed","useStyles","makeStyles","theme","container","padding","spacing","minHeight","backgroundColor","COLORS","borderRadius","borderColor","borderWidth","borderStyle","container_input","marginLeft","textAlign","container_blank","grid","height","fab","zIndex","input","typography","h5","width","inputBase","RemoveLiquidityField1","props","classes","onClick","onChange","activeField","Grid","direction","justifyContent","alignItems","xs","Fab","size","variant","InputBase","placeholder","disabled","root","RemoveLiquidityField2","CoinField","button","paddingTop","paddingBottom","coinName","opacity","CoinButton","coinAbbr","ButtonBase","focusRipple","Typography","styles","dialogContainer","titleSection","titleText","alignSelf","hr","margin","paddingLeft","paddingRight","coinList","overflowY","coinContainer","marginTop","overflow","DialogTitle","withStyles","children","onClose","other","disableTypography","alignContent","IconButton","aria-label","DialogActions","MuiDialogActions","CoinDialog","open","coins","React","useState","setAddress","error","setError","exit","Dialog","undefined","fullWidth","maxWidth","paper","TextField","e","target","helperText","coin","Button","autoFocus","err","doesTokenExist","color","wrapper","position","progress","green","top","left","LoadingButton","loading","valid","success","fail","type","CircularProgress","paperContainer","switchButton","marginBottom","footer","CoinSwapper","enqueueSnackbar","useSnackbar","account","setAccount","router","dialog1Open","setDialog1Open","dialog2Open","setDialog2Open","coin1","setCoin1","coin2","setCoin2","reserves","setReserves","field1Value","setField1Value","field2Value","setField2Value","setLoading","switchFields","reverse","handleChange","field1","formatBalance","parseFloat","toPrecision","formatReserve","reserve","useEffect","then","data","isNaN","getAmountOut","coinTimeout","setTimeout","clearTimeout","Container","Paper","fontSize","validFloat","RegExp","test","isButtonEnabled","swapTokens","catch","message","autoHideDuration","href","amount1","amount2","amount1min","amount2min","amountIn1","amountIn2","amount1Min","amount2Min","token2","addLiquidityETH","addLiquidity","liquidity_tokens","liquidity","removeLiquidityETH","removeLiquidity","quote","reserve1","reserve2","sqrt","amountADesired","amountBDesired","reserveA","reserveB","amountBOptimal","amountAOptimal","feeTo","feeOn","kLast","_kLast","totalSupply","_totalSupply","feeLiquidity","Aout","Bout","background","values","buttonIcon","marginRight","LiquidityDeployer","setLiquidity_tokens","liquidity_out","setLiquidity_out","oldField1Value","oldField2Value","field2","quoteAddLiquidity","LiquidityRemover","tokensOut","setTokensOut","quoteRemoveLiquidity","SwitchButton","setDeploy","changeStyles","K","document","getElementById","style","ButtonGroup","id","text","Liquidity","deploy","deploy_or_remove","ConnectWalletPage","createTheme","palette","primary","main","contrastText","secondary","App","maxSnack","ThemeProvider","exact","path","component","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode"],"mappings":"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","file":"static/js/main.552039a0.chunk.js","sourcesContent":["export const MenuItems = [\n  {\n    title: \"Swap\",\n    url: \"/autonity-uniswap-interface/\",\n    cName: \"nav-links\",\n  },\n  {\n    title: \"Liquidity\",\n    url: \"/autonity-uniswap-interface/liquidity\",\n    cName: \"nav-links\",\n  },\n];\n","export default __webpack_public_path__ + \"static/media/logo.28418735.svg\";","import React, { Component } from \"react\";\nimport { Link } from \"react-router-dom\";\nimport { MenuItems } from \"./MenuItems\";\nimport logo from \"../assets/img/logo.svg\";\nimport \"./NavBar.css\";\n\nclass NavBar extends Component {\n  state = { clicked: false };\n\n  render() {\n    return (\n      <nav>\n        <div className=\"Title\">\n          <h1 className=\"navbar-logo\">\n            <img src={logo} className=\"logo\"></img> Autonity Uniswap\n          </h1>\n        </div>\n\n        <div className=\"NavbarItems\">\n          <ul className={`nav-menu`}>\n            {MenuItems.map((item, index) => {\n              return (\n                <li key={index}>\n                  <Link className={\"nav-links\"} to={item.url}>\n                    {item.title}\n                  </Link>\n                </li>\n              );\n            })}\n          </ul>\n        </div>\n      </nav>\n    );\n  }\n}\n\nexport default NavBar;\n","export const AUTONITY = {\n  name: \"Auton\",\n  abbr: \"AUT\",\n  address: \"0x3f0D1FAA13cbE43D662a37690f0e8027f9D89eBF\", // Weth address\n};\n\nexport const TOKEN_A = {\n  name: \"Token A\",\n  abbr: \"TA\",\n  address: \"0x1d29BD2ACedBff15A59e946a4DE26d5257447727\",\n};\n\nexport const TOKEN_B = {\n  name: \"Token B\",\n  abbr: \"TB\",\n  address: \"0xc108a13D00371520EbBeCc7DF5C8610C71F4FfbA\",\n};\n\nexport const TOKEN_C = {\n  name: \"Token C\",\n  abbr: \"TC\",\n  address: \"0xC8E25055A4666F39179abE06d466F5A98423863F\",\n};\n\nexport const TOKEN_D = {\n  name: \"Token D\",\n  abbr: \"TD\",\n  address: \"0x23238098F2B4dd9Ba3bb8bc78b639dD113da697e\",\n};\n\nexport const ALL = [AUTONITY, TOKEN_A, TOKEN_B, TOKEN_C, TOKEN_D];\nexport const ALL_WITHOUT_AUTONITY = [TOKEN_A, TOKEN_B, TOKEN_C, TOKEN_D];\n","import { Contract, ethers } from \"ethers\";\nimport * as COINS from \"./constants/coins\";\n\nconst ROUTER = require(\"./build/UniswapV2Router02.json\");\nconst ERC20 = require(\"./build/ERC20.json\");\nconst FACTORY = require(\"./build/IUniswapV2Factory.json\");\nconst PAIR = require(\"./build/IUniswapV2Pair.json\");\n\nexport function getProvider() {\n  return new ethers.providers.Web3Provider(window.ethereum);\n}\n\nexport function getSigner(provider) {\n  return provider.getSigner();\n}\n\nexport function getRouter(address, signer) {\n  return new Contract(address, ROUTER.abi, signer);\n}\n\nexport function getWeth(address, signer) {\n  return new Contract(address, ERC20.abi, signer);\n}\n\nexport function getFactory(address, signer) {\n  return new Contract(address, FACTORY.abi, signer);\n}\n\nexport async function getAccount() {\n  const accounts = await window.ethereum.request({\n    method: \"eth_requestAccounts\",\n  });\n\n  return accounts[0];\n}\n\n//This function checks if a ERC20 token exists for a given address\n//    `address` - The Ethereum address to be checked\n//    `signer` - The current signer\nexport function doesTokenExist(address, signer) {\n  try {\n    return new Contract(address, ERC20.abi, signer);\n  } catch (err) {\n    return false;\n  }\n}\n\n// This function returns an object with 2 fields: `balance` which container's the account's balance in the particular token,\n// and `symbol` which is the abbreviation of the token name. To work correctly it must be provided with 4 arguments:\n//    `accountAddress` - An Ethereum address of the current user's account\n//    `address` - An Ethereum address of the token to check for (either a token or AUT)\n//    `provider` - The current provider\n//    `signer` - The current signer\nexport async function getBalanceAndSymbol(\n  accountAddress,\n  address,\n  provider,\n  signer\n) {\n  try {\n    if (address === COINS.AUTONITY.address) {\n      const balanceRaw = await provider.getBalance(accountAddress);\n\n      return {\n        balance: ethers.utils.formatEther(balanceRaw),\n        symbol: COINS.AUTONITY.abbr,\n      };\n    } else {\n      const token = new Contract(address, ERC20.abi, signer);\n      const balanceRaw = await token.balanceOf(accountAddress);\n      const symbol = await token.symbol();\n\n      return {\n        balance: ethers.utils.formatEther(balanceRaw),\n        symbol: symbol,\n      };\n    }\n  } catch (err) {\n    return false;\n  }\n}\n\n// This function swaps two particular tokens / AUT, it can handle switching from AUT to ERC20 token, ERC20 token to AUT, and ERC20 token to ERC20 token.\n// No error handling is done, so any issues can be caught with the use of .catch()\n// To work correctly, there needs to be 7 arguments:\n//    `address1` - An Ethereum address of the token to trade from (either a token or AUT)\n//    `address2` - An Ethereum address of the token to trade to (either a token or AUT)\n//    `amount` - A float or similar number representing the value of address1's token to trade\n//    `routerContract` - The router contract to carry out this trade\n//    `accountAddress` - An Ethereum address of the current user's account\n//    `signer` - The current signer\nexport async function swapTokens(\n  address1,\n  address2,\n  amount,\n  routerContract,\n  accountAddress,\n  signer\n) {\n  const tokens = [address1, address2];\n  const time = Math.floor(Date.now() / 1000) + 200000;\n  const deadline = ethers.BigNumber.from(time);\n\n  const amountIn = ethers.utils.parseEther(amount.toString());\n  const amountOut = await routerContract.callStatic.getAmountsOut(\n    amountIn,\n    tokens\n  );\n\n  const token1 = new Contract(address1, ERC20.abi, signer);\n  await token1.approve(routerContract.address, amountIn);\n\n  if (address1 === COINS.AUTONITY.address) {\n    // Eth -> Token\n    await routerContract.swapExactETHForTokens(\n      amountOut[1],\n      tokens,\n      accountAddress,\n      deadline,\n      { value: amountIn }\n    );\n  } else if (address2 === COINS.AUTONITY.address) {\n    // Token -> Eth\n    await routerContract.swapExactTokensForETH(\n      amountIn,\n      amountOut[1],\n      tokens,\n      accountAddress,\n      deadline\n    );\n  } else {\n    await routerContract.swapExactTokensForTokens(\n      amountIn,\n      amountOut[1],\n      tokens,\n      accountAddress,\n      deadline\n    );\n  }\n}\n\n//This function returns the conversion rate between two token addresses\n//    `address1` - An Ethereum address of the token to swaped from (either a token or AUT)\n//    `address2` - An Ethereum address of the token to swaped to (either a token or AUT)\n//    `amountIn` - Amount of the token at address 1 to be swaped from\n//    `routerContract` - The router contract to carry out this swap\nexport async function getAmountOut(\n  address1,\n  address2,\n  amountIn,\n  routerContract\n) {\n  try {\n    const values_out = await routerContract.getAmountsOut(\n      ethers.utils.parseEther(amountIn),\n      [address1, address2]\n    );\n    const amount_out = ethers.utils.formatEther(values_out[1]);\n    return Number(amount_out);\n  } catch {\n    return false;\n  }\n}\n\n// This function calls the pair contract to fetch the reserves stored in a the liquidity pool between the token of address1 and the token\n// of address2. Some extra logic was needed to make sure that the results were returned in the correct order, as\n// `pair.getReserves()` would always return the reserves in the same order regardless of which order the addresses were.\n//    `address1` - An Ethereum address of the token to trade from (either a ERC20 token or AUT)\n//    `address2` - An Ethereum address of the token to trade to (either a ERC20 token or AUT)\n//    `pair` - The pair contract for the two tokens\nexport async function fetchReserves(address1, address2, pair) {\n  try {\n    const reservesRaw = await pair.getReserves();\n    let results = [\n      Number(ethers.utils.formatEther(reservesRaw[0])),\n      Number(ethers.utils.formatEther(reservesRaw[1])),\n    ];\n\n    return [\n      (await pair.token0()) === address1 ? results[0] : results[1],\n      (await pair.token1()) === address2 ? results[1] : results[0],\n    ];\n  } catch (err) {\n    console.log(\"no reserves yet\");\n    return [0, 0];\n  }\n}\n\n// This function returns the reserves stored in a the liquidity pool between the token of address1 and the token\n// of address2, as well as the liquidity tokens owned by accountAddress for that pair.\n//    `address1` - An Ethereum address of the token to trade from (either a token or AUT)\n//    `address2` - An Ethereum address of the token to trade to (either a token or AUT)\n//    `factory` - The current factory\n//    `signer` - The current signer\nexport async function getReserves(\n  address1,\n  address2,\n  factory,\n  signer,\n  accountAddress\n) {\n  const pairAddress = await factory.getPair(address1, address2);\n  const pair = new Contract(pairAddress, PAIR.abi, signer);\n\n  const reservesRaw = await fetchReserves(address1, address2, pair);\n  const liquidityTokens_BN = await pair.balanceOf(accountAddress);\n  const liquidityTokens = Number(\n    ethers.utils.formatEther(liquidityTokens_BN)\n  ).toFixed(2);\n\n  return [\n    reservesRaw[0].toFixed(2),\n    reservesRaw[1].toFixed(2),\n    liquidityTokens,\n  ];\n}\n","import React from \"react\";\nimport { Fab, Grid, InputBase, makeStyles } from \"@material-ui/core\";\nimport ExpandMoreIcon from \"@material-ui/icons/ExpandMore\";\nimport PropTypes from \"prop-types\";\nimport * as COLORS from \"@material-ui/core/colors\";\n\nconst useStyles = makeStyles((theme) => ({\n  container: {\n    padding: theme.spacing(1),\n    minHeight: \"80px\",\n    backgroundColor: COLORS.grey[50],\n    borderRadius: theme.spacing(2),\n    borderColor: COLORS.grey[300],\n    borderWidth: \"1px\",\n    borderStyle: \"solid\",\n  },\n  container_input: {\n    padding: theme.spacing(1),\n    minHeight: \"68px\",\n    backgroundColor: COLORS.grey[50],\n    borderRadius: theme.spacing(2),\n    borderColor: COLORS.grey[300],\n    borderWidth: \"1px\",\n    borderStyle: \"solid\",\n    marginLeft: \"50%\",\n    textAlign: \"right\",\n  },\n  container_blank: {\n    padding: theme.spacing(1),\n    minHeight: \"80px\",\n    borderRadius: theme.spacing(2),\n  },\n  grid: {\n    height: \"60px\",\n  },\n  fab: {\n    zIndex: \"0\",\n  },\n  input: {\n    ...theme.typography.h5,\n    width: \"100%\",\n  },\n  inputBase: {\n    textAlign: \"right\",\n  },\n}));\n\nCoinField.propTypes = {\n  onClick: PropTypes.func.isRequired,\n  symbol: PropTypes.string.isRequired,\n  value: PropTypes.string.isRequired,\n  onChange: PropTypes.func,\n  activeField: PropTypes.bool.isRequired,\n};\n\nexport function RemoveLiquidityField1(props) {\n  // This component is used to selecting a coin and entering a value, the props are explained below:\n  //      onClick - (string) => void - Called when the button is clicked\n  //      symbol - string - The text displayed on the button\n  //      value - string - The value of the text field\n  //      onChange - (e) => void - Called when the text field changes\n  //      activeField - boolean - Whether text can be entered into this field or not\n\n  const classes = useStyles();\n  const { onClick, symbol, value, onChange, activeField } = props;\n  return (\n    <div className={classes.container_blank}>\n      <Grid\n        container\n        direction=\"row\"\n        justifyContent=\"space-between\"\n        alignItems=\"center\"\n        className={classes.grid}\n      >\n        {/* Button */}\n        <Grid item xs={3}>\n          <Fab\n            size=\"small\"\n            variant=\"extended\"\n            onClick={onClick}\n            className={classes.fab}\n          >\n            {symbol}\n            <ExpandMoreIcon />\n          </Fab>\n        </Grid>\n        {/* Text Field */}\n        <Grid item xs={9}>\n          <InputBase\n            value={value}\n            onChange={onChange}\n            placeholder=\"0.0\"\n            disabled={!activeField}\n            classes={{\n              root: classes.container_input,\n              input: classes.inputBase,\n            }}\n          />\n        </Grid>\n        {/* </div> */}\n      </Grid>\n    </div>\n  );\n}\n\nexport function RemoveLiquidityField2(props) {\n  // This component is used to selecting a coin and entering a value, the props are explained below:\n  //      onClick - (string) => void - Called when the button is clicked\n  //      symbol - string - The text displayed on the button\n  //      value - string - The value of the text field\n  //      onChange - (e) => void - Called when the text field changes\n  //      activeField - boolean - Whether text can be entered into this field or not\n\n  const classes = useStyles();\n  const { onClick, symbol } = props;\n\n  return (\n    <div className={classes.container_blank}>\n      <Grid\n        container\n        direction=\"row\"\n        justifyContent=\"space-between\"\n        alignItems=\"center\"\n        className={classes.grid}\n      >\n        {/* Button */}\n        <Grid item xs={3}>\n          <Fab\n            size=\"small\"\n            variant=\"extended\"\n            onClick={onClick}\n            className={classes.fab}\n          >\n            {symbol}\n            <ExpandMoreIcon />\n          </Fab>\n        </Grid>\n      </Grid>\n    </div>\n  );\n}\n\nexport default function CoinField(props) {\n  // This component is used to selecting a token and entering a value, the props are explained below:\n  //      onClick - (string) => void - Called when the button is clicked\n  //      symbol - string - The text displayed on the button\n  //      value - string - The value of the text field\n  //      onChange - (e) => void - Called when the text field changes\n  //      activeField - boolean - Whether text can be entered into this field or not\n\n  const classes = useStyles();\n  const { onClick, symbol, value, onChange, activeField } = props;\n\n  return (\n    <div className={classes.container}>\n      <Grid\n        container\n        direction=\"row\"\n        justifyContent=\"space-between\"\n        alignItems=\"center\"\n        className={classes.grid}\n      >\n        {/* Button */}\n        <Grid item xs={3}>\n          <Fab\n            size=\"small\"\n            variant=\"extended\"\n            onClick={onClick}\n            className={classes.fab}\n          >\n            {symbol}\n            <ExpandMoreIcon />\n          </Fab>\n        </Grid>\n\n        {/* Text Field */}\n        <Grid item xs={9}>\n          <InputBase\n            value={value}\n            onChange={onChange}\n            placeholder=\"0.0\"\n            disabled={!activeField}\n            classes={{ root: classes.input, input: classes.inputBase }}\n          />\n        </Grid>\n      </Grid>\n    </div>\n  );\n}\n","import React from \"react\";\nimport { ButtonBase, Grid, makeStyles, Typography } from \"@material-ui/core\";\nimport PropTypes from \"prop-types\";\nimport * as COLORS from \"@material-ui/core/colors\";\n\nconst useStyles = makeStyles((theme) => ({\n  button: {\n    width: \"100%\",\n    paddingTop: theme.spacing(0.5),\n    paddingBottom: theme.spacing(0.5),\n    \"&:hover, &$focusVisible\": {\n      backgroundColor: COLORS.grey[200],\n    },\n  },\n  coinName: {\n    opacity: 0.6,\n  },\n}));\n\nCoinButton.propTypes = {\n  coinName: PropTypes.string.isRequired,\n  coinAbbr: PropTypes.string.isRequired,\n  onClick: PropTypes.func.isRequired,\n};\n\nexport default function CoinButton(props) {\n  const { coinName, coinAbbr, onClick, ...other } = props;\n  const classes = useStyles();\n\n  return (\n    <ButtonBase focusRipple className={classes.button} onClick={onClick}>\n      <Grid container direction=\"column\">\n        <Typography variant=\"h6\">{coinAbbr}</Typography>\n        <Typography variant=\"body2\" className={classes.coinName}>\n          {coinName}\n        </Typography>\n      </Grid>\n    </ButtonBase>\n  );\n}\n","import React from \"react\";\nimport {\n  Button,\n  Dialog,\n  Grid,\n  IconButton,\n  makeStyles,\n  TextField,\n  Typography,\n  withStyles,\n} from \"@material-ui/core\";\nimport MuiDialogTitle from \"@material-ui/core/DialogTitle\";\nimport MuiDialogActions from \"@material-ui/core/DialogActions\";\nimport CloseIcon from \"@material-ui/icons/Close\";\nimport CoinButton from \"./CoinButton\";\nimport { doesTokenExist } from \"../ethereumFunctions\";\nimport PropTypes from \"prop-types\";\nimport * as COLORS from \"@material-ui/core/colors\";\n\nconst styles = (theme) => ({\n  dialogContainer: {\n    borderRadius: theme.spacing(2),\n  },\n  titleSection: {\n    padding: theme.spacing(2),\n  },\n  titleText: {\n    alignSelf: \"center\",\n  },\n  hr: {\n    margin: 0,\n  },\n  address: {\n    paddingLeft: theme.spacing(2.5),\n    paddingRight: theme.spacing(2.5),\n    paddingBottom: theme.spacing(2),\n  },\n  coinList: {\n    height: \"300px\",\n    overflowY: \"scroll\",\n  },\n  coinContainer: {\n    paddingLeft: theme.spacing(0.5),\n    paddingRight: theme.spacing(0.5),\n    paddingTop: theme.spacing(2),\n    marginTop: theme.spacing(2),\n    overflow: \"hidden\",\n  },\n});\n\nconst useStyles = makeStyles(styles);\n\n// This is a modified version of MaterialUI's DialogTitle component, I've added a close button in the top right corner\nconst DialogTitle = withStyles(styles)((props) => {\n  const { children, classes, onClose, ...other } = props;\n  return (\n    <MuiDialogTitle\n      disableTypography\n      className={classes.titleSection}\n      {...other}\n    >\n      <Grid\n        container\n        direction=\"row\"\n        justifyContent=\"space-between\"\n        alignContent=\"center\"\n      >\n        <Typography variant=\"h6\" className={classes.titleText}>\n          {children}\n        </Typography>\n        {onClose ? (\n          <IconButton aria-label=\"close\" onClick={onClose}>\n            <CloseIcon />\n          </IconButton>\n        ) : null}\n      </Grid>\n    </MuiDialogTitle>\n  );\n});\n\n// This is a modified version of MaterialUI's DialogActions component, the color has been changed by modifying the CSS\nconst DialogActions = withStyles((theme) => ({\n  root: {\n    margin: 0,\n    padding: theme.spacing(1),\n    backgroundColor: COLORS.grey[100],\n  },\n}))(MuiDialogActions);\n\nCoinDialog.propTypes = {\n  onClose: PropTypes.func.isRequired,\n  open: PropTypes.bool.isRequired,\n  coins: PropTypes.array.isRequired,\n};\n\nexport default function CoinDialog(props) {\n  // The CoinDialog component will display a dialog window on top of the page, allowing a user to select a coin\n  // from a list (list can be found in 'src/constants/coins.js') or enter an address into a search field. Any entered\n  // addresses will first be validated to make sure they exist.\n  // When the dialog closes, it will call the `onClose` prop with 1 argument which will either be undefined (if the\n  // user closes the dialog without selecting anything), or will be a string containing the address of a coin.\n\n  const classes = useStyles();\n  const { onClose, open, coins, signer, ...others } = props;\n\n  const [address, setAddress] = React.useState(\"\");\n  const [error, setError] = React.useState(\"\");\n\n  // Called when the user tries to input a custom address, this function will validate the address and will either\n  // then close the dialog and return the validated address, or will display an error.\n  const submit = () => {\n    if (doesTokenExist(address, signer)) {\n      exit(address);\n    } else {\n      setError(\"This address is not valid\");\n    }\n  };\n\n  // Resets any fields in the dialog (in case it's opened in the future) and calls the `onClose` prop\n  const exit = (value) => {\n    setError(\"\");\n    setAddress(\"\");\n    onClose(value);\n  };\n\n  return (\n    <Dialog\n      open={open}\n      onClose={() => exit(undefined)}\n      fullWidth\n      maxWidth=\"sm\"\n      classes={{ paper: classes.dialogContainer }}\n    >\n      <DialogTitle onClose={() => exit(undefined)}>Select Coin</DialogTitle>\n\n      <hr className={classes.hr} />\n\n      <div className={classes.coinContainer}>\n        <Grid container direction=\"column\" spacing={1} alignContent=\"center\">\n          <TextField\n            value={address}\n            onChange={(e) => setAddress(e.target.value)}\n            variant=\"outlined\"\n            placeholder=\"Paste Address\"\n            error={error !== \"\"}\n            helperText={error}\n            fullWidth\n            className={classes.address}\n          />\n\n          <hr className={classes.hr} />\n\n          <Grid item className={classes.coinList}>\n            <Grid container direction=\"column\">\n              {/* Maps all of the tokens in the constants file to buttons */}\n              {coins.map((coin, index) => (\n                <Grid item key={index} xs={12}>\n                  <CoinButton\n                    coinName={coin.name}\n                    coinAbbr={coin.abbr}\n                    onClick={() => exit(coin.address)}\n                  />\n                </Grid>\n              ))}\n            </Grid>\n          </Grid>\n        </Grid>\n      </div>\n\n      <hr className={classes.hr} />\n\n      <DialogActions>\n        <Button autoFocus onClick={submit} color=\"primary\">\n          Enter\n        </Button>\n      </DialogActions>\n    </Dialog>\n  );\n}\n","import React from \"react\";\nimport { Button, CircularProgress, makeStyles } from \"@material-ui/core\";\nimport green from \"@material-ui/core/colors/green\";\nimport red from \"@material-ui/core/colors/red\";\n\nconst useStyles = makeStyles((theme) => ({\n  wrapper: {\n    margin: 0,\n    position: \"relative\",\n  },\n  progress: {\n    color: green[500],\n    position: \"absolute\",\n    top: \"50%\",\n    left: \"50%\",\n    marginTop: -12,\n    marginLeft: -12,\n  },\n}));\n\nexport default function LoadingButton(props) {\n  const classes = useStyles();\n  const { children, loading, valid, success, fail, onClick, ...other } = props;\n  return (\n    <div className={classes.wrapper}>\n      <Button\n        variant=\"contained\"\n        color=\"primary\"\n        fullWidth\n        disabled={loading || !valid}\n        type=\"submit\"\n        onClick={onClick}\n        {...other}\n      >\n        {children}\n      </Button>\n      {loading && <CircularProgress size={24} className={classes.progress} />}\n    </div>\n  );\n}\n","import React, { useEffect } from \"react\";\nimport {\n  Container,\n  Grid,\n  IconButton,\n  makeStyles,\n  Paper,\n  Typography,\n} from \"@material-ui/core\";\nimport SwapVerticalCircleIcon from \"@material-ui/icons/SwapVerticalCircle\";\nimport { useSnackbar } from \"notistack\";\nimport LoopIcon from \"@material-ui/icons/Loop\";\nimport {\n  getAccount,\n  getFactory,\n  getProvider,\n  getRouter,\n  getSigner,\n  getAmountOut,\n  getBalanceAndSymbol,\n  getWeth,\n  swapTokens,\n  getReserves,\n} from \"../ethereumFunctions\";\nimport CoinField from \"./CoinField\";\nimport CoinDialog from \"./CoinDialog\";\nimport LoadingButton from \"../Components/LoadingButton\";\nimport * as COINS from \"../constants/coins\";\n\nconst styles = (theme) => ({\n  paperContainer: {\n    borderRadius: theme.spacing(2),\n    padding: theme.spacing(1),\n    paddingBottom: theme.spacing(3),\n  },\n  switchButton: {\n    zIndex: 1,\n    margin: \"-16px\",\n    padding: theme.spacing(0.5),\n  },\n  fullWidth: {\n    width: \"100%\",\n  },\n  title: {\n    textAlign: \"center\",\n    padding: theme.spacing(0.5),\n    marginBottom: theme.spacing(1),\n  },\n  hr: {\n    width: \"100%\",\n  },\n  balance: {\n    padding: theme.spacing(1),\n    overflow: \"wrap\",\n    textAlign: \"center\",\n  },\n  footer: {\n    marginTop: \"285px\",\n  },\n});\n\nconst useStyles = makeStyles(styles);\n\nfunction CoinSwapper(props) {\n  const classes = useStyles();\n  const { enqueueSnackbar } = useSnackbar();\n\n  // Stores information for the Autonity Network\n\n  const [provider, setProvider] = React.useState(getProvider());\n  const [signer, setSigner] = React.useState(getSigner(provider));\n  const [account, setAccount] = React.useState(undefined); // This is populated in a react hook\n  const [router, setRouter] = React.useState(\n    getRouter(\"0x4489D87C8440B19f11d63FA2246f943F492F3F5F\", signer)\n  );\n  const [weth, setWeth] = React.useState(\n    getWeth(\"0x3f0D1FAA13cbE43D662a37690f0e8027f9D89eBF\", signer)\n  );\n  const [factory, setFactory] = React.useState(\n    getFactory(\"0x4EDFE8706Cefab9DCd52630adFFd00E9b93FF116\", signer)\n  );\n\n  // Stores a record of whether their respective dialog window is open\n  const [dialog1Open, setDialog1Open] = React.useState(false);\n  const [dialog2Open, setDialog2Open] = React.useState(false);\n\n  // Stores data about their respective coin\n  const [coin1, setCoin1] = React.useState({\n    address: undefined,\n    symbol: undefined,\n    balance: undefined,\n  });\n  const [coin2, setCoin2] = React.useState({\n    address: undefined,\n    symbol: undefined,\n    balance: undefined,\n  });\n\n  // Stores the current reserves in the liquidity pool between coin1 and coin2\n  const [reserves, setReserves] = React.useState([\"0.0\", \"0.0\"]);\n\n  // Stores the current value of their respective text box\n  const [field1Value, setField1Value] = React.useState(\"\");\n  const [field2Value, setField2Value] = React.useState(\"\");\n\n  // Controls the loading button\n  const [loading, setLoading] = React.useState(false);\n\n  // Switches the top and bottom coins, this is called when users hit the swap button or select the opposite\n  // token in the dialog (e.g. if coin1 is TokenA and the user selects TokenB when choosing coin2)\n  const switchFields = () => {\n    setCoin1(coin2);\n    setCoin2(coin1);\n    setField1Value(field2Value);\n    setReserves(reserves.reverse());\n  };\n\n  // These functions take an HTML event, pull the data out and puts it into a state variable.\n  const handleChange = {\n    field1: (e) => {\n      setField1Value(e.target.value);\n    },\n  };\n\n  // Turns the account's balance into something nice and readable\n  const formatBalance = (balance, symbol) => {\n    if (balance && symbol)\n      return parseFloat(balance).toPrecision(8) + \" \" + symbol;\n    else return \"0.0\";\n  };\n\n  // Turns the coin's reserves into something nice and readable\n  const formatReserve = (reserve, symbol) => {\n    if (reserve && symbol) return reserve + \" \" + symbol;\n    else return \"0.0\";\n  };\n\n  // Determines whether the button should be enabled or not\n  const isButtonEnabled = () => {\n    let validFloat = new RegExp(\"^[0-9]*[.,]?[0-9]*$\");\n\n    // If both coins have been selected, and a valid float has been entered which is less than the user's balance, then return true\n    return (\n      coin1.address &&\n      coin2.address &&\n      validFloat.test(field1Value) &&\n      parseFloat(field1Value) <= coin1.balance\n    );\n  };\n\n  // Called when the dialog window for coin1 exits\n  const onToken1Selected = (address) => {\n    // Close the dialog window\n    setDialog1Open(false);\n\n    // If the user inputs the same token, we want to switch the data in the fields\n    if (address === coin2.address) {\n      switchFields();\n    }\n    // We only update the values if the user provides a token\n    else if (address) {\n      // Getting some token data is async, so we need to wait for the data to return, hence the promise\n      getBalanceAndSymbol(account, address, provider, signer).then((data) => {\n        setCoin1({\n          address: address,\n          symbol: data.symbol,\n          balance: data.balance,\n        });\n      });\n    }\n  };\n\n  // Called when the dialog window for coin2 exits\n  const onToken2Selected = (address) => {\n    // Close the dialog window\n    setDialog2Open(false);\n\n    // If the user inputs the same token, we want to switch the data in the fields\n    if (address === coin1.address) {\n      switchFields();\n    }\n    // We only update the values if the user provides a token\n    else if (address) {\n      // Getting some token data is async, so we need to wait for the data to return, hence the promise\n      getBalanceAndSymbol(account, address, provider, signer).then((data) => {\n        setCoin2({\n          address: address,\n          symbol: data.symbol,\n          balance: data.balance,\n        });\n      });\n    }\n  };\n\n  // Calls the swapTokens Ethereum function to make the swap, then resets nessicary state variables\n  const swap = () => {\n    console.log(\"Attempting to swap tokens...\");\n    setLoading(true);\n\n    swapTokens(\n      coin1.address,\n      coin2.address,\n      parseFloat(field1Value),\n      router,\n      account,\n      signer\n    )\n      .then(() => {\n        setLoading(false);\n\n        // If the transaction was successful, we clear to input to make sure the user doesn't accidental redo the transfer\n        setField1Value(\"\");\n        enqueueSnackbar(\"Transaction Successful\", { variant: \"success\" });\n      })\n      .catch((e) => {\n        setLoading(false);\n        enqueueSnackbar(\"Transaction Failed (\" + e.message + \")\", {\n          variant: \"error\",\n          autoHideDuration: 10000,\n        });\n      });\n  };\n\n  // The lambdas within these useEffects will be called when a particular dependency is updated. These dependencies\n  // are defined in the array of variables passed to the function after the lambda expression. If there are no dependencies\n  // the lambda will only ever be called when the component mounts. These are very useful for calculating new values\n  // after a particular state change, for example, calculating the new exchange rate whenever the addresses\n  // of the two coins change.\n\n  // This hook is called when either of the state variables `coin1.address` or `coin2.address` change.\n  // This means that when the user selects a different coin to convert between, or the coins are swapped,\n  // the new reserves will be calculated.\n  useEffect(() => {\n    console.log(\n      \"Trying to get Reserves between:\\n\" + coin1.address + \"\\n\" + coin2.address\n    );\n\n    if (coin1.address && coin2.address) {\n      getReserves(coin1.address, coin2.address, factory, signer, account).then(\n        (data) => setReserves(data)\n      );\n    }\n  }, [coin1.address, coin2.address, account, factory, router, signer]);\n\n  // This hook is called when either of the state variables `field1Value` `coin1.address` or `coin2.address` change.\n  // It attempts to calculate and set the state variable `field2Value`\n  // This means that if the user types a new value into the conversion box or the conversion rate changes,\n  // the value in the output box will change.\n  useEffect(() => {\n    if (isNaN(parseFloat(field1Value))) {\n      setField2Value(\"\");\n    } else if (field1Value && coin1.address && coin2.address) {\n      getAmountOut(coin1.address, coin2.address, field1Value, router).then(\n        (amount) => setField2Value(amount.toFixed(7))\n      );\n    } else {\n      setField2Value(\"\");\n    }\n  }, [field1Value, coin1.address, coin2.address]);\n\n  // This hook creates a timeout that will run every ~10 seconds, it's role is to check if the user's balance has\n  // updated has changed. This allows them to see when a transaction completes by looking at the balance output.\n  useEffect(() => {\n    const coinTimeout = setTimeout(() => {\n      console.log(\"Checking balances...\");\n\n      if (coin1.address && coin2.address && account) {\n        getReserves(\n          coin1.address,\n          coin2.address,\n          factory,\n          signer,\n          account\n        ).then((data) => setReserves(data));\n      }\n\n      if (coin1 && account) {\n        getBalanceAndSymbol(account, coin1.address, provider, signer).then(\n          (data) => {\n            setCoin1({\n              ...coin1,\n              balance: data.balance,\n            });\n          }\n        );\n      }\n      if (coin2 && account) {\n        getBalanceAndSymbol(account, coin2.address, provider, signer).then(\n          (data) => {\n            setCoin2({\n              ...coin2,\n              balance: data.balance,\n            });\n          }\n        );\n      }\n    }, 10000);\n\n    return () => clearTimeout(coinTimeout);\n  });\n\n  // This hook will run when the component first mounts, it can be useful to put logic to populate variables here\n  useEffect(() => {\n    getAccount().then((account) => {\n      setAccount(account);\n    });\n  });\n\n  return (\n    <div>\n      {/* Dialog Windows */}\n      <CoinDialog\n        open={dialog1Open}\n        onClose={onToken1Selected}\n        coins={COINS.ALL}\n        signer={signer}\n      />\n      <CoinDialog\n        open={dialog2Open}\n        onClose={onToken2Selected}\n        coins={COINS.ALL}\n        signer={signer}\n      />\n\n      {/* Coin Swapper */}\n      <Container maxWidth=\"xs\">\n        <Paper className={classes.paperContainer}>\n          <Typography variant=\"h5\" className={classes.title}>\n            Swap Coins\n          </Typography>\n\n          <Grid container direction=\"column\" alignItems=\"center\" spacing={2}>\n            <Grid item xs={12} className={classes.fullWidth}>\n              <CoinField\n                activeField={true}\n                value={field1Value}\n                onClick={() => setDialog1Open(true)}\n                onChange={handleChange.field1}\n                symbol={coin1.symbol !== undefined ? coin1.symbol : \"Select\"}\n              />\n            </Grid>\n\n            <IconButton onClick={switchFields} className={classes.switchButton}>\n              <SwapVerticalCircleIcon fontSize=\"medium\" />\n            </IconButton>\n\n            <Grid item xs={12} className={classes.fullWidth}>\n              <CoinField\n                activeField={false}\n                value={field2Value}\n                onClick={() => setDialog2Open(true)}\n                symbol={coin2.symbol !== undefined ? coin2.symbol : \"Select\"}\n              />\n            </Grid>\n\n            <hr className={classes.hr} />\n\n            {/* Balance Display */}\n            <Typography variant=\"h6\">Your Balances</Typography>\n            <Grid container direction=\"row\" justifyContent=\"space-between\">\n              <Grid item xs={6}>\n                <Typography variant=\"body1\" className={classes.balance}>\n                  {formatBalance(coin1.balance, coin1.symbol)}\n                </Typography>\n              </Grid>\n              <Grid item xs={6}>\n                <Typography variant=\"body1\" className={classes.balance}>\n                  {formatBalance(coin2.balance, coin2.symbol)}\n                </Typography>\n              </Grid>\n            </Grid>\n\n            <hr className={classes.hr} />\n\n            {/* Reserves Display */}\n            <Typography variant=\"h6\">Reserves</Typography>\n            <Grid container direction=\"row\" justifyContent=\"space-between\">\n              <Grid item xs={6}>\n                <Typography variant=\"body1\" className={classes.balance}>\n                  {formatReserve(reserves[0], coin1.symbol)}\n                </Typography>\n              </Grid>\n              <Grid item xs={6}>\n                <Typography variant=\"body1\" className={classes.balance}>\n                  {formatReserve(reserves[1], coin2.symbol)}\n                </Typography>\n              </Grid>\n            </Grid>\n\n            <hr className={classes.hr} />\n\n            <LoadingButton\n              loading={loading}\n              valid={isButtonEnabled()}\n              success={false}\n              fail={false}\n              onClick={swap}\n            >\n              <LoopIcon />\n              Swap\n            </LoadingButton>\n          </Grid>\n        </Paper>\n      </Container>\n\n      <Grid\n        container\n        className={classes.footer}\n        direction=\"row\"\n        justifyContent=\"center\"\n        alignItems=\"flex-end\"\n      >\n        <p>\n          Clearmatics Autonity Uniswap | Get AUT for use in the bakerloo testnet{\" \"}\n          <a href=\"https://faucet.bakerloo.autonity.network/\">here</a>\n        </p>\n      </Grid>\n    </div>\n  );\n}\n\nexport default CoinSwapper;\n","import { Contract, ethers } from \"ethers\";\nimport * as COINS from \"../constants/coins\";\n\nimport { fetchReserves } from \"../ethereumFunctions\";\n\nconst ERC20 = require(\"../build/ERC20.json\");\nconst PAIR = require(\"../build/IUniswapV2Pair.json\");\n\n// Function used to add Liquidity to any pair of tokens or token-AUT\n// To work correctly, there needs to be 9 arguments:\n//    `address1` - An Ethereum address of the coin to add from (either a token or AUT)\n//    `address2` - An Ethereum address of the coin to add to (either a token or AUT)\n//    `amount1` - A float or similar number representing the value of address1's coin to add\n//    `amount2` - A float or similar number representing the value of address2's coin to add\n//    `amount1Min` - A float or similar number representing the minimum of address1's coin to add\n//    `amount2Min` - A float or similar number representing the minimum of address2's coin to add\n//    `routerContract` - The router contract to carry out this trade\n//    `accountAddress` - An Ethereum address of the current user's account\n//    `provider` - The current provider\n//    `signer` - The current signer\nexport async function addLiquidity(\n  address1,\n  address2,\n  amount1,\n  amount2,\n  amount1min,\n  amount2min,\n  routerContract,\n  account,\n  signer\n) {\n  const amountIn1 = ethers.utils.parseEther(amount1.toString());\n  const amountIn2 = ethers.utils.parseEther(amount2.toString());\n\n  const amount1Min = ethers.utils.parseEther(amount1min.toString());\n  const amount2Min = ethers.utils.parseEther(amount2min.toString());\n\n  const time = Math.floor(Date.now() / 1000) + 200000;\n  const deadline = ethers.BigNumber.from(time);\n\n  const token1 = new Contract(address1, ERC20.abi, signer);\n  const token2 = new Contract(address2, ERC20.abi, signer);\n\n  await token1.approve(routerContract.address, amountIn1);\n  await token2.approve(routerContract.address, amountIn2);\n\n  console.log([\n    address1,\n    address2,\n    Number(amountIn1),\n    Number(amountIn2),\n    Number(amount1Min),\n    Number(amount2Min),\n    account,\n    deadline,\n  ]);\n\n  if (address1 === COINS.AUTONITY.address) {\n    // Eth + Token\n    await routerContract.addLiquidityETH(\n      address2,\n      amountIn2,\n      amount2Min,\n      amount1Min,\n      account,\n      deadline,\n      { value: amountIn1 }\n    );\n  } else if (address2 === COINS.AUTONITY.address) {\n    // Token + Eth\n    await routerContract.addLiquidityETH(\n      address1,\n      amountIn1,\n      amount1Min,\n      amount2Min,\n      account,\n      deadline,\n      { value: amountIn2 }\n    );\n  } else {\n    // Token + Token\n    await routerContract.addLiquidity(\n      address1,\n      address2,\n      amountIn1,\n      amountIn2,\n      amount1Min,\n      amount2Min,\n      account,\n      deadline\n    );\n  }\n}\n\n// Function used to remove Liquidity from any pair of tokens or token-AUT\n// To work correctly, there needs to be 9 arguments:\n//    `address1` - An Ethereum address of the coin to recieve (either a token or AUT)\n//    `address2` - An Ethereum address of the coin to recieve (either a token or AUT)\n//    `liquidity_tokens` - A float or similar number representing the value of liquidity tokens you will burn to get tokens back\n//    `amount1Min` - A float or similar number representing the minimum of address1's coin to recieve\n//    `amount2Min` - A float or similar number representing the minimum of address2's coin to recieve\n//    `routerContract` - The router contract to carry out this trade\n//    `accountAddress` - An Ethereum address of the current user's account\n//    `provider` - The current provider\n//    `signer` - The current signer\nexport async function removeLiquidity(\n  address1,\n  address2,\n  liquidity_tokens,\n  amount1min,\n  amount2min,\n  routerContract,\n  account,\n  signer,\n  factory\n) {\n  const liquidity = ethers.utils.parseEther(liquidity_tokens.toString());\n\n  const amount1Min = ethers.utils.parseEther(amount1min.toString());\n  const amount2Min = ethers.utils.parseEther(amount2min.toString());\n\n  const time = Math.floor(Date.now() / 1000) + 200000;\n  const deadline = ethers.BigNumber.from(time);\n\n  const pairAddress = await factory.getPair(address1, address2);\n  const pair = new Contract(pairAddress, PAIR.abi, signer);\n\n  await pair.approve(routerContract.address, liquidity);\n\n  console.log([\n    address1,\n    address2,\n    Number(liquidity),\n    Number(amount1Min),\n    Number(amount2Min),\n    account,\n    deadline,\n  ]);\n\n  if (address1 === COINS.AUTONITY.address) {\n    // Eth + Token\n    await routerContract.removeLiquidityETH(\n      address2,\n      liquidity,\n      amount2Min,\n      amount1Min,\n      account,\n      deadline\n    );\n  } else if (address2 === COINS.AUTONITY.address) {\n    // Token + Eth\n    await routerContract.removeLiquidityETH(\n      address1,\n      liquidity,\n      amount1Min,\n      amount2Min,\n      account,\n      deadline\n    );\n  } else {\n    // Token + Token\n    await routerContract.removeLiquidity(\n      address1,\n      address2,\n      liquidity,\n      amount1Min,\n      amount2Min,\n      account,\n      deadline\n    );\n  }\n}\n\nconst quote = (amount1, reserve1, reserve2) => {\n  const amount2 = amount1 * (reserve2 / reserve1);\n  const amountOut = Math.sqrt(amount2 * amount1);\n  return [amount2, amountOut];\n};\n\n// Function used to get a quote of the liquidity addition\n//    `address1` - An Ethereum address of the coin to recieve (either a token or AUT)\n//    `address2` - An Ethereum address of the coin to recieve (either a token or AUT)\n//    `amountA_desired` - The prefered value of the first token that the user would like to deploy as liquidity\n//    `amountB_desired` - The prefered value of the second token that the user would like to deploy as liquidity\n//    `factory` - The current factory\n//    `signer` - The current signer\n\nexport async function quoteAddLiquidity(\n  address1,\n  address2,\n  amountADesired,\n  amountBDesired,\n  factory,\n  signer\n) {\n  const pairAddress = await factory.getPair(address1, address2);\n  const pair = new Contract(pairAddress, PAIR.abi, signer);\n\n  const reservesRaw = await fetchReserves(address1, address2, pair); // Returns the reserves already formated as ethers\n  const reserveA = reservesRaw[0];\n  const reserveB = reservesRaw[1];\n\n  if (reserveA === 0 && reserveB === 0) {\n    let amountOut = Math.sqrt(reserveA * reserveB);\n    return [\n      amountADesired.toString(),\n      amountBDesired.toString(),\n      amountOut.toString(),\n    ];\n  } else {\n    let [amountBOptimal, amountOut] = quote(amountADesired, reserveA, reserveB);\n    if (amountBOptimal <= amountBDesired) {\n      return [\n        amountADesired.toString(),\n        amountBOptimal.toString(),\n        amountOut.toString(),\n      ];\n    } else {\n      let [amountAOptimal, amountOut] = quote(\n        amountBDesired,\n        reserveB,\n        reserveA\n      );\n      console.log(amountAOptimal, amountOut);\n      return [\n        amountAOptimal.toString(),\n        amountBDesired.toString(),\n        amountOut.toString(),\n      ];\n    }\n  }\n}\n\n// Function used to get a quote of the liquidity removal\n//    `address1` - An Ethereum address of the coin to recieve (either a token or AUT)\n//    `address2` - An Ethereum address of the coin to recieve (either a token or AUT)\n//    `liquidity` - The amount of liquidity tokens the user will burn to get their tokens back\n//    `factory` - The current factory\n//    `signer` - The current signer\n\nexport async function quoteRemoveLiquidity(\n  address1,\n  address2,\n  liquidity,\n  factory,\n  signer\n) {\n  const pairAddress = await factory.getPair(address1, address2);\n  console.log(\"pair address\", pairAddress);\n  const pair = new Contract(pairAddress, PAIR.abi, signer);\n\n  const reservesRaw = await fetchReserves(address1, address2, pair); // Returns the reserves already formated as ethers\n  const reserveA = reservesRaw[0];\n  const reserveB = reservesRaw[1];\n\n  const feeOn =\n    (await factory.feeTo()) !== 0x0000000000000000000000000000000000000000;\n\n  const _kLast = await pair.kLast();\n  const kLast = Number(ethers.utils.formatEther(_kLast));\n\n  const _totalSupply = await pair.totalSupply();\n  let totalSupply = Number(ethers.utils.formatEther(_totalSupply));\n\n  if (feeOn && kLast > 0) {\n    const feeLiquidity =\n      (totalSupply * (Math.sqrt(reserveA * reserveB) - Math.sqrt(kLast))) /\n      (5 * Math.sqrt(reserveA * reserveB) + Math.sqrt(kLast));\n    totalSupply = totalSupply + feeLiquidity;\n  }\n\n  const Aout = (reserveA * liquidity) / totalSupply;\n  const Bout = (reserveB * liquidity) / totalSupply;\n\n  return [liquidity, Aout, Bout];\n}\n","import React, { useEffect } from \"react\";\nimport { Grid, makeStyles, Paper, Typography } from \"@material-ui/core\";\nimport AccountBalanceIcon from \"@material-ui/icons/AccountBalance\";\nimport { useSnackbar } from \"notistack\";\nimport {\n  getAccount,\n  getFactory,\n  getProvider,\n  getRouter,\n  getSigner,\n  getBalanceAndSymbol,\n  getWeth,\n  getReserves,\n} from \"../ethereumFunctions\";\n\nimport { addLiquidity, quoteAddLiquidity } from \"./LiquidityFunctions\";\n\nimport CoinField from \"../CoinSwapper/CoinField\";\nimport CoinDialog from \"../CoinSwapper/CoinDialog\";\nimport LoadingButton from \"../Components/LoadingButton\";\nimport * as COINS from \"../constants/coins\";\n\nconst styles = (theme) => ({\n  paperContainer: {\n    borderRadius: theme.spacing(2),\n    padding: theme.spacing(2),\n    paddingBottom: theme.spacing(3),\n    width: \"40%\",\n    overflow: \"wrap\",\n    background: \"linear-gradient(45deg, #ff0000 30%, #FF8E53 90%)\",\n    color: \"white\",\n  },\n  fullWidth: {\n    width: \"100%\",\n  },\n  values: {\n    width: \"50%\",\n  },\n  title: {\n    textAlign: \"center\",\n    padding: theme.spacing(0.5),\n    marginBottom: theme.spacing(1),\n  },\n  hr: {\n    width: \"100%\",\n  },\n  balance: {\n    padding: theme.spacing(1),\n    overflow: \"wrap\",\n    textAlign: \"center\",\n  },\n  buttonIcon: {\n    marginRight: theme.spacing(1),\n    padding: theme.spacing(0.4),\n  },\n});\n\nconst useStyles = makeStyles(styles);\n\nfunction LiquidityDeployer(props) {\n  const classes = useStyles();\n  const { enqueueSnackbar } = useSnackbar();\n\n  // Stores information for the Autonity Network\n  const [provider, setProvider] = React.useState(getProvider());\n  const [signer, setSigner] = React.useState(getSigner(provider));\n  const [account, setAccount] = React.useState(undefined); // This is populated in a react hook\n  const [router, setRouter] = React.useState(\n    getRouter(\"0x4489D87C8440B19f11d63FA2246f943F492F3F5F\", signer)\n  );\n  const [weth, setWeth] = React.useState(\n    getWeth(\"0x3f0D1FAA13cbE43D662a37690f0e8027f9D89eBF\", signer)\n  );\n  const [factory, setFactory] = React.useState(\n    getFactory(\"0x4EDFE8706Cefab9DCd52630adFFd00E9b93FF116\", signer)\n  );\n\n  // Stores a record of whether their respective dialog window is open\n  const [dialog1Open, setDialog1Open] = React.useState(false);\n  const [dialog2Open, setDialog2Open] = React.useState(false);\n\n  // Stores data about their respective coin\n  const [coin1, setCoin1] = React.useState({\n    address: undefined,\n    symbol: undefined,\n    balance: undefined,\n  });\n  const [coin2, setCoin2] = React.useState({\n    address: undefined,\n    symbol: undefined,\n    balance: undefined,\n  });\n\n  // Stores the current reserves in the liquidity pool between coin1 and coin2\n  const [reserves, setReserves] = React.useState([\"0.0\", \"0.0\"]);\n  const [liquidity_tokens, setLiquidity_tokens] = React.useState(\"\");\n\n  // Stores the current value of their respective text box\n  const [field1Value, setField1Value] = React.useState(\"\");\n  const [field2Value, setField2Value] = React.useState(\"\");\n\n  // Controls the loading button\n  const [loading, setLoading] = React.useState(false);\n\n  // Used when getting a quote of liquidity\n  const [liquidity_out, setLiquidity_out] = React.useState([0, 0, 0]);\n\n  // Switches the top and bottom coins, this is called when users hit the swap button or select the opposite\n  // token in the dialog (e.g. if coin1 is TokenA and the user selects TokenB when choosing coin2)\n  const switchFields = () => {\n    let oldField1Value = field1Value;\n    let oldField2Value = field2Value;\n\n    setCoin1(coin2);\n    setCoin2(coin1);\n    setField1Value(oldField2Value);\n    setField2Value(oldField1Value);\n    setReserves(reserves.reverse());\n  };\n\n  // These functions take an HTML event, pull the data out and puts it into a state variable.\n  const handleChange = {\n    field1: (e) => {\n      setField1Value(e.target.value);\n    },\n    field2: (e) => {\n      setField2Value(e.target.value);\n    },\n  };\n\n  // Turns the account's balance into something nice and readable\n  const formatBalance = (balance, symbol) => {\n    if (balance && symbol)\n      return parseFloat(balance).toPrecision(8) + \" \" + symbol;\n    else return \"0.0\";\n  };\n\n  // Turns the coin's reserves into something nice and readable\n  const formatReserve = (reserve, symbol) => {\n    if (reserve && symbol) return reserve + \" \" + symbol;\n    else return \"0.0\";\n  };\n\n  // Determines whether the button should be enabled or not\n  const isButtonEnabled = () => {\n    let validFloat = new RegExp(\"^[0-9]*[.,]?[0-9]*$\");\n\n    // If both coins have been selected, and a valid float has been entered for both, which are less than the user's balances, then return true\n    return (\n      coin1.address &&\n      coin2.address &&\n      validFloat.test(field1Value) &&\n      validFloat.test(field2Value) &&\n      parseFloat(field1Value) <= coin1.balance &&\n      parseFloat(field2Value) <= coin2.balance\n    );\n  };\n\n  const deploy = () => {\n    console.log(\"Attempting to deploy liquidity...\");\n    setLoading(true);\n\n    addLiquidity(\n      coin1.address,\n      coin2.address,\n      parseFloat(field1Value),\n      parseFloat(field2Value),\n      0,\n      0,\n      router,\n      account,\n      signer\n    )\n      .then(() => {\n        setLoading(false);\n\n        // If the transaction was successful, we clear to input to make sure the user doesn't accidental redo the transfer\n        setField1Value(\"\");\n        setField2Value(\"\");\n        enqueueSnackbar(\"Deployment Successful\", { variant: \"success\" });\n      })\n      .catch((e) => {\n        setLoading(false);\n        enqueueSnackbar(\"Deployment Failed (\" + e.message + \")\", {\n          variant: \"error\",\n          autoHideDuration: 10000,\n        });\n      });\n  };\n\n  // Called when the dialog window for coin1 exits\n  const onToken1Selected = (address) => {\n    // Close the dialog window\n    setDialog1Open(false);\n\n    // If the user inputs the same token, we want to switch the data in the fields\n    if (address === coin2.address) {\n      switchFields();\n    }\n    // We only update the values if the user provides a token\n    else if (address) {\n      // Getting some token data is async, so we need to wait for the data to return, hence the promise\n      getBalanceAndSymbol(account, address, provider, signer).then((data) => {\n        setCoin1({\n          address: address,\n          symbol: data.symbol,\n          balance: data.balance,\n        });\n      });\n    }\n  };\n\n  // Called when the dialog window for coin2 exits\n  const onToken2Selected = (address) => {\n    // Close the dialog window\n    setDialog2Open(false);\n\n    // If the user inputs the same token, we want to switch the data in the fields\n    if (address === coin1.address) {\n      switchFields();\n    }\n    // We only update the values if the user provides a token\n    else if (address) {\n      // Getting some token data is async, so we need to wait for the data to return, hence the promise\n      getBalanceAndSymbol(account, address, provider, signer).then((data) => {\n        setCoin2({\n          address: address,\n          symbol: data.symbol,\n          balance: data.balance,\n        });\n      });\n    }\n  };\n\n  useEffect(() => {\n    // This hook runs whenever the coins change, it will attempt to fetch the new liquidity reserves.\n    console.log(\n      \"Trying to get reserves between:\\n\" + coin1.address + \"\\n\" + coin2.address\n    );\n\n    if (coin1.address && coin2.address && account) {\n      getReserves(coin1.address, coin2.address, factory, signer, account).then(\n        (data) => {\n          setReserves([data[0], data[1]]);\n          setLiquidity_tokens(data[2]);\n        }\n      );\n    }\n  }, [coin1.address, coin2.address, account, factory, signer]);\n\n  useEffect(() => {\n    // This hook runs whenever the field values change or coins change, it will attempt to do a static call to give a preview of the liquidity deployment.\n\n    if (isButtonEnabled()) {\n      console.log(\"Trying to preview the liquidity deployment\");\n\n      quoteAddLiquidity(\n        coin1.address,\n        coin2.address,\n        parseFloat(field1Value),\n        parseFloat(field2Value),\n        factory,\n        signer\n      ).then((data) => {\n        // console.log(data);\n        console.log(\"TokenA in: \", data[0]);\n        console.log(\"TokenB in: \", data[1]);\n        console.log(\"Liquidity out: \", data[2]);\n        setLiquidity_out([data[0], data[1], data[2]]);\n      });\n    }\n  }, [coin1.address, coin2.address, field1Value, field2Value, factory, signer]);\n\n  useEffect(() => {\n    // This hook creates a timeout that will run every ~10 seconds, it's role is to check if the user's balance has\n    // updated has changed. This allows them to see when a transaction completes by looking at the balance output.\n\n    const coinTimeout = setTimeout(() => {\n      console.log(\"Checking balances & Getting reserves...\");\n\n      if (coin1.address && coin2.address && account) {\n        getReserves(\n          coin1.address,\n          coin2.address,\n          factory,\n          signer,\n          account\n        ).then((data) => {\n          setReserves([data[0], data[1]]);\n          setLiquidity_tokens(data[2]);\n        });\n      }\n\n      if (coin1 && account) {\n        getBalanceAndSymbol(account, coin1.address, provider, signer).then(\n          (data) => {\n            setCoin1({\n              ...coin1,\n              balance: data.balance,\n            });\n          }\n        );\n      }\n      if (coin2 && account) {\n        getBalanceAndSymbol(account, coin2.address, provider, signer).then(\n          (data) => {\n            setCoin2({\n              ...coin2,\n              balance: data.balance,\n            });\n          }\n        );\n      }\n    }, 10000);\n\n    return () => clearTimeout(coinTimeout);\n  });\n\n  useEffect(() => {\n    // This hook will run when the component first mounts, it can be useful to put logic to populate variables here\n\n    getAccount().then((account) => {\n      setAccount(account);\n    });\n  });\n\n  return (\n    <div>\n      {/* Liquidity deployer */}\n      <Typography variant=\"h5\" className={classes.title}></Typography>\n\n      {/* Dialog Windows */}\n      <CoinDialog\n        open={dialog1Open}\n        onClose={onToken1Selected}\n        coins={COINS.ALL}\n        signer={signer}\n      />\n      <CoinDialog\n        open={dialog2Open}\n        onClose={onToken2Selected}\n        coins={COINS.ALL}\n        signer={signer}\n      />\n\n      <Grid container direction=\"column\" alignItems=\"center\" spacing={2}>\n        <Grid item xs={12} className={classes.fullWidth}>\n          <CoinField\n            activeField={true}\n            value={field1Value}\n            onClick={() => setDialog1Open(true)}\n            onChange={handleChange.field1}\n            symbol={coin1.symbol !== undefined ? coin1.symbol : \"Select\"}\n          />\n        </Grid>\n\n        <Grid item xs={12} className={classes.fullWidth}>\n          <CoinField\n            activeField={true}\n            value={field2Value}\n            onClick={() => setDialog2Open(true)}\n            onChange={handleChange.field2}\n            symbol={coin2.symbol !== undefined ? coin2.symbol : \"Select\"}\n          />\n        </Grid>\n      </Grid>\n\n      <Grid\n        container\n        direction=\"row\"\n        alignItems=\"center\"\n        justifyContent=\"center\"\n        spacing={4}\n        className={classes.balance}\n      >\n        <hr className={classes.hr} />\n        <Grid\n          container\n          item\n          className={classes.values}\n          direction=\"column\"\n          alignItems=\"center\"\n          spacing={2}\n        >\n          {/* Balance Display */}\n          <Typography variant=\"h6\">Your Balances</Typography>\n          <Grid container direction=\"row\" justifyContent=\"space-between\">\n            <Grid item xs={6}>\n              <Typography variant=\"body1\" className={classes.balance}>\n                {formatBalance(coin1.balance, coin1.symbol)}\n              </Typography>\n            </Grid>\n            <Grid item xs={6}>\n              <Typography variant=\"body1\" className={classes.balance}>\n                {formatBalance(coin2.balance, coin2.symbol)}\n              </Typography>\n            </Grid>\n          </Grid>\n\n          <hr className={classes.hr} />\n\n          {/* Reserves Display */}\n          <Typography variant=\"h6\">Reserves</Typography>\n          <Grid container direction=\"row\" justifyContent=\"space-between\">\n            <Grid item xs={6}>\n              <Typography variant=\"body1\" className={classes.balance}>\n                {formatReserve(reserves[0], coin1.symbol)}\n              </Typography>\n            </Grid>\n            <Grid item xs={6}>\n              <Typography variant=\"body1\" className={classes.balance}>\n                {formatReserve(reserves[1], coin2.symbol)}\n              </Typography>\n            </Grid>\n          </Grid>\n\n          <hr className={classes.hr} />\n\n          {/* Liquidity Tokens Display */}\n          <Typography variant=\"h6\">Your Liquidity Pool Tokens</Typography>\n          <Grid container direction=\"row\" justifyContent=\"center\">\n            <Grid item xs={6}>\n              <Typography variant=\"body1\" className={classes.balance}>\n                {formatReserve(liquidity_tokens, \"UNI-V2\")}\n              </Typography>\n            </Grid>\n          </Grid>\n        </Grid>\n        <Paper className={classes.paperContainer}>\n          {/*Red  Display to show the quote */}\n          <Grid\n            container\n            item\n            direction=\"column\"\n            alignItems=\"center\"\n            spacing={2}\n            className={classes.fullWidth}\n          >\n            {/* Tokens in */}\n            <Typography variant=\"h6\">Tokens in</Typography>\n            <Grid container direction=\"row\" justifyContent=\"space-between\">\n              <Grid item xs={6}>\n                <Typography variant=\"body1\" className={classes.balance}>\n                  {formatBalance(liquidity_out[0], coin1.symbol)}\n                </Typography>\n              </Grid>\n              <Grid item xs={6}>\n                <Typography variant=\"body1\" className={classes.balance}>\n                  {formatBalance(liquidity_out[1], coin2.symbol)}\n                </Typography>\n              </Grid>\n            </Grid>\n\n            <hr className={classes.hr} />\n\n            {/* Liquidity Tokens Display */}\n            <Typography variant=\"h6\">Liquidity Pool Tokens Out</Typography>\n            <Grid container direction=\"row\" justifyContent=\"center\">\n              <Grid item xs={6}>\n                <Typography variant=\"body1\" className={classes.balance}>\n                  {formatReserve(liquidity_out[2], \"UNI-V2\")}\n                </Typography>\n              </Grid>\n            </Grid>\n          </Grid>\n        </Paper>\n\n        <hr className={classes.hr} />\n      </Grid>\n      <Grid container direction=\"column\" alignItems=\"center\" spacing={2}>\n        <LoadingButton\n          loading={loading}\n          valid={isButtonEnabled()}\n          success={false}\n          fail={false}\n          onClick={deploy}\n        >\n          <AccountBalanceIcon className={classes.buttonIcon} />\n          Deploy\n        </LoadingButton>\n      </Grid>\n    </div>\n  );\n}\n\nexport default LiquidityDeployer;\n","import React, { useEffect } from \"react\";\nimport { Grid, makeStyles, Paper, Typography } from \"@material-ui/core\";\nimport ArrowDownwardIcon from \"@material-ui/icons/ArrowDownward\";\nimport { useSnackbar } from \"notistack\";\nimport {\n  getAccount,\n  getFactory,\n  getProvider,\n  getRouter,\n  getSigner,\n  getBalanceAndSymbol,\n  getWeth,\n  getReserves,\n} from \"../ethereumFunctions\";\nimport { removeLiquidity, quoteRemoveLiquidity } from \"./LiquidityFunctions\";\nimport {\n  RemoveLiquidityField1,\n  RemoveLiquidityField2,\n} from \"../CoinSwapper/CoinField\";\nimport CoinDialog from \"../CoinSwapper/CoinDialog\";\nimport LoadingButton from \"../Components/LoadingButton\";\nimport * as COINS from \"../constants/coins\";\n\nconst styles = (theme) => ({\n  paperContainer: {\n    borderRadius: theme.spacing(2),\n    padding: theme.spacing(2),\n    paddingBottom: theme.spacing(3),\n    width: \"40%\",\n    overflow: \"wrap\",\n    background: \"linear-gradient(45deg, #ff0000 30%, #FF8E53 90%)\",\n    color: \"white\",\n  },\n  fullWidth: {\n    width: \"100%\",\n  },\n  values: {\n    width: \"50%\",\n  },\n  title: {\n    textAlign: \"center\",\n    padding: theme.spacing(0.5),\n    marginBottom: theme.spacing(1),\n  },\n  hr: {\n    width: \"100%\",\n  },\n  balance: {\n    padding: theme.spacing(1),\n    overflow: \"wrap\",\n    textAlign: \"center\",\n  },\n  buttonIcon: {\n    marginRight: theme.spacing(1),\n    padding: theme.spacing(0.4),\n  },\n});\n\nconst useStyles = makeStyles(styles);\n\nfunction LiquidityRemover(props) {\n  const classes = useStyles();\n  const { enqueueSnackbar } = useSnackbar();\n\n  // Stores a record of whether their respective dialog window is open\n  const [dialog1Open, setDialog1Open] = React.useState(false);\n  const [dialog2Open, setDialog2Open] = React.useState(false);\n\n  // Stores data about their respective coin\n  const [coin1, setCoin1] = React.useState({\n    address: undefined,\n    symbol: undefined,\n    balance: undefined,\n  });\n  const [coin2, setCoin2] = React.useState({\n    address: undefined,\n    symbol: undefined,\n    balance: undefined,\n  });\n\n  // Stores the current reserves in the liquidity pool between coin1 and coin2\n  const [reserves, setReserves] = React.useState([\"0.0\", \"0.0\"]);\n  // Stores the liquidity tokens the use has\n  const [liquidity_tokens, setLiquidity_tokens] = React.useState(\"\");\n  // Stores the input and output for the liquidity removal preview\n  const [tokensOut, setTokensOut] = React.useState([0, 0, 0]);\n\n  // Stores the current value of their respective text box\n  const [field1Value, setField1Value] = React.useState(\"\");\n\n  // Stores information for the Autonity Network\n  const [provider, setProvider] = React.useState(getProvider());\n  const [signer, setSigner] = React.useState(getSigner(provider));\n  const [account, setAccount] = React.useState(undefined); // This is populated in a react hook\n  const [router, setRouter] = React.useState(\n    getRouter(\"0x4489D87C8440B19f11d63FA2246f943F492F3F5F\", signer)\n  );\n  const [weth, setWeth] = React.useState(\n    getWeth(\"0x3f0D1FAA13cbE43D662a37690f0e8027f9D89eBF\", signer)\n  );\n  const [factory, setFactory] = React.useState(\n    getFactory(\"0x4EDFE8706Cefab9DCd52630adFFd00E9b93FF116\", signer)\n  );\n\n  // Controls the loading button\n  const [loading, setLoading] = React.useState(false);\n\n  // Switches the top and bottom coins, this is called when users hit the swap button or select the opposite\n  // token in the dialog (e.g. if coin1 is TokenA and the user selects TokenB when choosing coin2)\n  const switchFields = () => {\n    setCoin1(coin2);\n    setCoin2(coin1);\n    setReserves(reserves.reverse());\n  };\n\n  // These functions take an HTML event, pull the data out and puts it into a state variable.\n  const handleChange = {\n    field1: (e) => {\n      setField1Value(e.target.value);\n    },\n  };\n\n  // Turns the account's balance into something nice and readable\n  const formatBalance = (balance, symbol) => {\n    if (balance && symbol)\n      return parseFloat(balance).toPrecision(8) + \" \" + symbol;\n    else return \"0.0\";\n  };\n\n  // Turns the coin's reserves into something nice and readable\n  const formatReserve = (reserve, symbol) => {\n    if (reserve && symbol) return reserve + \" \" + symbol;\n    else return \"0.0\";\n  };\n\n  // Determines whether the button should be enabled or not\n  const isButtonEnabled = () => {\n    let validFloat = new RegExp(\"^[0-9]*[.,]?[0-9]*$\");\n\n    // If both coins have been selected, and a valid float has been entered for both, which are less than the user's balances, then return true\n    return (\n      coin1.address &&\n      coin2.address &&\n      validFloat.test(field1Value) &&\n      parseFloat(field1Value) <= liquidity_tokens\n    );\n  };\n\n  const deploy = () => {\n    console.log(\"Attempting to remove liquidity...\");\n    setLoading(true);\n\n    removeLiquidity(\n      coin1.address,\n      coin2.address,\n      parseFloat(field1Value),\n      0,\n      0,\n      router,\n      account,\n      signer,\n      factory\n    )\n      .then(() => {\n        setLoading(false);\n\n        // If the transaction was successful, we clear to input to make sure the user doesn't accidental redo the transfer\n        setField1Value(\"\");\n        enqueueSnackbar(\"Removal Successful\", { variant: \"success\" });\n      })\n      .catch((e) => {\n        setLoading(false);\n        enqueueSnackbar(\"Deployment Failed (\" + e.message + \")\", {\n          variant: \"error\",\n          autoHideDuration: 10000,\n        });\n      });\n  };\n\n  // Called when the dialog window for coin1 exits\n  const onToken1Selected = (address) => {\n    // Close the dialog window\n    setDialog1Open(false);\n\n    // If the user inputs the same token, we want to switch the data in the fields\n    if (address === coin2.address) {\n      switchFields();\n    }\n    // We only update the values if the user provides a token\n    else if (address) {\n      // Getting some token data is async, so we need to wait for the data to return, hence the promise\n      getBalanceAndSymbol(account, address, provider, signer).then((data) => {\n        setCoin1({\n          address: address,\n          symbol: data.symbol,\n          balance: data.balance,\n        });\n      });\n    }\n  };\n\n  // Called when the dialog window for coin2 exits\n  const onToken2Selected = (address) => {\n    // Close the dialog window\n    setDialog2Open(false);\n\n    // If the user inputs the same token, we want to switch the data in the fields\n    if (address === coin1.address) {\n      switchFields();\n    }\n    // We only update the values if the user provides a token\n    else if (address) {\n      // Getting some token data is async, so we need to wait for the data to return, hence the promise\n      getBalanceAndSymbol(account, address, provider, signer).then((data) => {\n        setCoin2({\n          address: address,\n          symbol: data.symbol,\n          balance: data.balance,\n        });\n      });\n    }\n  };\n\n  useEffect(() => {\n    // This hook runs whenever the coins change, it will attempt to fetch the new liquidity reserves.\n    console.log(\n      \"Trying to get reserves between:\\n\" + coin1.address + \"\\n\" + coin2.address\n    );\n\n    if (coin1.address && coin2.address && account) {\n      getReserves(coin1.address, coin2.address, factory, signer, account).then(\n        (data) => {\n          setReserves([data[0], data[1]]);\n          setLiquidity_tokens(data[2]);\n        }\n      );\n    }\n  }, [coin1.address, coin2.address, account, factory, signer]);\n\n  useEffect(() => {\n    // This hook runs whenever the field values change or coins change, it will attempt to give a preview of the liquidity removal.\n\n    if (isButtonEnabled()) {\n      console.log(\"Trying to preview the liquidity removal\");\n      quoteRemoveLiquidity(\n        coin1.address,\n        coin2.address,\n        field1Value,\n        factory,\n        signer\n      ).then((data) => {\n        console.log(data);\n        setTokensOut(data);\n      });\n    }\n  }, [coin1.address, coin2.address, field1Value, factory, signer]);\n\n  useEffect(() => {\n    // This hook creates a timeout that will run every ~10 seconds, it's role is to check if the user's balance has\n    // updated has changed. This allows them to see when a transaction completes by looking at the balance output.\n\n    const coinTimeout = setTimeout(() => {\n      console.log(\"Checking balances & Getting reserves...\");\n\n      if (coin1.address && coin2.address && account) {\n        getReserves(\n          coin1.address,\n          coin2.address,\n          factory,\n          signer,\n          account\n        ).then((data) => {\n          setReserves([data[0], data[1]]);\n          setLiquidity_tokens(data[2]);\n        });\n      }\n\n      if (coin1 && account) {\n        getBalanceAndSymbol(account, coin1.address, provider, signer).then(\n          (data) => {\n            setCoin1({\n              ...coin1,\n              balance: data.balance,\n            });\n          }\n        );\n      }\n      if (coin2 && account) {\n        getBalanceAndSymbol(account, coin2.address, provider, signer).then(\n          (data) => {\n            setCoin2({\n              ...coin2,\n              balance: data.balance,\n            });\n          }\n        );\n      }\n    }, 10000);\n\n    return () => clearTimeout(coinTimeout);\n  });\n\n  useEffect(() => {\n    // This hook will run when the component first mounts, it can be useful to put logic to populate variables here\n\n    getAccount().then((account) => {\n      setAccount(account);\n    });\n  });\n\n  return (\n    <div>\n      {/* Coin Swapper */}\n      <Typography variant=\"h5\" className={classes.title}></Typography>\n\n      {/* Dialog Windows */}\n      <CoinDialog\n        open={dialog1Open}\n        onClose={onToken1Selected}\n        coins={COINS.ALL}\n        signer={signer}\n      />\n      <CoinDialog\n        open={dialog2Open}\n        onClose={onToken2Selected}\n        coins={COINS.ALL}\n        signer={signer}\n      />\n\n      <Grid container direction=\"column\" alignItems=\"center\" spacing={2}>\n        <Grid item xs={12} className={classes.fullWidth}>\n          <RemoveLiquidityField1\n            activeField={true}\n            value={field1Value}\n            onClick={() => setDialog1Open(true)}\n            onChange={handleChange.field1}\n            symbol={coin1.symbol !== undefined ? coin1.symbol : \"Select\"}\n          />\n        </Grid>\n\n        <Grid item xs={12} className={classes.fullWidth}>\n          <RemoveLiquidityField2\n            activeField={true}\n            onClick={() => setDialog2Open(true)}\n            symbol={coin2.symbol !== undefined ? coin2.symbol : \"Select\"}\n          />\n        </Grid>\n      </Grid>\n\n      <Grid\n        container\n        direction=\"row\"\n        alignItems=\"center\"\n        justifyContent=\"center\"\n        spacing={4}\n        className={classes.balance}\n      >\n        <hr className={classes.hr} />\n        <Grid\n          container\n          item\n          className={classes.values}\n          direction=\"column\"\n          alignItems=\"center\"\n          spacing={2}\n        >\n          {/* Balance Display */}\n          <Typography variant=\"h6\">Your Balances</Typography>\n          <Grid container direction=\"row\" justifyContent=\"space-between\">\n            <Grid item xs={6}>\n              <Typography variant=\"body1\" className={classes.balance}>\n                {formatBalance(coin1.balance, coin1.symbol)}\n              </Typography>\n            </Grid>\n            <Grid item xs={6}>\n              <Typography variant=\"body1\" className={classes.balance}>\n                {formatBalance(coin2.balance, coin2.symbol)}\n              </Typography>\n            </Grid>\n          </Grid>\n\n          <hr className={classes.hr} />\n\n          {/* Reserves Display */}\n          <Typography variant=\"h6\">Reserves</Typography>\n          <Grid container direction=\"row\" justifyContent=\"space-between\">\n            <Grid item xs={6}>\n              <Typography variant=\"body1\" className={classes.balance}>\n                {formatReserve(reserves[0], coin1.symbol)}\n              </Typography>\n            </Grid>\n            <Grid item xs={6}>\n              <Typography variant=\"body1\" className={classes.balance}>\n                {formatReserve(reserves[1], coin2.symbol)}\n              </Typography>\n            </Grid>\n          </Grid>\n\n          <hr className={classes.hr} />\n\n          {/* Liquidity Tokens Display */}\n          <Typography variant=\"h6\">Your Liquidity Pool Tokens</Typography>\n          <Grid container direction=\"row\" justifyContent=\"center\">\n            <Grid item xs={6}>\n              <Typography variant=\"body1\" className={classes.balance}>\n                {formatReserve(liquidity_tokens, \"UNI-V2\")}\n              </Typography>\n            </Grid>\n          </Grid>\n        </Grid>\n\n        <Paper className={classes.paperContainer}>\n          {/*Red  Display to show the quote */}\n          <Grid\n            container\n            item\n            direction=\"column\"\n            alignItems=\"center\"\n            spacing={2}\n            className={classes.fullWidth}\n          >\n            {/* Tokens in */}\n            <Typography variant=\"h6\">Liquidity Pool Tokens in</Typography>\n            <Grid container direction=\"row\" justifyContent=\"center\">\n              <Grid item xs={6}>\n                <Typography variant=\"body1\" className={classes.balance}>\n                  {formatBalance(tokensOut[0], \"UNI-V2\")}\n                </Typography>\n              </Grid>\n            </Grid>\n\n            <hr className={classes.hr} />\n\n            {/* Liquidity Tokens Display */}\n            <Typography variant=\"h6\">Tokens Out</Typography>\n            <Grid container direction=\"row\" justifyContent=\"space-between\">\n              <Grid item xs={6}>\n                <Typography variant=\"body1\" className={classes.balance}>\n                  {formatBalance(tokensOut[1], coin1.symbol)}\n                </Typography>\n              </Grid>\n              <Grid item xs={6}>\n                <Typography variant=\"body1\" className={classes.balance}>\n                  {formatBalance(tokensOut[2], coin2.symbol)}\n                </Typography>\n              </Grid>\n            </Grid>\n          </Grid>\n        </Paper>\n        <hr className={classes.hr} />\n      </Grid>\n\n      <Grid container direction=\"column\" alignItems=\"center\" spacing={2}>\n        <LoadingButton\n          loading={loading}\n          valid={isButtonEnabled()}\n          success={false}\n          fail={false}\n          onClick={deploy}\n        >\n          <ArrowDownwardIcon className={classes.buttonIcon} />\n          Remove\n        </LoadingButton>\n      </Grid>\n    </div>\n  );\n}\n\nexport default LiquidityRemover;\n","import React from \"react\";\nimport { ButtonGroup, Button } from \"@material-ui/core\";\n\nexport default function SwitchButton(props) {\n  const { setDeploy } = props;\n\n  const changeStyles = (K) => {\n    if (K === true) {\n      let add_button = document.getElementById(\"add-button\");\n      add_button.style.backgroundColor = \"#ff0000\";\n\n      let remove_button = document.getElementById(\"remove-button\");\n      remove_button.style.backgroundColor = \"#9e9e9e\";\n    } else {\n      let remove_button = document.getElementById(\"remove-button\");\n      remove_button.style.backgroundColor = \"#ff0000\";\n\n      let add_button = document.getElementById(\"add-button\");\n      add_button.style.backgroundColor = \"#9e9e9e\";\n    }\n  };\n\n  return (\n    <div>\n      <ButtonGroup size=\"large\" variant=\"contained\">\n        <Button\n          id=\"add-button\"\n          color=\"primary\"\n          text=\"white\"\n          onClick={() => {\n            setDeploy(true);\n            changeStyles(true);\n          }}\n        >\n          Deploy Liquidity\n        </Button>\n\n        <Button\n          id=\"remove-button\"\n          color=\"secondary\"\n          text=\"white\"\n          onClick={() => {\n            setDeploy(false);\n            changeStyles(false);\n          }}\n        >\n          Remove Liquidity\n        </Button>\n      </ButtonGroup>\n    </div>\n  );\n}\n","import React from \"react\";\nimport {\n  Container,\n  Grid,\n  makeStyles,\n  Paper,\n  Typography,\n} from \"@material-ui/core\";\n\nimport LiquidityDeployer from \"./LiquidityDeployer\";\nimport LiquidityRemover from \"./RemoveLiquidity\";\nimport SwitchButton from \"./SwitchButton\";\n\nconst styles = (theme) => ({\n  paperContainer: {\n    borderRadius: theme.spacing(2),\n    padding: theme.spacing(1),\n    paddingBottom: theme.spacing(3),\n    maxWidth: 700,\n    margin: \"auto\",\n  },\n  title: {\n    textAlign: \"center\",\n    padding: theme.spacing(0.5),\n    marginBottom: theme.spacing(1),\n  },\n  footer: {\n    marginTop: \"155px\",\n  },\n});\n\nconst useStyles = makeStyles(styles);\n\nfunction Liquidity() {\n  const classes = useStyles();\n\n  const [deploy, setDeploy] = React.useState(true);\n\n  const deploy_or_remove = (deploy) => {\n    if (deploy === true) {\n      return <LiquidityDeployer />;\n    }\n    return <LiquidityRemover />;\n  };\n\n  return (\n    <div>\n      <Container>\n        <Paper className={classes.paperContainer}>\n          <Typography variant=\"h5\" className={classes.title}>\n            <SwitchButton setDeploy={setDeploy} />\n          </Typography>\n\n          {deploy_or_remove(deploy)}\n        </Paper>\n      </Container>\n\n      <Grid\n        container\n        className={classes.footer}\n        direction=\"row\"\n        justifyContent=\"center\"\n        alignItems=\"flex-end\"\n      >\n        <p>\n          Clearmatics Autonity Uniswap | Get AUT for use in the bakerloo testnet{\" \"}\n          <a href=\"https://faucet.bakerloo.autonity.network/\">here</a>\n        </p>\n      </Grid>\n    </div>\n  );\n}\n\nexport default Liquidity;\n","import React from \"react\";\nimport {\n  Container,\n  Grid,\n  makeStyles,\n  Paper,\n  Typography,\n} from \"@material-ui/core\";\nimport logo from \"../assets/img/logo.svg\";\n\nconst styles = (theme) => ({\n  paperContainer: {\n    borderRadius: theme.spacing(2),\n    padding: theme.spacing(1),\n    paddingBottom: theme.spacing(3),\n    maxWidth: 700,\n    margin: \"auto\",\n    marginTop: \"200px\",\n  },\n  fullWidth: {\n    width: \"100%\",\n  },\n  title: {\n    textAlign: \"center\",\n    padding: theme.spacing(0.5),\n    marginBottom: theme.spacing(1),\n  },\n  hr: {\n    width: \"100%\",\n  },\n  balance: {\n    padding: theme.spacing(1),\n    overflow: \"wrap\",\n    textAlign: \"center\",\n  },\n  buttonIcon: {\n    marginRight: theme.spacing(1),\n    padding: theme.spacing(0.4),\n  },\n  footer: {\n    marginTop: \"155px\",\n  },\n});\n\nconst useStyles = makeStyles(styles);\n\nfunction ConnectWalletPage() {\n  const classes = useStyles();\n  return (\n    <div>\n      <div className=\"Title\">\n        <h1 className=\"navbar-logo\">\n          <img src={logo} className=\"logo\"></img> Autonity Uniswap\n        </h1>\n      </div>\n\n      <Container>\n        <Paper className={classes.paperContainer}>\n          <Typography\n            variant=\"h6\"\n            className={classes.title}\n            color=\"common.white\"\n          >\n            Please connect an Ethereum wallet to your browser to use the\n            application\n          </Typography>\n        </Paper>\n      </Container>\n\n      <Grid\n        container\n        className={classes.footer}\n        direction=\"row\"\n        justifyContent=\"center\"\n        alignItems=\"flex-end\"\n      >\n        <p>\n          Clearmatics Autonity Uniswap | Get AUT for use in the bakerloo testnet{\" \"}\n          <a href=\"https://faucet.bakerloo.autonity.network/\">here</a>\n        </p>\n      </Grid>\n    </div>\n  );\n}\n\nexport default ConnectWalletPage;\n","import React from \"react\";\nimport \"./App.css\";\nimport { ethers } from \"ethers\";\nimport NarBar from \"./NavBar/NavBar\";\nimport CoinSwapper from \"./CoinSwapper/CoinSwapper\";\nimport { Route } from \"react-router-dom\";\nimport { SnackbarProvider } from \"notistack\";\nimport Liquidity from \"./Liquidity/Liquidity\";\nimport ConnectWalletPage from \"./Components/connectWalletPage\";\nimport { createTheme, ThemeProvider } from \"@material-ui/core\";\n\nconst theme = createTheme({\n  palette: {\n    primary: {\n      main: \"#ff0000\",\n      contrastText: \"#ffffff\",\n    },\n    secondary: {\n      main: \"#9e9e9e\",\n      contrastText: \"#ffffff\",\n    },\n  },\n});\n\nfunction App() {\n  // Check if wallet is here:\n  try {\n    const provider = new ethers.providers.Web3Provider(window.ethereum);\n    return (\n      <div className=\"App\">\n        <SnackbarProvider maxSnack={3}>\n          <ThemeProvider theme={theme}>\n            <NarBar />\n            <Route\n              exact\n              path=\"/autonity-uniswap-interface/\"\n              component={CoinSwapper}\n            />\n            <Route\n              exact\n              path=\"/autonity-uniswap-interface/liquidity\"\n              component={Liquidity}\n            />\n          </ThemeProvider>\n        </SnackbarProvider>\n      </div>\n    );\n  } catch (err) {\n    return (\n      <div className=\"App\">\n        <SnackbarProvider maxSnack={3}>\n          <ThemeProvider theme={theme}>\n            <ConnectWalletPage />\n          </ThemeProvider>\n        </SnackbarProvider>\n      </div>\n    );\n  }\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport \"bootstrap/dist/css/bootstrap.css\";\nimport \"./index.css\";\nimport App from \"./App\";\nimport reportWebVitals from \"./reportWebVitals\";\nimport { BrowserRouter } from \"react-router-dom\";\n\nReactDOM.render(\n  <BrowserRouter>\n    <React.StrictMode>\n      <App />\n    </React.StrictMode>\n  </BrowserRouter>,\n\n  document.getElementById(\"root\")\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}