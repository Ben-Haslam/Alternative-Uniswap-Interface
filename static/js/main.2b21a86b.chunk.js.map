{"version":3,"sources":["NavBar/MenuItems.js","assets/img/logo.svg","NavBar/NavBar.js","constants/chains.js","constants/coins.js","ethereumFunctions.js","CoinSwapper/CoinField.js","CoinSwapper/CoinButton.js","CoinSwapper/CoinDialog.js","Components/LoadingButton.js","Components/wrongNetwork.js","CoinSwapper/CoinSwapper.js","Liquidity/SwitchButton.js","Liquidity/LiquidityFunctions.js","Liquidity/LiquidityDeployer.js","Liquidity/RemoveLiquidity.js","Liquidity/Liquidity.js","Components/connectWalletPage.js","App.js","reportWebVitals.js","index.js"],"names":["MenuItems","title","url","cName","NavBar","state","clicked","className","src","logo","map","item","index","to","Component","networks","ChainId","ROPSTEN","RINKEBY","GÃ–RLI","KOVAN","AUTONITY","routerAddress","Map","set","COINS","chains","MAINNET","name","abbr","address","ROUTER","require","ERC20","FACTORY","PAIR","getProvider","ethers","providers","Web3Provider","window","ethereum","getSigner","provider","getNetwork","a","network","chainId","getRouter","signer","Contract","abi","getWeth","getFactory","getAccount","request","method","accounts","getBalanceAndSymbol","accountAddress","weth_address","coins","getBalance","balanceRaw","balance","utils","formatEther","symbol","token","decimals","tokenDecimals","balanceOf","address1","address2","amount","routerContract","tokens","time","Math","floor","Date","now","deadline","BigNumber","from","token1","amountIn","parseUnits","String","callStatic","getAmountsOut","amountOut","approve","WETH","wethAddress","swapExactETHForTokens","value","swapExactTokensForETH","swapExactTokensForTokens","token1Decimals","token2","token2Decimals","values_out","amount_out","console","log","Number","fetchReserves","pair","coin1","coin2","coin1Decimals","coin2Decimals","getReserves","reservesRaw","token0","results","factory","getPair","pairAddress","liquidityTokens_BN","liquidityTokens","toFixed","useStyles","makeStyles","theme","container","padding","spacing","minHeight","backgroundColor","COLORS","borderRadius","borderColor","borderWidth","borderStyle","container_input","marginLeft","textAlign","container_blank","grid","height","fab","zIndex","input","typography","h5","width","inputBase","RemoveLiquidityField1","props","classes","onClick","onChange","activeField","Grid","direction","justifyContent","alignItems","xs","Fab","size","variant","InputBase","placeholder","disabled","root","RemoveLiquidityField2","CoinField","button","paddingTop","paddingBottom","coinName","opacity","CoinButton","coinAbbr","ButtonBase","focusRipple","Typography","styles","dialogContainer","titleSection","titleText","alignSelf","hr","margin","paddingLeft","paddingRight","coinList","overflowY","coinContainer","marginTop","overflow","DialogTitle","withStyles","children","onClose","other","disableTypography","alignContent","IconButton","aria-label","DialogActions","MuiDialogActions","CoinDialog","open","React","useState","setAddress","error","setError","exit","Dialog","undefined","fullWidth","maxWidth","paper","TextField","e","target","helperText","coin","Button","autoFocus","err","doesTokenExist","color","wrapper","position","progress","green","top","left","LoadingButton","loading","valid","success","fail","type","CircularProgress","WrongNetwork","paperContainer","switchButton","marginBottom","footer","CoinSwapper","enqueueSnackbar","useSnackbar","account","setAccount","setChainId","router","setRouter","weth","setWeth","setFactory","dialog1Open","setDialog1Open","dialog2Open","setDialog2Open","wrongNetworkOpen","setwrongNetworkOpen","setCoin1","setCoin2","setCoins","reserves","setReserves","field1Value","setField1Value","field2Value","setField2Value","setLoading","switchFields","reverse","handleChange","field1","formatBalance","parseFloat","toPrecision","formatReserve","reserve","useEffect","then","data","isNaN","getAmountOut","coinTimeout","setTimeout","clearTimeout","includes","get","factory_address","Network","Container","Paper","fontSize","validFloat","RegExp","test","isButtonEnabled","swapTokens","catch","message","autoHideDuration","href","SwitchButton","setDeploy","changeStyles","K","document","getElementById","style","ButtonGroup","id","text","amount1","amount2","amount1min","amount2min","amountIn1","amountIn2","amount1Min","amount2Min","addLiquidityETH","addLiquidity","liquidity_tokens","liquidity","removeLiquidityETH","removeLiquidity","quote","reserve1","reserve2","sqrt","amountADesired","amountBDesired","reserveA","reserveB","toString","amountBOptimal","amountAOptimal","feeTo","feeOn","kLast","_kLast","totalSupply","_totalSupply","feeLiquidity","Aout","Bout","background","values","buttonIcon","marginRight","LiquidityDeployer","setLiquidityTokens","liquidityOut","setLiquidityOut","oldField1Value","oldField2Value","field2","quoteAddLiquidity","LiquidityRemover","tokensOut","setTokensOut","quoteRemoveLiquidity","Liquidity","deploy","deploy_or_remove","ConnectWalletPage","createTheme","palette","primary","main","contrastText","secondary","App","maxSnack","ThemeProvider","exact","path","component","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode"],"mappings":"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","file":"static/js/main.2b21a86b.chunk.js","sourcesContent":["export const MenuItems = [\n  {\n    title: \"Swap\",\n    url: \"/autonity-uniswap-interface/\",\n    cName: \"nav-links\",\n  },\n  {\n    title: \"Liquidity\",\n    url: \"/autonity-uniswap-interface/liquidity\",\n    cName: \"nav-links\",\n  },\n];\n","export default __webpack_public_path__ + \"static/media/logo.28418735.svg\";","import React, { Component } from \"react\";\nimport { Link } from \"react-router-dom\";\nimport { MenuItems } from \"./MenuItems\";\nimport logo from \"../assets/img/logo.svg\";\nimport \"./NavBar.css\";\n\nclass NavBar extends Component {\n  state = { clicked: false };\n\n  render() {\n    return (\n      <nav>\n        <div className=\"Title\">\n          <h1 className=\"navbar-logo\">\n            <img src={logo} className=\"logo\"></img> Autonity Uniswap\n          </h1>\n        </div>\n\n        <div className=\"NavbarItems\">\n          <ul className={`nav-menu`}>\n            {MenuItems.map((item, index) => {\n              return (\n                <li key={index}>\n                  <Link className={\"nav-links\"} to={item.url}>\n                    {item.title}\n                  </Link>\n                </li>\n              );\n            })}\n          </ul>\n        </div>\n      </nav>\n    );\n  }\n}\n\nexport default NavBar;\n","export const networks = [3,4,5,42,444900]\n\nexport const ChainId = {\n  // MAINNET: 1,\n  ROPSTEN: 3,\n  RINKEBY: 4,\n  GÃ–RLI: 5,\n  KOVAN: 42,\n  AUTONITY: 444900,\n};\n\nexport const routerAddress = new Map();\n// routerAddress.set(ChainId.MAINNET, \"0x7a250d5630B4cF539739dF2C5dAcb4c659F2488D\");\nrouterAddress.set(ChainId.ROPSTEN, \"0x7a250d5630B4cF539739dF2C5dAcb4c659F2488D\");\nrouterAddress.set(ChainId.RINKEBY, \"0x7a250d5630B4cF539739dF2C5dAcb4c659F2488D\");\nrouterAddress.set(ChainId.GÃ–RLI, \"0x7a250d5630B4cF539739dF2C5dAcb4c659F2488D\");\nrouterAddress.set(ChainId.KOVAN, \"0x7a250d5630B4cF539739dF2C5dAcb4c659F2488D\");\nrouterAddress.set(ChainId.AUTONITY, \"0x4489D87C8440B19f11d63FA2246f943F492F3F5F\");\n\n","import * as chains from './chains';\n\n// If you add coins for a new network, make sure Weth address (for the router you are using) is the first entry\n\nconst AUTONITYCoins = [\n  {\n    name: \"Auton\",\n    abbr: \"AUT\",\n    address: \"\", // Weth address is fetched from the router\n  },\n  {\n    name: \"Token A\",\n    abbr: \"TA\",\n    address: \"0x1d29BD2ACedBff15A59e946a4DE26d5257447727\",\n  },\n  {\n    name: \"Token B\",\n    abbr: \"TB\",\n    address: \"0xc108a13D00371520EbBeCc7DF5C8610C71F4FfbA\",\n  },\n  {\n    name: \"Token C\",\n    abbr: \"TC\",\n    address: \"0xC8E25055A4666F39179abE06d466F5A98423863F\",\n  },\n  {\n    name: \"Token D\",\n    abbr: \"TD\",\n    address: \"0x23238098F2B4dd9Ba3bb8bc78b639dD113da697e\",\n  }\n]\n\nconst MAINNETCoins = [\n  {\n    name: \"Ether\",\n    abbr: \"ETH\",\n    address: \"\", // Weth address is fetched from the router\n  },\n  {\n    name: \"Dai\",\n    abbr: \"DAI\",\n    address: \"0x6B175474E89094C44Da98b954EedeAC495271d0F\",\n  },\n  {\n    name: \"Tether USD\",\n    abbr: \"USDT\",\n    address: \"0xdAC17F958D2ee523a2206206994597C13D831ec7\",\n  },\n]\n\nconst ROPSTENCoins = [\n  {\n    name: \"Ether\",\n    abbr: \"ETH\",\n    address: \"\", // Weth address is fetched from the router\n  },\n  {\n    name: \"Dai\",\n    abbr: \"DAI\",\n    address: \"0xad6d458402f60fd3bd25163575031acdce07538d\",\n  },\n  {\n    name: \"Tether USD\",\n    abbr: \"USDT\",\n    address: \"0x6ee856ae55b6e1a249f04cd3b947141bc146273c\",\n  },\n]\n\nconst KOVANCoins = [\n  {\n    name: \"Ether\",\n    abbr: \"ETH\",\n    address: \"\", // // Weth address is fetched from the router\n  },\n  {\n    name: \"Dai\",\n    abbr: \"DAI\",\n    address: \"0xc4375b7de8af5a38a93548eb8453a498222c4ff2\",\n  },\n  {\n    name: \"Tether USD\",\n    abbr: \"USDT\",\n    address: \"0xf3e0d7bf58c5d455d31ef1c2d5375904df525105\",\n  },\n]\n\nconst RINKEBYCoins = [\n  {\n    name: \"Ether\",\n    abbr: \"ETH\",\n    address: \"\", // Weth address is fetched from the router\n  },\n  {\n    name: \"Dai\",\n    abbr: \"DAI\",\n    address: \"0x95b58a6bff3d14b7db2f5cb5f0ad413dc2940658\",\n  },\n  {\n    name: \"Tether USD\",\n    abbr: \"USDT\",\n    address: \"0x3b00ef435fa4fcff5c209a37d1f3dcff37c705ad\",\n  },\n]\n\nconst GÃ–RLICoins = [\n  {\n    name: \"Ether\",\n    abbr: \"ETH\",\n    address: \"\", // Weth address is fetched from the router\n  },\n  {\n    name: \"Dai\",\n    abbr: \"DAI\",\n    address: \"0x73967c6a0904aa032c103b4104747e88c566b1a2\",\n  },\n  {\n    name: \"Tether USD\",\n    abbr: \"USDT\",\n    address: \"0x509ee0d083ddf8ac028f2a56731412edd63223b9\",\n  },\n]\n\nconst COINS = new Map();\nCOINS.set(chains.ChainId.MAINNET, MAINNETCoins);\nCOINS.set(chains.ChainId.ROPSTEN, ROPSTENCoins);\nCOINS.set(chains.ChainId.RINKEBY, RINKEBYCoins);\nCOINS.set(chains.ChainId.GÃ–RLI, GÃ–RLICoins);\nCOINS.set(chains.ChainId.KOVAN, KOVANCoins);\nCOINS.set(chains.ChainId.AUTONITY, AUTONITYCoins);\nexport default COINS","import { Contract, ethers } from \"ethers\";\nimport * as chains from \"./constants/chains\";\nimport COINS from \"./constants/coins\";\n\nconst ROUTER = require(\"./build/UniswapV2Router02.json\");\nconst ERC20 = require(\"./build/ERC20.json\");\nconst FACTORY = require(\"./build/IUniswapV2Factory.json\");\nconst PAIR = require(\"./build/IUniswapV2Pair.json\");\n\nexport function getProvider() {\n  return new ethers.providers.Web3Provider(window.ethereum);\n}\n\nexport function getSigner(provider) {\n  return provider.getSigner();\n}\n\nexport async function getNetwork(provider) {\n  const network = await provider.getNetwork();\n  return network.chainId;\n}\n\nexport function getRouter(address, signer) {\n  return new Contract(address, ROUTER.abi, signer);\n}\n\nexport async function checkNetwork(provider) {\n  const chainId = getNetwork(provider);\n  if (chains.networks.includes(chainId)){\n    return true\n  }\n  return false;\n}\n\nexport function getWeth(address, signer) {\n  return new Contract(address, ERC20.abi, signer);\n}\n\nexport function getFactory(address, signer) {\n  return new Contract(address, FACTORY.abi, signer);\n}\n\nexport async function getAccount() {\n  const accounts = await window.ethereum.request({\n    method: \"eth_requestAccounts\",\n  });\n\n  return accounts[0];\n}\n\n//This function checks if a ERC20 token exists for a given address\n//    `address` - The Ethereum address to be checked\n//    `signer` - The current signer\nexport function doesTokenExist(address, signer) {\n  try {\n    return new Contract(address, ERC20.abi, signer);\n  } catch (err) {\n    return false;\n  }\n}\n\n// This function returns an object with 2 fields: `balance` which container's the account's balance in the particular token,\n// and `symbol` which is the abbreviation of the token name. To work correctly it must be provided with 4 arguments:\n//    `accountAddress` - An Ethereum address of the current user's account\n//    `address` - An Ethereum address of the token to check for (either a token or AUT)\n//    `provider` - The current provider\n//    `signer` - The current signer\nexport async function getBalanceAndSymbol(\n  accountAddress,\n  address,\n  provider,\n  signer,\n  weth_address,\n  coins\n) {\n  try {\n    if (address === weth_address) {\n      const balanceRaw = await provider.getBalance(accountAddress);\n\n      return {\n        balance: ethers.utils.formatEther(balanceRaw),\n        symbol: coins[0].abbr,\n      };\n    } else {\n      const token = new Contract(address, ERC20.abi, signer);\n      const tokenDecimals = await token.decimals();\n      const balanceRaw = await token.balanceOf(accountAddress);\n      const symbol = await token.symbol();\n\n      return {\n        balance: balanceRaw*10**(-tokenDecimals),\n        symbol: symbol,\n      };\n    }\n  } catch (err) {\n    return false;\n  }\n}\n\n// This function swaps two particular tokens / AUT, it can handle switching from AUT to ERC20 token, ERC20 token to AUT, and ERC20 token to ERC20 token.\n// No error handling is done, so any issues can be caught with the use of .catch()\n// To work correctly, there needs to be 7 arguments:\n//    `address1` - An Ethereum address of the token to trade from (either a token or AUT)\n//    `address2` - An Ethereum address of the token to trade to (either a token or AUT)\n//    `amount` - A float or similar number representing the value of address1's token to trade\n//    `routerContract` - The router contract to carry out this trade\n//    `accountAddress` - An Ethereum address of the current user's account\n//    `signer` - The current signer\nexport async function swapTokens(\n  address1,\n  address2,\n  amount,\n  routerContract,\n  accountAddress,\n  signer\n) {\n  const tokens = [address1, address2];\n  const time = Math.floor(Date.now() / 1000) + 200000;\n  const deadline = ethers.BigNumber.from(time);\n\n  const token1 = new Contract(address1, ERC20.abi, signer);\n  const tokenDecimals = await token1.decimals();\n  \n  const amountIn = ethers.utils.parseUnits(String(amount), tokenDecimals);\n  const amountOut = await routerContract.callStatic.getAmountsOut(\n    amountIn,\n    tokens\n  );\n\n  await token1.approve(routerContract.address, amountIn);\n  const wethAddress = await routerContract.WETH();\n\n  if (address1 === wethAddress) {\n    // Eth -> Token\n    await routerContract.swapExactETHForTokens(\n      amountOut[1],\n      tokens,\n      accountAddress,\n      deadline,\n      { value: amountIn }\n    );\n  } else if (address2 === wethAddress) {\n    // Token -> Eth\n    await routerContract.swapExactTokensForETH(\n      amountIn,\n      amountOut[1],\n      tokens,\n      accountAddress,\n      deadline\n    );\n  } else {\n    await routerContract.swapExactTokensForTokens(\n      amountIn,\n      amountOut[1],\n      tokens,\n      accountAddress,\n      deadline\n    );\n  }\n}\n\n//This function returns the conversion rate between two token addresses\n//    `address1` - An Ethereum address of the token to swaped from (either a token or AUT)\n//    `address2` - An Ethereum address of the token to swaped to (either a token or AUT)\n//    `amountIn` - Amount of the token at address 1 to be swaped from\n//    `routerContract` - The router contract to carry out this swap\nexport async function getAmountOut(\n  address1,\n  address2,\n  amountIn,\n  routerContract,\n  signer\n) {\n  try {\n    const token1 = new Contract(address1, ERC20.abi, signer);\n    const token1Decimals = await token1.decimals();\n\n    const token2 = new Contract(address2, ERC20.abi, signer);\n    const token2Decimals = await token2.decimals();\n\n    const values_out = await routerContract.getAmountsOut(\n      ethers.utils.parseUnits(String(amountIn), token1Decimals),\n      [address1, address2]\n    );\n    const amount_out = values_out[1]*10**(-token2Decimals);\n    console.log('amount out: ', amount_out)\n    return Number(amount_out);\n  } catch {\n    return false;\n  }\n}\n\n// This function calls the pair contract to fetch the reserves stored in a the liquidity pool between the token of address1 and the token\n// of address2. Some extra logic was needed to make sure that the results were returned in the correct order, as\n// `pair.getReserves()` would always return the reserves in the same order regardless of which order the addresses were.\n//    `address1` - An Ethereum address of the token to trade from (either a ERC20 token or AUT)\n//    `address2` - An Ethereum address of the token to trade to (either a ERC20 token or AUT)\n//    `pair` - The pair contract for the two tokens\nexport async function fetchReserves(address1, address2, pair, signer) {\n  try {\n\n    // Get decimals for each coin\n    const coin1 = new Contract(address1, ERC20.abi, signer);\n    const coin2 = new Contract(address2, ERC20.abi, signer);\n\n    const coin1Decimals = await coin1.decimals();\n    const coin2Decimals = await coin2.decimals();\n\n    // Get reserves\n    const reservesRaw = await pair.getReserves();\n\n    // Put the results in the right order\n    const results =  [\n      (await pair.token0()) === address1 ? reservesRaw[0] : reservesRaw[1],\n      (await pair.token1()) === address2 ? reservesRaw[1] : reservesRaw[0],\n    ];\n\n    // Scale each to the right decimal place\n    return [\n      (results[0]*10**(-coin1Decimals)),\n      (results[1]*10**(-coin2Decimals))\n    ]\n  } catch (err) {\n    console.log(\"error!\");\n    console.log(err);\n    return [0, 0];\n  }\n}\n\n// This function returns the reserves stored in a the liquidity pool between the token of address1 and the token\n// of address2, as well as the liquidity tokens owned by accountAddress for that pair.\n//    `address1` - An Ethereum address of the token to trade from (either a token or AUT)\n//    `address2` - An Ethereum address of the token to trade to (either a token or AUT)\n//    `factory` - The current factory\n//    `signer` - The current signer\nexport async function getReserves(\n  address1,\n  address2,\n  factory,\n  signer,\n  accountAddress\n) {\n  const pairAddress = await factory.getPair(address1, address2);\n  const pair = new Contract(pairAddress, PAIR.abi, signer);\n\n  if (pairAddress !== '0x0000000000000000000000000000000000000000'){\n    const reservesRaw = await fetchReserves(address1, address2, pair, signer);\n    const liquidityTokens_BN = await pair.balanceOf(accountAddress);\n    const liquidityTokens = Number(\n      ethers.utils.formatEther(liquidityTokens_BN)\n    ).toFixed(2);\n  \n    return [\n      reservesRaw[0].toFixed(2),\n      reservesRaw[1].toFixed(2),\n      liquidityTokens,\n    ];\n  } else {\n    console.log(\"no reserves yet\");\n    return [0,0];\n  }\n\n\n}\n","import React from \"react\";\nimport { Fab, Grid, InputBase, makeStyles } from \"@material-ui/core\";\nimport ExpandMoreIcon from \"@material-ui/icons/ExpandMore\";\nimport PropTypes from \"prop-types\";\nimport * as COLORS from \"@material-ui/core/colors\";\n\nconst useStyles = makeStyles((theme) => ({\n  container: {\n    padding: theme.spacing(1),\n    minHeight: \"80px\",\n    backgroundColor: COLORS.grey[50],\n    borderRadius: theme.spacing(2),\n    borderColor: COLORS.grey[300],\n    borderWidth: \"1px\",\n    borderStyle: \"solid\",\n  },\n  container_input: {\n    padding: theme.spacing(1),\n    minHeight: \"68px\",\n    backgroundColor: COLORS.grey[50],\n    borderRadius: theme.spacing(2),\n    borderColor: COLORS.grey[300],\n    borderWidth: \"1px\",\n    borderStyle: \"solid\",\n    marginLeft: \"50%\",\n    textAlign: \"right\",\n  },\n  container_blank: {\n    padding: theme.spacing(1),\n    minHeight: \"80px\",\n    borderRadius: theme.spacing(2),\n  },\n  grid: {\n    height: \"60px\",\n  },\n  fab: {\n    zIndex: \"0\",\n  },\n  input: {\n    ...theme.typography.h5,\n    width: \"100%\",\n  },\n  inputBase: {\n    textAlign: \"right\",\n  },\n}));\n\nCoinField.propTypes = {\n  onClick: PropTypes.func.isRequired,\n  symbol: PropTypes.string.isRequired,\n  value: PropTypes.string.isRequired,\n  onChange: PropTypes.func,\n  activeField: PropTypes.bool.isRequired,\n};\n\nexport function RemoveLiquidityField1(props) {\n  // This component is used to selecting a coin and entering a value, the props are explained below:\n  //      onClick - (string) => void - Called when the button is clicked\n  //      symbol - string - The text displayed on the button\n  //      value - string - The value of the text field\n  //      onChange - (e) => void - Called when the text field changes\n  //      activeField - boolean - Whether text can be entered into this field or not\n\n  const classes = useStyles();\n  const { onClick, symbol, value, onChange, activeField } = props;\n  return (\n    <div className={classes.container_blank}>\n      <Grid\n        container\n        direction=\"row\"\n        justifyContent=\"space-between\"\n        alignItems=\"center\"\n        className={classes.grid}\n      >\n        {/* Button */}\n        <Grid item xs={3}>\n          <Fab\n            size=\"small\"\n            variant=\"extended\"\n            onClick={onClick}\n            className={classes.fab}\n          >\n            {symbol}\n            <ExpandMoreIcon />\n          </Fab>\n        </Grid>\n        {/* Text Field */}\n        <Grid item xs={9}>\n          <InputBase\n            value={value}\n            onChange={onChange}\n            placeholder=\"0.0\"\n            disabled={!activeField}\n            classes={{\n              root: classes.container_input,\n              input: classes.inputBase,\n            }}\n          />\n        </Grid>\n        {/* </div> */}\n      </Grid>\n    </div>\n  );\n}\n\nexport function RemoveLiquidityField2(props) {\n  // This component is used to selecting a coin and entering a value, the props are explained below:\n  //      onClick - (string) => void - Called when the button is clicked\n  //      symbol - string - The text displayed on the button\n  //      value - string - The value of the text field\n  //      onChange - (e) => void - Called when the text field changes\n  //      activeField - boolean - Whether text can be entered into this field or not\n\n  const classes = useStyles();\n  const { onClick, symbol } = props;\n\n  return (\n    <div className={classes.container_blank}>\n      <Grid\n        container\n        direction=\"row\"\n        justifyContent=\"space-between\"\n        alignItems=\"center\"\n        className={classes.grid}\n      >\n        {/* Button */}\n        <Grid item xs={3}>\n          <Fab\n            size=\"small\"\n            variant=\"extended\"\n            onClick={onClick}\n            className={classes.fab}\n          >\n            {symbol}\n            <ExpandMoreIcon />\n          </Fab>\n        </Grid>\n      </Grid>\n    </div>\n  );\n}\n\nexport default function CoinField(props) {\n  // This component is used to selecting a token and entering a value, the props are explained below:\n  //      onClick - (string) => void - Called when the button is clicked\n  //      symbol - string - The text displayed on the button\n  //      value - string - The value of the text field\n  //      onChange - (e) => void - Called when the text field changes\n  //      activeField - boolean - Whether text can be entered into this field or not\n\n  const classes = useStyles();\n  const { onClick, symbol, value, onChange, activeField } = props;\n\n  return (\n    <div className={classes.container}>\n      <Grid\n        container\n        direction=\"row\"\n        justifyContent=\"space-between\"\n        alignItems=\"center\"\n        className={classes.grid}\n      >\n        {/* Button */}\n        <Grid item xs={3}>\n          <Fab\n            size=\"small\"\n            variant=\"extended\"\n            onClick={onClick}\n            className={classes.fab}\n          >\n            {symbol}\n            <ExpandMoreIcon />\n          </Fab>\n        </Grid>\n\n        {/* Text Field */}\n        <Grid item xs={9}>\n          <InputBase\n            value={value}\n            onChange={onChange}\n            placeholder=\"0.0\"\n            disabled={!activeField}\n            classes={{ root: classes.input, input: classes.inputBase }}\n          />\n        </Grid>\n      </Grid>\n    </div>\n  );\n}\n","import React from \"react\";\nimport { ButtonBase, Grid, makeStyles, Typography } from \"@material-ui/core\";\nimport PropTypes from \"prop-types\";\nimport * as COLORS from \"@material-ui/core/colors\";\n\nconst useStyles = makeStyles((theme) => ({\n  button: {\n    width: \"100%\",\n    paddingTop: theme.spacing(0.5),\n    paddingBottom: theme.spacing(0.5),\n    \"&:hover, &$focusVisible\": {\n      backgroundColor: COLORS.grey[200],\n    },\n  },\n  coinName: {\n    opacity: 0.6,\n  },\n}));\n\nCoinButton.propTypes = {\n  coinName: PropTypes.string.isRequired,\n  coinAbbr: PropTypes.string.isRequired,\n  onClick: PropTypes.func.isRequired,\n};\n\nexport default function CoinButton(props) {\n  const { coinName, coinAbbr, onClick, ...other } = props;\n  const classes = useStyles();\n\n  return (\n    <ButtonBase focusRipple className={classes.button} onClick={onClick}>\n      <Grid container direction=\"column\">\n        <Typography variant=\"h6\">{coinAbbr}</Typography>\n        <Typography variant=\"body2\" className={classes.coinName}>\n          {coinName}\n        </Typography>\n      </Grid>\n    </ButtonBase>\n  );\n}\n","import React from \"react\";\nimport {\n  Button,\n  Dialog,\n  Grid,\n  IconButton,\n  makeStyles,\n  TextField,\n  Typography,\n  withStyles,\n} from \"@material-ui/core\";\nimport MuiDialogTitle from \"@material-ui/core/DialogTitle\";\nimport MuiDialogActions from \"@material-ui/core/DialogActions\";\nimport CloseIcon from \"@material-ui/icons/Close\";\nimport CoinButton from \"./CoinButton\";\nimport { doesTokenExist } from \"../ethereumFunctions\";\nimport PropTypes from \"prop-types\";\nimport * as COLORS from \"@material-ui/core/colors\";\n\nconst styles = (theme) => ({\n  dialogContainer: {\n    borderRadius: theme.spacing(2),\n  },\n  titleSection: {\n    padding: theme.spacing(2),\n  },\n  titleText: {\n    alignSelf: \"center\",\n  },\n  hr: {\n    margin: 0,\n  },\n  address: {\n    paddingLeft: theme.spacing(2.5),\n    paddingRight: theme.spacing(2.5),\n    paddingBottom: theme.spacing(2),\n  },\n  coinList: {\n    height: \"300px\",\n    overflowY: \"scroll\",\n  },\n  coinContainer: {\n    paddingLeft: theme.spacing(0.5),\n    paddingRight: theme.spacing(0.5),\n    paddingTop: theme.spacing(2),\n    marginTop: theme.spacing(2),\n    overflow: \"hidden\",\n  },\n});\n\nconst useStyles = makeStyles(styles);\n\n// This is a modified version of MaterialUI's DialogTitle component, I've added a close button in the top right corner\nconst DialogTitle = withStyles(styles)((props) => {\n  const { children, classes, onClose, ...other } = props;\n  return (\n    <MuiDialogTitle\n      disableTypography\n      className={classes.titleSection}\n      {...other}\n    >\n      <Grid\n        container\n        direction=\"row\"\n        justifyContent=\"space-between\"\n        alignContent=\"center\"\n      >\n        <Typography variant=\"h6\" className={classes.titleText}>\n          {children}\n        </Typography>\n        {onClose ? (\n          <IconButton aria-label=\"close\" onClick={onClose}>\n            <CloseIcon />\n          </IconButton>\n        ) : null}\n      </Grid>\n    </MuiDialogTitle>\n  );\n});\n\n// This is a modified version of MaterialUI's DialogActions component, the color has been changed by modifying the CSS\nconst DialogActions = withStyles((theme) => ({\n  root: {\n    margin: 0,\n    padding: theme.spacing(1),\n    backgroundColor: COLORS.grey[100],\n  },\n}))(MuiDialogActions);\n\nCoinDialog.propTypes = {\n  onClose: PropTypes.func.isRequired,\n  open: PropTypes.bool.isRequired,\n  coins: PropTypes.array.isRequired,\n};\n\nexport default function CoinDialog(props) {\n  // The CoinDialog component will display a dialog window on top of the page, allowing a user to select a coin\n  // from a list (list can be found in 'src/constants/coins.js') or enter an address into a search field. Any entered\n  // addresses will first be validated to make sure they exist.\n  // When the dialog closes, it will call the `onClose` prop with 1 argument which will either be undefined (if the\n  // user closes the dialog without selecting anything), or will be a string containing the address of a coin.\n\n  const classes = useStyles();\n  const { onClose, open, coins, signer, ...others } = props;\n\n  const [address, setAddress] = React.useState(\"\");\n  const [error, setError] = React.useState(\"\");\n\n  // Called when the user tries to input a custom address, this function will validate the address and will either\n  // then close the dialog and return the validated address, or will display an error.\n  const submit = () => {\n    if (doesTokenExist(address, signer)) {\n      exit(address);\n    } else {\n      setError(\"This address is not valid\");\n    }\n  };\n\n  // Resets any fields in the dialog (in case it's opened in the future) and calls the `onClose` prop\n  const exit = (value) => {\n    setError(\"\");\n    setAddress(\"\");\n    onClose(value);\n  };\n\n  return (\n    <Dialog\n      open={open}\n      onClose={() => exit(undefined)}\n      fullWidth\n      maxWidth=\"sm\"\n      classes={{ paper: classes.dialogContainer }}\n    >\n      <DialogTitle onClose={() => exit(undefined)}>Select Coin</DialogTitle>\n\n      <hr className={classes.hr} />\n\n      <div className={classes.coinContainer}>\n        <Grid container direction=\"column\" spacing={1} alignContent=\"center\">\n          <TextField\n            value={address}\n            onChange={(e) => setAddress(e.target.value)}\n            variant=\"outlined\"\n            placeholder=\"Paste Address\"\n            error={error !== \"\"}\n            helperText={error}\n            fullWidth\n            className={classes.address}\n          />\n\n          <hr className={classes.hr} />\n\n          <Grid item className={classes.coinList}>\n            <Grid container direction=\"column\">\n              {/* Maps all of the tokens in the constants file to buttons */}\n              {coins.map((coin, index) => (\n                <Grid item key={index} xs={12}>\n                  <CoinButton\n                    coinName={coin.name}\n                    coinAbbr={coin.abbr}\n                    onClick={() => exit(coin.address)}\n                  />\n                </Grid>\n              ))}\n            </Grid>\n          </Grid>\n        </Grid>\n      </div>\n\n      <hr className={classes.hr} />\n\n      <DialogActions>\n        <Button autoFocus onClick={submit} color=\"primary\">\n          Enter\n        </Button>\n      </DialogActions>\n    </Dialog>\n  );\n}\n","import React from \"react\";\nimport { Button, CircularProgress, makeStyles } from \"@material-ui/core\";\nimport green from \"@material-ui/core/colors/green\";\nimport red from \"@material-ui/core/colors/red\";\n\nconst useStyles = makeStyles((theme) => ({\n  wrapper: {\n    margin: 0,\n    position: \"relative\",\n  },\n  progress: {\n    color: green[500],\n    position: \"absolute\",\n    top: \"50%\",\n    left: \"50%\",\n    marginTop: -12,\n    marginLeft: -12,\n  },\n}));\n\nexport default function LoadingButton(props) {\n  const classes = useStyles();\n  const { children, loading, valid, success, fail, onClick, ...other } = props;\n  return (\n    <div className={classes.wrapper}>\n      <Button\n        variant=\"contained\"\n        color=\"primary\"\n        fullWidth\n        disabled={loading || !valid}\n        type=\"submit\"\n        onClick={onClick}\n        {...other}\n      >\n        {children}\n      </Button>\n      {loading && <CircularProgress size={24} className={classes.progress} />}\n    </div>\n  );\n}\n","import React from \"react\";\nimport {\n  Dialog,\n  Grid,\n  IconButton,\n  makeStyles,\n  Typography,\n  withStyles,\n} from \"@material-ui/core\";\nimport MuiDialogTitle from \"@material-ui/core/DialogTitle\";\nimport CloseIcon from \"@material-ui/icons/Close\";\n\nconst styles = (theme) => ({\n  dialogContainer: {\n    borderRadius: theme.spacing(2),\n  },\n});\n\nconst useStyles = makeStyles(styles);\n\nexport default function WrongNetwork(props) {\n\n  const classes = useStyles();\n  const {open} = props;\n  return (\n    <Dialog\n      open={open}\n      fullWidth\n      maxWidth=\"sm\"\n      classes={{ paper: classes.dialogContainer }}\n    >\n      <MuiDialogTitle>Unsupported Network</MuiDialogTitle>\n    </Dialog>\n  );\n}\n","import React, { useEffect } from \"react\";\nimport {\n  Container,\n  Grid,\n  IconButton,\n  makeStyles,\n  Paper,\n  Typography,\n} from \"@material-ui/core\";\nimport SwapVerticalCircleIcon from \"@material-ui/icons/SwapVerticalCircle\";\nimport { useSnackbar } from \"notistack\";\nimport LoopIcon from \"@material-ui/icons/Loop\";\nimport {\n  getAccount,\n  getFactory,\n  getProvider,\n  getRouter,\n  getSigner,\n  getNetwork,\n  getAmountOut,\n  getBalanceAndSymbol,\n  getWeth,\n  swapTokens,\n  getReserves,\n} from \"../ethereumFunctions\";\nimport CoinField from \"./CoinField\";\nimport CoinDialog from \"./CoinDialog\";\nimport LoadingButton from \"../Components/LoadingButton\";\nimport WrongNetwork from \"../Components/wrongNetwork\";\nimport COINS from \"../constants/coins\";\nimport * as chains from \"../constants/chains\";\n\nconst styles = (theme) => ({\n  paperContainer: {\n    borderRadius: theme.spacing(2),\n    padding: theme.spacing(1),\n    paddingBottom: theme.spacing(3),\n  },\n  switchButton: {\n    zIndex: 1,\n    margin: \"-16px\",\n    padding: theme.spacing(0.5),\n  },\n  fullWidth: {\n    width: \"100%\",\n  },\n  title: {\n    textAlign: \"center\",\n    padding: theme.spacing(0.5),\n    marginBottom: theme.spacing(1),\n  },\n  hr: {\n    width: \"100%\",\n  },\n  balance: {\n    padding: theme.spacing(1),\n    overflow: \"wrap\",\n    textAlign: \"center\",\n  },\n  footer: {\n    marginTop: \"285px\",\n  },\n});\n\nconst useStyles = makeStyles(styles);\n\nfunction CoinSwapper(props) {\n  const classes = useStyles();\n  const { enqueueSnackbar } = useSnackbar();\n\n  // Stores information for the Autonity Network\n\n  const [provider, setProvider] = React.useState(getProvider());\n  const [signer, setSigner] = React.useState(getSigner(provider));\n\n  // The following are populated in a react hook\n  const [account, setAccount] = React.useState(undefined);\n  const [chainId, setChainId] = React.useState(undefined);\n  const [router, setRouter] = React.useState(undefined);\n  const [weth, setWeth] = React.useState(undefined);\n  const [factory, setFactory] = React.useState(undefined);\n\n  // Stores a record of whether their respective dialog window is open\n  const [dialog1Open, setDialog1Open] = React.useState(false);\n  const [dialog2Open, setDialog2Open] = React.useState(false);\n  const [wrongNetworkOpen, setwrongNetworkOpen] = React.useState(false);\n\n  // Stores data about their respective coin\n  const [coin1, setCoin1] = React.useState({\n    address: undefined,\n    symbol: undefined,\n    balance: undefined,\n  });\n  const [coin2, setCoin2] = React.useState({\n    address: undefined,\n    symbol: undefined,\n    balance: undefined,\n  });\n\n  const [coins, setCoins] = React.useState([]);\n\n  // Stores the current reserves in the liquidity pool between coin1 and coin2\n  const [reserves, setReserves] = React.useState([\"0.0\", \"0.0\"]);\n\n  // Stores the current value of their respective text box\n  const [field1Value, setField1Value] = React.useState(\"\");\n  const [field2Value, setField2Value] = React.useState(\"\");\n\n  // Controls the loading button\n  const [loading, setLoading] = React.useState(false);\n\n  // Switches the top and bottom coins, this is called when users hit the swap button or select the opposite\n  // token in the dialog (e.g. if coin1 is TokenA and the user selects TokenB when choosing coin2)\n  const switchFields = () => {\n    setCoin1(coin2);\n    setCoin2(coin1);\n    setField1Value(field2Value);\n    setReserves(reserves.reverse());\n  };\n\n  // These functions take an HTML event, pull the data out and puts it into a state variable.\n  const handleChange = {\n    field1: (e) => {\n      setField1Value(e.target.value);\n    },\n  };\n\n  // Turns the account's balance into something nice and readable\n  const formatBalance = (balance, symbol) => {\n    if (balance && symbol)\n      return parseFloat(balance).toPrecision(8) + \" \" + symbol;\n    else return \"0.0\";\n  };\n\n  // Turns the coin's reserves into something nice and readable\n  const formatReserve = (reserve, symbol) => {\n    if (reserve && symbol) return reserve + \" \" + symbol;\n    else return \"0.0\";\n  };\n\n  // Determines whether the button should be enabled or not\n  const isButtonEnabled = () => {\n    let validFloat = new RegExp(\"^[0-9]*[.,]?[0-9]*$\");\n\n    // If both coins have been selected, and a valid float has been entered which is less than the user's balance, then return true\n    return (\n      coin1.address &&\n      coin2.address &&\n      validFloat.test(field1Value) &&\n      parseFloat(field1Value) <= coin1.balance\n    );\n  };\n\n  // Called when the dialog window for coin1 exits\n  const onToken1Selected = (address) => {\n    // Close the dialog window\n    setDialog1Open(false);\n\n    // If the user inputs the same token, we want to switch the data in the fields\n    if (address === coin2.address) {\n      switchFields();\n    }\n    // We only update the values if the user provides a token\n    else if (address) {\n      // Getting some token data is async, so we need to wait for the data to return, hence the promise\n      getBalanceAndSymbol(account, address, provider, signer, weth.address, coins).then((data) => {\n        setCoin1({\n          address: address,\n          symbol: data.symbol,\n          balance: data.balance,\n        });\n      });\n    }\n  };\n\n  // Called when the dialog window for coin2 exits\n  const onToken2Selected = (address) => {\n    // Close the dialog window\n    setDialog2Open(false);\n\n    // If the user inputs the same token, we want to switch the data in the fields\n    if (address === coin1.address) {\n      switchFields();\n    }\n    // We only update the values if the user provides a token\n    else if (address) {\n      // Getting some token data is async, so we need to wait for the data to return, hence the promise\n      getBalanceAndSymbol(account, address, provider, signer, weth.address, coins).then((data) => {\n        setCoin2({\n          address: address,\n          symbol: data.symbol,\n          balance: data.balance,\n        });\n      });\n    }\n  };\n\n  // Calls the swapTokens Ethereum function to make the swap, then resets nessicary state variables\n  const swap = () => {\n    console.log(\"Attempting to swap tokens...\");\n    setLoading(true);\n\n    swapTokens(\n      coin1.address,\n      coin2.address,\n      parseFloat(field1Value),\n      router,\n      account,\n      signer\n    )\n      .then(() => {\n        setLoading(false);\n\n        // If the transaction was successful, we clear to input to make sure the user doesn't accidental redo the transfer\n        setField1Value(\"\");\n        enqueueSnackbar(\"Transaction Successful\", { variant: \"success\" });\n      })\n      .catch((e) => {\n        setLoading(false);\n        enqueueSnackbar(\"Transaction Failed (\" + e.message + \")\", {\n          variant: \"error\",\n          autoHideDuration: 10000,\n        });\n      });\n  };\n\n  // The lambdas within these useEffects will be called when a particular dependency is updated. These dependencies\n  // are defined in the array of variables passed to the function after the lambda expression. If there are no dependencies\n  // the lambda will only ever be called when the component mounts. These are very useful for calculating new values\n  // after a particular state change, for example, calculating the new exchange rate whenever the addresses\n  // of the two coins change.\n\n  // This hook is called when either of the state variables `coin1.address` or `coin2.address` change.\n  // This means that when the user selects a different coin to convert between, or the coins are swapped,\n  // the new reserves will be calculated.\n  useEffect(() => {\n    console.log(\n      \"Trying to get Reserves between:\\n\" + coin1.address + \"\\n\" + coin2.address\n    );\n\n    if (coin1.address && coin2.address) {\n      getReserves(coin1.address, coin2.address, factory, signer, account).then(\n        (data) => setReserves(data)\n      );\n    }\n  }, [coin1.address, coin2.address, account, factory, router, signer]);\n\n  // This hook is called when either of the state variables `field1Value` `coin1.address` or `coin2.address` change.\n  // It attempts to calculate and set the state variable `field2Value`\n  // This means that if the user types a new value into the conversion box or the conversion rate changes,\n  // the value in the output box will change.\n  useEffect(() => {\n    if (isNaN(parseFloat(field1Value))) {\n      setField2Value(\"\");\n    } else if (field1Value && coin1.address && coin2.address) {\n      getAmountOut(coin1.address, coin2.address, field1Value, router, signer).then(\n        (amount) => setField2Value(amount.toFixed(7))\n      );\n    } else {\n      setField2Value(\"\");\n    }\n  }, [field1Value, coin1.address, coin2.address]);\n\n  // This hook creates a timeout that will run every ~10 seconds, it's role is to check if the user's balance has\n  // updated has changed. This allows them to see when a transaction completes by looking at the balance output.\n  useEffect(() => {\n    const coinTimeout = setTimeout(() => {\n      console.log(\"Checking balances...\");\n\n      if (coin1.address && coin2.address && account) {\n        getReserves(\n          coin1.address,\n          coin2.address,\n          factory,\n          signer,\n          account\n        ).then((data) => setReserves(data));\n      }\n\n      if (coin1 && account &&!wrongNetworkOpen) {\n        getBalanceAndSymbol(account, coin1.address, provider, signer, weth.address, coins).then(\n          (data) => {\n            setCoin1({\n              ...coin1,\n              balance: data.balance,\n            });\n          }\n        );\n      }\n      if (coin2 && account &&!wrongNetworkOpen) {\n        getBalanceAndSymbol(account, coin2.address, provider, signer, weth.address, coins).then(\n          (data) => {\n            setCoin2({\n              ...coin2,\n              balance: data.balance,\n            });\n          }\n        );\n      }\n    }, 10000);\n\n    return () => clearTimeout(coinTimeout);\n  });\n\n  // This hook will run when the component first mounts, it can be useful to put logic to populate variables here\n  useEffect(() => {\n    \n    getAccount().then((account) => {\n      setAccount(account);\n    });\n\n    async function Network() {\n      const chainId = await getNetwork(provider).then((chainId) => {\n        setChainId(chainId);\n        return chainId;\n      });\n\n      if (chains.networks.includes(chainId)){\n        setwrongNetworkOpen(false);\n        console.log('chainID: ', chainId);\n        // Get the router using the chainID\n        const router = await getRouter (chains.routerAddress.get(chainId), signer)\n        setRouter(router);\n        // Get Weth address from router\n        await router.WETH().then((wethAddress) => {\n          setWeth(getWeth (wethAddress, signer));\n          // Set the value of the weth address in the default coins array\n          const coins = COINS.get(chainId);\n          coins[0].address = wethAddress;\n          setCoins(coins);\n        });\n        // Get the factory address from the router\n        await router.factory().then((factory_address) => {\n          setFactory(getFactory (factory_address, signer));\n        })\n      } else {\n        console.log('Wrong network mate.');\n        setwrongNetworkOpen(true);\n      }\n    }\n\n    Network()\n\n  }, []);\n\n  return (\n    <div>\n      {/* Dialog Windows */}\n      <CoinDialog\n        open={dialog1Open}\n        onClose={onToken1Selected}\n        coins={coins}\n        signer={signer}\n      />\n      <CoinDialog\n        open={dialog2Open}\n        onClose={onToken2Selected}\n        coins={coins}\n        signer={signer}\n      />\n      <WrongNetwork\n        open={wrongNetworkOpen}\n        />\n\n      {/* Coin Swapper */}\n      <Container maxWidth=\"xs\">\n        <Paper className={classes.paperContainer}>\n          <Typography variant=\"h5\" className={classes.title}>\n            Swap Coins\n          </Typography>\n\n          <Grid container direction=\"column\" alignItems=\"center\" spacing={2}>\n            <Grid item xs={12} className={classes.fullWidth}>\n              <CoinField\n                activeField={true}\n                value={field1Value}\n                onClick={() => setDialog1Open(true)}\n                onChange={handleChange.field1}\n                symbol={coin1.symbol !== undefined ? coin1.symbol : \"Select\"}\n              />\n            </Grid>\n\n            <IconButton onClick={switchFields} className={classes.switchButton}>\n              <SwapVerticalCircleIcon fontSize=\"medium\" />\n            </IconButton>\n\n            <Grid item xs={12} className={classes.fullWidth}>\n              <CoinField\n                activeField={false}\n                value={field2Value}\n                onClick={() => setDialog2Open(true)}\n                symbol={coin2.symbol !== undefined ? coin2.symbol : \"Select\"}\n              />\n            </Grid>\n\n            <hr className={classes.hr} />\n\n            {/* Balance Display */}\n            <Typography variant=\"h6\">Your Balances</Typography>\n            <Grid container direction=\"row\" justifyContent=\"space-between\">\n              <Grid item xs={6}>\n                <Typography variant=\"body1\" className={classes.balance}>\n                  {formatBalance(coin1.balance, coin1.symbol)}\n                </Typography>\n              </Grid>\n              <Grid item xs={6}>\n                <Typography variant=\"body1\" className={classes.balance}>\n                  {formatBalance(coin2.balance, coin2.symbol)}\n                </Typography>\n              </Grid>\n            </Grid>\n\n            <hr className={classes.hr} />\n\n            {/* Reserves Display */}\n            <Typography variant=\"h6\">Reserves</Typography>\n            <Grid container direction=\"row\" justifyContent=\"space-between\">\n              <Grid item xs={6}>\n                <Typography variant=\"body1\" className={classes.balance}>\n                  {formatReserve(reserves[0], coin1.symbol)}\n                </Typography>\n              </Grid>\n              <Grid item xs={6}>\n                <Typography variant=\"body1\" className={classes.balance}>\n                  {formatReserve(reserves[1], coin2.symbol)}\n                </Typography>\n              </Grid>\n            </Grid>\n\n            <hr className={classes.hr} />\n\n            <LoadingButton\n              loading={loading}\n              valid={isButtonEnabled()}\n              success={false}\n              fail={false}\n              onClick={swap}\n            >\n              <LoopIcon />\n              Swap\n            </LoadingButton>\n          </Grid>\n        </Paper>\n      </Container>\n\n      <Grid\n        container\n        className={classes.footer}\n        direction=\"row\"\n        justifyContent=\"center\"\n        alignItems=\"flex-end\"\n      >\n        <p>\n          Clearmatics Autonity Uniswap | Get AUT for use in the bakerloo testnet{\" \"}\n          <a href=\"https://faucet.bakerloo.autonity.network/\">here</a>\n        </p>\n      </Grid>\n    </div>\n  );\n}\n\nexport default CoinSwapper;\n","import React from \"react\";\nimport { ButtonGroup, Button } from \"@material-ui/core\";\n\nexport default function SwitchButton(props) {\n  const { setDeploy } = props;\n\n  const changeStyles = (K) => {\n    if (K === true) {\n      let add_button = document.getElementById(\"add-button\");\n      add_button.style.backgroundColor = \"#ff0000\";\n\n      let remove_button = document.getElementById(\"remove-button\");\n      remove_button.style.backgroundColor = \"#9e9e9e\";\n    } else {\n      let remove_button = document.getElementById(\"remove-button\");\n      remove_button.style.backgroundColor = \"#ff0000\";\n\n      let add_button = document.getElementById(\"add-button\");\n      add_button.style.backgroundColor = \"#9e9e9e\";\n    }\n  };\n\n  return (\n    <div>\n      <ButtonGroup size=\"large\" variant=\"contained\">\n        <Button\n          id=\"add-button\"\n          color=\"primary\"\n          text=\"white\"\n          onClick={() => {\n            setDeploy(true);\n            changeStyles(true);\n          }}\n        >\n          Deploy Liquidity\n        </Button>\n\n        <Button\n          id=\"remove-button\"\n          color=\"secondary\"\n          text=\"white\"\n          onClick={() => {\n            setDeploy(false);\n            changeStyles(false);\n          }}\n        >\n          Remove Liquidity\n        </Button>\n      </ButtonGroup>\n    </div>\n  );\n}\n","import { Contract, ethers } from \"ethers\";\nimport { fetchReserves } from \"../ethereumFunctions\";\n\nconst ERC20 = require(\"../build/ERC20.json\");\nconst PAIR = require(\"../build/IUniswapV2Pair.json\");\n\n// Function used to add Liquidity to any pair of tokens or token-AUT\n// To work correctly, there needs to be 9 arguments:\n//    `address1` - An Ethereum address of the coin to add from (either a token or AUT)\n//    `address2` - An Ethereum address of the coin to add to (either a token or AUT)\n//    `amount1` - A float or similar number representing the value of address1's coin to add\n//    `amount2` - A float or similar number representing the value of address2's coin to add\n//    `amount1Min` - A float or similar number representing the minimum of address1's coin to add\n//    `amount2Min` - A float or similar number representing the minimum of address2's coin to add\n//    `routerContract` - The router contract to carry out this trade\n//    `accountAddress` - An Ethereum address of the current user's account\n//    `provider` - The current provider\n//    `signer` - The current signer\nexport async function addLiquidity(\n  address1,\n  address2,\n  amount1,\n  amount2,\n  amount1min,\n  amount2min,\n  routerContract,\n  account,\n  signer\n) {\n  const token1 = new Contract(address1, ERC20.abi, signer);\n  const token2 = new Contract(address2, ERC20.abi, signer);\n\n  const token1Decimals = await token1.decimals();\n  const token2Decimals = await token2.decimals();\n\n  const amountIn1 = ethers.utils.parseUnits(String(amount1), token1Decimals);\n  const amountIn2 = ethers.utils.parseUnits(String(amount2), token2Decimals);\n\n  const amount1Min = ethers.utils.parseUnits(String(amount1min), token1Decimals);\n  const amount2Min = ethers.utils.parseUnits(String(amount2min), token2Decimals);\n\n  const time = Math.floor(Date.now() / 1000) + 200000;\n  const deadline = ethers.BigNumber.from(time);\n\n  await token1.approve(routerContract.address, amountIn1);\n  await token2.approve(routerContract.address, amountIn2);\n\n  const wethAddress = await routerContract.WETH();\n\n  console.log([\n    address1,\n    address2,\n    Number(amountIn1),\n    Number(amountIn2),\n    Number(amount1Min),\n    Number(amount2Min),\n    account,\n    deadline,\n  ]);\n\n  if (address1 === wethAddress) {\n    // Eth + Token\n    await routerContract.addLiquidityETH(\n      address2,\n      amountIn2,\n      amount2Min,\n      amount1Min,\n      account,\n      deadline,\n      { value: amountIn1 }\n    );\n  } else if (address2 === wethAddress) {\n    // Token + Eth\n    await routerContract.addLiquidityETH(\n      address1,\n      amountIn1,\n      amount1Min,\n      amount2Min,\n      account,\n      deadline,\n      { value: amountIn2 }\n    );\n  } else {\n    // Token + Token\n    await routerContract.addLiquidity(\n      address1,\n      address2,\n      amountIn1,\n      amountIn2,\n      amount1Min,\n      amount2Min,\n      account,\n      deadline\n    );\n  }\n}\n\n// Function used to remove Liquidity from any pair of tokens or token-AUT\n// To work correctly, there needs to be 9 arguments:\n//    `address1` - An Ethereum address of the coin to recieve (either a token or AUT)\n//    `address2` - An Ethereum address of the coin to recieve (either a token or AUT)\n//    `liquidity_tokens` - A float or similar number representing the value of liquidity tokens you will burn to get tokens back\n//    `amount1Min` - A float or similar number representing the minimum of address1's coin to recieve\n//    `amount2Min` - A float or similar number representing the minimum of address2's coin to recieve\n//    `routerContract` - The router contract to carry out this trade\n//    `accountAddress` - An Ethereum address of the current user's account\n//    `provider` - The current provider\n//    `signer` - The current signer\nexport async function removeLiquidity(\n  address1,\n  address2,\n  liquidity_tokens,\n  amount1min,\n  amount2min,\n  routerContract,\n  account,\n  signer,\n  factory\n) {\n  const token1 = new Contract(address1, ERC20.abi, signer);\n  const token2 = new Contract(address2, ERC20.abi, signer);\n\n  const token1Decimals = await token1.decimals();\n  const token2Decimals = await token2.decimals();\n\n  const liquidity = ethers.utils.parseUnits(String(liquidity_tokens), 18);\n\n  const amount1Min = ethers.utils.parseUnits(String(amount1min), token1Decimals);\n  const amount2Min = ethers.utils.parseUnits(String(amount2min), token2Decimals);\n\n  const time = Math.floor(Date.now() / 1000) + 200000;\n  const deadline = ethers.BigNumber.from(time);\n\n  const wethAddress = await routerContract.WETH();\n  const pairAddress = await factory.getPair(address1, address2);\n  const pair = new Contract(pairAddress, PAIR.abi, signer);\n\n  await pair.approve(routerContract.address, liquidity);\n\n  console.log([\n    address1,\n    address2,\n    Number(liquidity),\n    Number(amount1Min),\n    Number(amount2Min),\n    account,\n    deadline,\n  ]);\n\n  if (address1 === wethAddress) {\n    // Eth + Token\n    await routerContract.removeLiquidityETH(\n      address2,\n      liquidity,\n      amount2Min,\n      amount1Min,\n      account,\n      deadline\n    );\n  } else if (address2 === wethAddress) {\n    // Token + Eth\n    await routerContract.removeLiquidityETH(\n      address1,\n      liquidity,\n      amount1Min,\n      amount2Min,\n      account,\n      deadline\n    );\n  } else {\n    // Token + Token\n    await routerContract.removeLiquidity(\n      address1,\n      address2,\n      liquidity,\n      amount1Min,\n      amount2Min,\n      account,\n      deadline\n    );\n  }\n}\n\nconst quote = (amount1, reserve1, reserve2) => {\n  const amount2 = amount1 * (reserve2 / reserve1);\n  const amountOut = Math.sqrt(amount2 * amount1);\n  return [amount2, amountOut];\n};\n\n// Function used to get a quote of the liquidity addition\n//    `address1` - An Ethereum address of the coin to recieve (either a token or AUT)\n//    `address2` - An Ethereum address of the coin to recieve (either a token or AUT)\n//    `amountA_desired` - The prefered value of the first token that the user would like to deploy as liquidity\n//    `amountB_desired` - The prefered value of the second token that the user would like to deploy as liquidity\n//    `factory` - The current factory\n//    `signer` - The current signer\n\nexport async function quoteAddLiquidity(\n  address1,\n  address2,\n  amountADesired,\n  amountBDesired,\n  factory,\n  signer\n) {\n  const pairAddress = await factory.getPair(address1, address2);\n  const pair = new Contract(pairAddress, PAIR.abi, signer);\n\n  const reservesRaw = await fetchReserves(address1, address2, pair, signer); // Returns the reserves already formated as ethers\n  const reserveA = reservesRaw[0];\n  const reserveB = reservesRaw[1];\n\n  if (reserveA === 0 && reserveB === 0) {\n    let amountOut = Math.sqrt(reserveA * reserveB);\n    return [\n      amountADesired.toString(),\n      amountBDesired.toString(),\n      amountOut.toString(),\n    ];\n  } else {\n    let [amountBOptimal, amountOut] = quote(amountADesired, reserveA, reserveB);\n    if (amountBOptimal <= amountBDesired) {\n      return [\n        amountADesired.toString(),\n        amountBOptimal.toString(),\n        amountOut.toString(),\n      ];\n    } else {\n      let [amountAOptimal, amountOut] = quote(\n        amountBDesired,\n        reserveB,\n        reserveA\n      );\n      console.log(amountAOptimal, amountOut);\n      return [\n        amountAOptimal.toString(),\n        amountBDesired.toString(),\n        amountOut.toString(),\n      ];\n    }\n  }\n}\n\n// Function used to get a quote of the liquidity removal\n//    `address1` - An Ethereum address of the coin to recieve (either a token or AUT)\n//    `address2` - An Ethereum address of the coin to recieve (either a token or AUT)\n//    `liquidity` - The amount of liquidity tokens the user will burn to get their tokens back\n//    `factory` - The current factory\n//    `signer` - The current signer\n\nexport async function quoteRemoveLiquidity(\n  address1,\n  address2,\n  liquidity,\n  factory,\n  signer\n) {\n  const pairAddress = await factory.getPair(address1, address2);\n  console.log(\"pair address\", pairAddress);\n  const pair = new Contract(pairAddress, PAIR.abi, signer);\n\n  const reservesRaw = await fetchReserves(address1, address2, pair, signer); // Returns the reserves already formated as ethers\n  const reserveA = reservesRaw[0];\n  const reserveB = reservesRaw[1];\n\n  const feeOn =\n    (await factory.feeTo()) !== 0x0000000000000000000000000000000000000000;\n\n  const _kLast = await pair.kLast();\n  const kLast = Number(ethers.utils.formatEther(_kLast));\n\n  const _totalSupply = await pair.totalSupply();\n  let totalSupply = Number(ethers.utils.formatEther(_totalSupply));\n\n  if (feeOn && kLast > 0) {\n    const feeLiquidity =\n      (totalSupply * (Math.sqrt(reserveA * reserveB) - Math.sqrt(kLast))) /\n      (5 * Math.sqrt(reserveA * reserveB) + Math.sqrt(kLast));\n    totalSupply = totalSupply + feeLiquidity;\n  }\n\n  const Aout = (reserveA * liquidity) / totalSupply;\n  const Bout = (reserveB * liquidity) / totalSupply;\n\n  return [liquidity, Aout, Bout];\n}\n","import React, { useEffect } from \"react\";\nimport { Grid, makeStyles, Paper, Typography } from \"@material-ui/core\";\nimport AccountBalanceIcon from \"@material-ui/icons/AccountBalance\";\nimport { useSnackbar } from \"notistack\";\nimport {\n  getAccount,\n  getFactory,\n  getProvider,\n  getRouter,\n  getSigner,\n  getBalanceAndSymbol,\n  getWeth,\n  getReserves,\n  getNetwork\n} from \"../ethereumFunctions\";\n\nimport { addLiquidity, quoteAddLiquidity } from \"./LiquidityFunctions\";\n\nimport CoinField from \"../CoinSwapper/CoinField\";\nimport CoinDialog from \"../CoinSwapper/CoinDialog\";\nimport LoadingButton from \"../Components/LoadingButton\";\nimport WrongNetwork from \"../Components/wrongNetwork\";\nimport COINS from \"../constants/coins\";\nimport * as chains from \"../constants/chains\";\n\nconst styles = (theme) => ({\n  paperContainer: {\n    borderRadius: theme.spacing(2),\n    padding: theme.spacing(2),\n    paddingBottom: theme.spacing(3),\n    width: \"40%\",\n    overflow: \"wrap\",\n    background: \"linear-gradient(45deg, #ff0000 30%, #FF8E53 90%)\",\n    color: \"white\",\n  },\n  fullWidth: {\n    width: \"100%\",\n  },\n  values: {\n    width: \"50%\",\n  },\n  title: {\n    textAlign: \"center\",\n    padding: theme.spacing(0.5),\n    marginBottom: theme.spacing(1),\n  },\n  hr: {\n    width: \"100%\",\n  },\n  balance: {\n    padding: theme.spacing(1),\n    overflow: \"wrap\",\n    textAlign: \"center\",\n  },\n  buttonIcon: {\n    marginRight: theme.spacing(1),\n    padding: theme.spacing(0.4),\n  },\n});\n\nconst useStyles = makeStyles(styles);\n\nfunction LiquidityDeployer(props) {\n  const classes = useStyles();\n  const { enqueueSnackbar } = useSnackbar();\n\n  // Stores information for the Autonity Network\n  const [provider, setProvider] = React.useState(getProvider());\n  const [signer, setSigner] = React.useState(getSigner(provider));\n\n  // The following are populated in a react hook\n  const [account, setAccount] = React.useState(undefined);\n  const [chainId, setChainId] = React.useState(undefined);\n  const [router, setRouter] = React.useState(undefined);\n  const [weth, setWeth] = React.useState(undefined);\n  const [factory, setFactory] = React.useState(undefined);\n\n  // Stores a record of whether their respective dialog window is open\n  const [dialog1Open, setDialog1Open] = React.useState(false);\n  const [dialog2Open, setDialog2Open] = React.useState(false);\n  const [wrongNetworkOpen, setwrongNetworkOpen] = React.useState(false);\n\n  // Stores data about their respective coin\n  const [coin1, setCoin1] = React.useState({\n    address: undefined,\n    symbol: undefined,\n    balance: undefined,\n  });\n  const [coin2, setCoin2] = React.useState({\n    address: undefined,\n    symbol: undefined,\n    balance: undefined,\n  });\n\n  const [coins, setCoins] = React.useState([]);\n\n  // Stores the current reserves in the liquidity pool between coin1 and coin2\n  const [reserves, setReserves] = React.useState([\"0.0\", \"0.0\"]);\n\n  // Stores the current value of their respective text box\n  const [field1Value, setField1Value] = React.useState(\"\");\n  const [field2Value, setField2Value] = React.useState(\"\");\n\n  // Controls the loading button\n  const [loading, setLoading] = React.useState(false);\n\n  // Stores the user's balance of liquidity tokens for the current pair\n  const [liquidityTokens, setLiquidityTokens] = React.useState(\"\");\n\n  // Used when getting a quote of liquidity\n  const [liquidityOut, setLiquidityOut] = React.useState([0, 0, 0]);\n\n  // Switches the top and bottom coins, this is called when users hit the swap button or select the opposite\n  // token in the dialog (e.g. if coin1 is TokenA and the user selects TokenB when choosing coin2)\n  const switchFields = () => {\n    let oldField1Value = field1Value;\n    let oldField2Value = field2Value;\n\n    setCoin1(coin2);\n    setCoin2(coin1);\n    setField1Value(oldField2Value);\n    setField2Value(oldField1Value);\n    setReserves(reserves.reverse());\n  };\n\n  // These functions take an HTML event, pull the data out and puts it into a state variable.\n  const handleChange = {\n    field1: (e) => {\n      setField1Value(e.target.value);\n    },\n    field2: (e) => {\n      setField2Value(e.target.value);\n    },\n  };\n\n  // Turns the account's balance into something nice and readable\n  const formatBalance = (balance, symbol) => {\n    if (balance && symbol)\n      return parseFloat(balance).toPrecision(8) + \" \" + symbol;\n    else return \"0.0\";\n  };\n\n  // Turns the coin's reserves into something nice and readable\n  const formatReserve = (reserve, symbol) => {\n    if (reserve && symbol) return reserve + \" \" + symbol;\n    else return \"0.0\";\n  };\n\n  // Determines whether the button should be enabled or not\n  const isButtonEnabled = () => {\n    let validFloat = new RegExp(\"^[0-9]*[.,]?[0-9]*$\");\n\n    // If both coins have been selected, and a valid float has been entered for both, which are less than the user's balances, then return true\n    return (\n      coin1.address &&\n      coin2.address &&\n      validFloat.test(field1Value) &&\n      validFloat.test(field2Value) &&\n      parseFloat(field1Value) <= coin1.balance &&\n      parseFloat(field2Value) <= coin2.balance\n    );\n  };\n\n  const deploy = () => {\n    console.log(\"Attempting to deploy liquidity...\");\n    setLoading(true);\n\n    addLiquidity(\n      coin1.address,\n      coin2.address,\n      parseFloat(field1Value),\n      parseFloat(field2Value),\n      0,\n      0,\n      router,\n      account,\n      signer\n    )\n      .then(() => {\n        setLoading(false);\n\n        // If the transaction was successful, we clear to input to make sure the user doesn't accidental redo the transfer\n        setField1Value(\"\");\n        setField2Value(\"\");\n        enqueueSnackbar(\"Deployment Successful\", { variant: \"success\" });\n      })\n      .catch((e) => {\n        setLoading(false);\n        enqueueSnackbar(\"Deployment Failed (\" + e.message + \")\", {\n          variant: \"error\",\n          autoHideDuration: 10000,\n        });\n      });\n  };\n\n  // Called when the dialog window for coin1 exits\n  const onToken1Selected = (address) => {\n    // Close the dialog window\n    setDialog1Open(false);\n\n    // If the user inputs the same token, we want to switch the data in the fields\n    if (address === coin2.address) {\n      switchFields();\n    }\n    // We only update the values if the user provides a token\n    else if (address) {\n      // Getting some token data is async, so we need to wait for the data to return, hence the promise\n      getBalanceAndSymbol(account, address, provider, signer, weth.address, coins).then((data) => {\n        setCoin1({\n          address: address,\n          symbol: data.symbol,\n          balance: data.balance,\n        });\n      });\n    }\n  };\n\n  // Called when the dialog window for coin2 exits\n  const onToken2Selected = (address) => {\n    // Close the dialog window\n    setDialog2Open(false);\n\n    // If the user inputs the same token, we want to switch the data in the fields\n    if (address === coin1.address) {\n      switchFields();\n    }\n    // We only update the values if the user provides a token\n    else if (address) {\n      // Getting some token data is async, so we need to wait for the data to return, hence the promise\n      getBalanceAndSymbol(account, address, provider, signer, weth.address, coins).then((data) => {\n        setCoin2({\n          address: address,\n          symbol: data.symbol,\n          balance: data.balance,\n        });\n      });\n    }\n  };\n\n  // This hook is called when either of the state variables `coin1.address` or `coin2.address` change.\n  // This means that when the user selects a different coin to convert between, or the coins are swapped,\n  // the new reserves will be calculated.\n  useEffect(() => {\n    console.log(\n      \"Trying to get reserves between:\\n\" + coin1.address + \"\\n\" + coin2.address\n    );\n\n    if (coin1.address && coin2.address && account) {\n      getReserves(coin1.address, coin2.address, factory, signer, account).then(\n        (data) => {\n          setReserves([data[0], data[1]]);\n          setLiquidityTokens(data[2]);\n        }\n      );\n    }\n  }, [coin1.address, coin2.address, account, factory, signer]);\n\n  // This hook is called when either of the state variables `field1Value`, `field2Value`, `coin1.address` or `coin2.address` change.\n  // It will give a preview of the liquidity deployment.\n  useEffect(() => {\n    if (isButtonEnabled()) {\n      console.log(\"Trying to preview the liquidity deployment\");\n\n      quoteAddLiquidity(\n        coin1.address,\n        coin2.address,\n        parseFloat(field1Value),\n        parseFloat(field2Value),\n        factory,\n        signer\n      ).then((data) => {\n        // console.log(data);\n        console.log(\"TokenA in: \", data[0]);\n        console.log(\"TokenB in: \", data[1]);\n        console.log(\"Liquidity out: \", data[2]);\n        setLiquidityOut([data[0], data[1], data[2]]);\n      });\n    }\n  }, [coin1.address, coin2.address, field1Value, field2Value, factory, signer]);\n\n  // This hook creates a timeout that will run every ~10 seconds, it's role is to check if the user's balance has\n  // updated has changed. This allows them to see when a transaction completes by looking at the balance output.\n  useEffect(() => {\n    const coinTimeout = setTimeout(() => {\n      console.log(\"Checking balances & Getting reserves...\");\n\n      if (coin1.address && coin2.address && account) {\n        getReserves(\n          coin1.address,\n          coin2.address,\n          factory,\n          signer,\n          account\n        ).then((data) => {\n          setReserves([data[0], data[1]]);\n          setLiquidityTokens(data[2]);\n        });\n      }\n\n      if (coin1 && account &&!wrongNetworkOpen) {\n        getBalanceAndSymbol(account, coin1.address, provider, signer, weth.address, coins).then(\n          (data) => {\n            setCoin1({\n              ...coin1,\n              balance: data.balance,\n            });\n          }\n        );\n      }\n      if (coin2 && account &&!wrongNetworkOpen) {\n        getBalanceAndSymbol(account, coin2.address, provider, signer, weth.address, coins).then(\n          (data) => {\n            setCoin2({\n              ...coin2,\n              balance: data.balance,\n            });\n          }\n        );\n      }\n    }, 10000);\n\n    return () => clearTimeout(coinTimeout);\n  });\n\n  // This hook will run when the component first mounts, it can be useful to put logic to populate variables here\n  useEffect(() => {\n    \n    getAccount().then((account) => {\n      setAccount(account);\n    });\n\n    async function Network() {\n      const chainId = await getNetwork(provider).then((chainId) => {\n        setChainId(chainId);\n        return chainId;\n      });\n\n      if (chains.networks.includes(chainId)){\n        setwrongNetworkOpen(false);\n        console.log('chainID: ', chainId);\n        // Get the router using the chainID\n        const router = await getRouter (chains.routerAddress.get(chainId), signer)\n        setRouter(router);\n        // Get Weth address from router\n        await router.WETH().then((wethAddress) => {\n          setWeth(getWeth (wethAddress, signer));\n          // Set the value of the weth address in the default coins array\n          const coins = COINS.get(chainId);\n          coins[0].address = wethAddress;\n          setCoins(coins);\n        });\n        // Get the factory address from the router\n        await router.factory().then((factory_address) => {\n          setFactory(getFactory (factory_address, signer));\n        })\n      } else {\n        console.log('Wrong network mate.');\n        setwrongNetworkOpen(true);\n      }\n    }\n\n    Network()\n\n  }, []);\n\n  return (\n    <div>\n      {/* Liquidity deployer */}\n      <Typography variant=\"h5\" className={classes.title}></Typography>\n\n      {/* Dialog Windows */}\n      <CoinDialog\n        open={dialog1Open}\n        onClose={onToken1Selected}\n        coins={coins}\n        signer={signer}\n      />\n      <CoinDialog\n        open={dialog2Open}\n        onClose={onToken2Selected}\n        coins={coins}\n        signer={signer}\n      />\n      <WrongNetwork\n        open={wrongNetworkOpen}\n      />\n\n      <Grid container direction=\"column\" alignItems=\"center\" spacing={2}>\n        <Grid item xs={12} className={classes.fullWidth}>\n          <CoinField\n            activeField={true}\n            value={field1Value}\n            onClick={() => setDialog1Open(true)}\n            onChange={handleChange.field1}\n            symbol={coin1.symbol !== undefined ? coin1.symbol : \"Select\"}\n          />\n        </Grid>\n\n        <Grid item xs={12} className={classes.fullWidth}>\n          <CoinField\n            activeField={true}\n            value={field2Value}\n            onClick={() => setDialog2Open(true)}\n            onChange={handleChange.field2}\n            symbol={coin2.symbol !== undefined ? coin2.symbol : \"Select\"}\n          />\n        </Grid>\n      </Grid>\n\n      <Grid\n        container\n        direction=\"row\"\n        alignItems=\"center\"\n        justifyContent=\"center\"\n        spacing={4}\n        className={classes.balance}\n      >\n        <hr className={classes.hr} />\n        <Grid\n          container\n          item\n          className={classes.values}\n          direction=\"column\"\n          alignItems=\"center\"\n          spacing={2}\n        >\n          {/* Balance Display */}\n          <Typography variant=\"h6\">Your Balances</Typography>\n          <Grid container direction=\"row\" justifyContent=\"space-between\">\n            <Grid item xs={6}>\n              <Typography variant=\"body1\" className={classes.balance}>\n                {formatBalance(coin1.balance, coin1.symbol)}\n              </Typography>\n            </Grid>\n            <Grid item xs={6}>\n              <Typography variant=\"body1\" className={classes.balance}>\n                {formatBalance(coin2.balance, coin2.symbol)}\n              </Typography>\n            </Grid>\n          </Grid>\n\n          <hr className={classes.hr} />\n\n          {/* Reserves Display */}\n          <Typography variant=\"h6\">Reserves</Typography>\n          <Grid container direction=\"row\" justifyContent=\"space-between\">\n            <Grid item xs={6}>\n              <Typography variant=\"body1\" className={classes.balance}>\n                {formatReserve(reserves[0], coin1.symbol)}\n              </Typography>\n            </Grid>\n            <Grid item xs={6}>\n              <Typography variant=\"body1\" className={classes.balance}>\n                {formatReserve(reserves[1], coin2.symbol)}\n              </Typography>\n            </Grid>\n          </Grid>\n\n          <hr className={classes.hr} />\n\n          {/* Liquidity Tokens Display */}\n          <Typography variant=\"h6\">Your Liquidity Pool Tokens</Typography>\n          <Grid container direction=\"row\" justifyContent=\"center\">\n            <Grid item xs={6}>\n              <Typography variant=\"body1\" className={classes.balance}>\n                {formatReserve(liquidityTokens, \"UNI-V2\")}\n              </Typography>\n            </Grid>\n          </Grid>\n        </Grid>\n        <Paper className={classes.paperContainer}>\n          {/*Red  Display to show the quote */}\n          <Grid\n            container\n            item\n            direction=\"column\"\n            alignItems=\"center\"\n            spacing={2}\n            className={classes.fullWidth}\n          >\n            {/* Tokens in */}\n            <Typography variant=\"h6\">Tokens in</Typography>\n            <Grid container direction=\"row\" justifyContent=\"space-between\">\n              <Grid item xs={6}>\n                <Typography variant=\"body1\" className={classes.balance}>\n                  {formatBalance(liquidityOut[0], coin1.symbol)}\n                </Typography>\n              </Grid>\n              <Grid item xs={6}>\n                <Typography variant=\"body1\" className={classes.balance}>\n                  {formatBalance(liquidityOut[1], coin2.symbol)}\n                </Typography>\n              </Grid>\n            </Grid>\n\n            <hr className={classes.hr} />\n\n            {/* Liquidity Tokens Display */}\n            <Typography variant=\"h6\">Liquidity Pool Tokens Out</Typography>\n            <Grid container direction=\"row\" justifyContent=\"center\">\n              <Grid item xs={6}>\n                <Typography variant=\"body1\" className={classes.balance}>\n                  {formatReserve(liquidityOut[2], \"UNI-V2\")}\n                </Typography>\n              </Grid>\n            </Grid>\n          </Grid>\n        </Paper>\n\n        <hr className={classes.hr} />\n      </Grid>\n      <Grid container direction=\"column\" alignItems=\"center\" spacing={2}>\n        <LoadingButton\n          loading={loading}\n          valid={isButtonEnabled()}\n          success={false}\n          fail={false}\n          onClick={deploy}\n        >\n          <AccountBalanceIcon className={classes.buttonIcon} />\n          Deploy\n        </LoadingButton>\n      </Grid>\n    </div>\n  );\n}\n\nexport default LiquidityDeployer;\n","import React, { useEffect } from \"react\";\nimport { Grid, makeStyles, Paper, Typography } from \"@material-ui/core\";\nimport ArrowDownwardIcon from \"@material-ui/icons/ArrowDownward\";\nimport { useSnackbar } from \"notistack\";\nimport {\n  getAccount,\n  getFactory,\n  getProvider,\n  getRouter,\n  getSigner,\n  getBalanceAndSymbol,\n  getWeth,\n  getReserves,\n  getNetwork\n} from \"../ethereumFunctions\";\nimport { removeLiquidity, quoteRemoveLiquidity } from \"./LiquidityFunctions\";\nimport {\n  RemoveLiquidityField1,\n  RemoveLiquidityField2,\n} from \"../CoinSwapper/CoinField\";\nimport CoinDialog from \"../CoinSwapper/CoinDialog\";\nimport LoadingButton from \"../Components/LoadingButton\";\nimport WrongNetwork from \"../Components/wrongNetwork\";\nimport COINS from \"../constants/coins\";\nimport * as chains from \"../constants/chains\";\n\nconst styles = (theme) => ({\n  paperContainer: {\n    borderRadius: theme.spacing(2),\n    padding: theme.spacing(2),\n    paddingBottom: theme.spacing(3),\n    width: \"40%\",\n    overflow: \"wrap\",\n    background: \"linear-gradient(45deg, #ff0000 30%, #FF8E53 90%)\",\n    color: \"white\",\n  },\n  fullWidth: {\n    width: \"100%\",\n  },\n  values: {\n    width: \"50%\",\n  },\n  title: {\n    textAlign: \"center\",\n    padding: theme.spacing(0.5),\n    marginBottom: theme.spacing(1),\n  },\n  hr: {\n    width: \"100%\",\n  },\n  balance: {\n    padding: theme.spacing(1),\n    overflow: \"wrap\",\n    textAlign: \"center\",\n  },\n  buttonIcon: {\n    marginRight: theme.spacing(1),\n    padding: theme.spacing(0.4),\n  },\n});\n\nconst useStyles = makeStyles(styles);\n\nfunction LiquidityRemover(props) {\n  const classes = useStyles();\n  const { enqueueSnackbar } = useSnackbar();\n\n  // Stores information for the Autonity Network\n  const [provider, setProvider] = React.useState(getProvider());\n  const [signer, setSigner] = React.useState(getSigner(provider));\n\n  // The following are populated in a react hook\n  const [account, setAccount] = React.useState(undefined);\n  const [chainId, setChainId] = React.useState(undefined);\n  const [router, setRouter] = React.useState(undefined);\n  const [weth, setWeth] = React.useState(undefined);\n  const [factory, setFactory] = React.useState(undefined);\n\n  // Stores a record of whether their respective dialog window is open\n  const [dialog1Open, setDialog1Open] = React.useState(false);\n  const [dialog2Open, setDialog2Open] = React.useState(false);\n  const [wrongNetworkOpen, setwrongNetworkOpen] = React.useState(false);\n\n\n  // Stores data about their respective coin\n  const [coin1, setCoin1] = React.useState({\n    address: undefined,\n    symbol: undefined,\n    balance: undefined,\n  });\n  const [coin2, setCoin2] = React.useState({\n    address: undefined,\n    symbol: undefined,\n    balance: undefined,\n  });\n\n  const [coins, setCoins] = React.useState([]);\n\n  // Stores the current reserves in the liquidity pool between coin1 and coin2\n  const [reserves, setReserves] = React.useState([\"0.0\", \"0.0\"]);\n\n  // Stores the current value of their respective text box\n  const [field1Value, setField1Value] = React.useState(\"\");\n\n  // Controls the loading button\n  const [loading, setLoading] = React.useState(false);\n\n  // Stores the liquidity tokens balance of the user\n  const [liquidityTokens, setLiquidityTokens] = React.useState(\"\");\n\n  // Stores the input and output for the liquidity removal preview\n  const [tokensOut, setTokensOut] = React.useState([0, 0, 0]);\n\n  // Switches the top and bottom coins, this is called when users hit the swap button or select the opposite\n  // token in the dialog (e.g. if coin1 is TokenA and the user selects TokenB when choosing coin2)\n  const switchFields = () => {\n    setCoin1(coin2);\n    setCoin2(coin1);\n    setReserves(reserves.reverse());\n  };\n\n  // These functions take an HTML event, pull the data out and puts it into a state variable.\n  const handleChange = {\n    field1: (e) => {\n      setField1Value(e.target.value);\n    },\n  };\n\n  // Turns the account's balance into something nice and readable\n  const formatBalance = (balance, symbol) => {\n    if (balance && symbol)\n      return parseFloat(balance).toPrecision(8) + \" \" + symbol;\n    else return \"0.0\";\n  };\n\n  // Turns the coin's reserves into something nice and readable\n  const formatReserve = (reserve, symbol) => {\n    if (reserve && symbol) return reserve + \" \" + symbol;\n    else return \"0.0\";\n  };\n\n  // Determines whether the button should be enabled or not\n  const isButtonEnabled = () => {\n    let validFloat = new RegExp(\"^[0-9]*[.,]?[0-9]*$\");\n\n    // If both coins have been selected, and a valid float has been entered for both, which are less than the user's balances, then return true\n    return (\n      coin1.address &&\n      coin2.address &&\n      validFloat.test(field1Value) &&\n      parseFloat(field1Value) <= liquidityTokens\n    );\n  };\n\n  const remove = () => {\n    console.log(\"Attempting to remove liquidity...\");\n    setLoading(true);\n\n    removeLiquidity(\n      coin1.address,\n      coin2.address,\n      parseFloat(field1Value),\n      0,\n      0,\n      router,\n      account,\n      signer,\n      factory\n    )\n      .then(() => {\n        setLoading(false);\n\n        // If the transaction was successful, we clear to input to make sure the user doesn't accidental redo the transfer\n        setField1Value(\"\");\n        enqueueSnackbar(\"Removal Successful\", { variant: \"success\" });\n      })\n      .catch((e) => {\n        setLoading(false);\n        enqueueSnackbar(\"Deployment Failed (\" + e.message + \")\", {\n          variant: \"error\",\n          autoHideDuration: 10000,\n        });\n      });\n  };\n\n  // Called when the dialog window for coin1 exits\n  const onToken1Selected = (address) => {\n    // Close the dialog window\n    setDialog1Open(false);\n\n    // If the user inputs the same token, we want to switch the data in the fields\n    if (address === coin2.address) {\n      switchFields();\n    }\n    // We only update the values if the user provides a token\n    else if (address) {\n      // Getting some token data is async, so we need to wait for the data to return, hence the promise\n      getBalanceAndSymbol(account, address, provider, signer, weth.address, coins).then((data) => {\n        setCoin1({\n          address: address,\n          symbol: data.symbol,\n          balance: data.balance,\n        });\n      });\n    }\n  };\n\n  // Called when the dialog window for coin2 exits\n  const onToken2Selected = (address) => {\n    // Close the dialog window\n    setDialog2Open(false);\n\n    // If the user inputs the same token, we want to switch the data in the fields\n    if (address === coin1.address) {\n      switchFields();\n    }\n    // We only update the values if the user provides a token\n    else if (address) {\n      // Getting some token data is async, so we need to wait for the data to return, hence the promise\n      getBalanceAndSymbol(account, address, provider, signer, weth.address, coins).then((data) => {\n        setCoin2({\n          address: address,\n          symbol: data.symbol,\n          balance: data.balance,\n        });\n      });\n    }\n  };\n\n  // This hook is called when either of the state variables `coin1.address` or `coin2.address` change.\n  // This means that when the user selects a different coin to convert between, or the coins are swapped,\n  // the new reserves will be calculated.\n  useEffect(() => {\n    console.log(\n      \"Trying to get reserves between:\\n\" + coin1.address + \"\\n\" + coin2.address\n    );\n\n    if (coin1.address && coin2.address && account) {\n      getReserves(coin1.address, coin2.address, factory, signer, account).then(\n        (data) => {\n          setReserves([data[0], data[1]]);\n          setLiquidityTokens(data[2]);\n        }\n      );\n    }\n  }, [coin1.address, coin2.address, account, factory, signer]);\n\n  // This hook is called when either of the state variables `field1Value`, `coin1.address` or `coin2.address` change.\n  // It will give a preview of the liquidity removal.\n  useEffect(() => {\n    if (isButtonEnabled()) {\n      console.log(\"Trying to preview the liquidity removal\");\n      quoteRemoveLiquidity(\n        coin1.address,\n        coin2.address,\n        field1Value,\n        factory,\n        signer\n      ).then((data) => {\n        setTokensOut(data);\n      });\n    }\n  }, [coin1.address, coin2.address, field1Value, factory, signer]);\n\n  useEffect(() => {\n    // This hook creates a timeout that will run every ~10 seconds, it's role is to check if the user's balance has\n    // updated has changed. This allows them to see when a transaction completes by looking at the balance output.\n\n    const coinTimeout = setTimeout(() => {\n      console.log(\"Checking balances & Getting reserves...\");\n\n      if (coin1.address && coin2.address && account) {\n        getReserves(\n          coin1.address,\n          coin2.address,\n          factory,\n          signer,\n          account\n        ).then((data) => {\n          setReserves([data[0], data[1]]);\n          setLiquidityTokens(data[2]);\n        });\n      }\n\n      if (coin1 && account &&!wrongNetworkOpen) {\n        getBalanceAndSymbol(account, coin1.address, provider, signer, weth.address, coins).then(\n          (data) => {\n            setCoin1({\n              ...coin1,\n              balance: data.balance,\n            });\n          }\n        );\n      }\n      if (coin2 && account &&!wrongNetworkOpen) {\n        getBalanceAndSymbol(account, coin2.address, provider, signer, weth.address, coins).then(\n          (data) => {\n            setCoin2({\n              ...coin2,\n              balance: data.balance,\n            });\n          }\n        );\n      }\n    }, 10000);\n\n    return () => clearTimeout(coinTimeout);\n  });\n\n  useEffect(() => {\n    \n    getAccount().then((account) => {\n      setAccount(account);\n    });\n\n    async function Network() {\n      const chainId = await getNetwork(provider).then((chainId) => {\n        setChainId(chainId);\n        return chainId;\n      });\n\n      if (chains.networks.includes(chainId)){\n        setwrongNetworkOpen(false);\n        console.log('chainID: ', chainId);\n        // Get the router using the chainID\n        const router = await getRouter (chains.routerAddress.get(chainId), signer)\n        setRouter(router);\n        // Get Weth address from router\n        await router.WETH().then((wethAddress) => {\n          setWeth(getWeth (wethAddress, signer));\n          // Set the value of the weth address in the default coins array\n          const coins = COINS.get(chainId);\n          coins[0].address = wethAddress;\n          setCoins(coins);\n        });\n        // Get the factory address from the router\n        await router.factory().then((factory_address) => {\n          setFactory(getFactory (factory_address, signer));\n        })\n      } else {\n        console.log('Wrong network mate.');\n        setwrongNetworkOpen(true);\n      }\n    }\n\n    Network()\n\n  }, []);\n\n  return (\n    <div>\n      {/* Coin Swapper */}\n      <Typography variant=\"h5\" className={classes.title}></Typography>\n\n      {/* Dialog Windows */}\n      <CoinDialog\n        open={dialog1Open}\n        onClose={onToken1Selected}\n        coins={coins}\n        signer={signer}\n      />\n      <CoinDialog\n        open={dialog2Open}\n        onClose={onToken2Selected}\n        coins={coins}\n        signer={signer}\n      />\n      <WrongNetwork\n        open={wrongNetworkOpen}\n      />\n\n      <Grid container direction=\"column\" alignItems=\"center\" spacing={2}>\n        <Grid item xs={12} className={classes.fullWidth}>\n          <RemoveLiquidityField1\n            activeField={true}\n            value={field1Value}\n            onClick={() => setDialog1Open(true)}\n            onChange={handleChange.field1}\n            symbol={coin1.symbol !== undefined ? coin1.symbol : \"Select\"}\n          />\n        </Grid>\n\n        <Grid item xs={12} className={classes.fullWidth}>\n          <RemoveLiquidityField2\n            activeField={true}\n            onClick={() => setDialog2Open(true)}\n            symbol={coin2.symbol !== undefined ? coin2.symbol : \"Select\"}\n          />\n        </Grid>\n      </Grid>\n\n      <Grid\n        container\n        direction=\"row\"\n        alignItems=\"center\"\n        justifyContent=\"center\"\n        spacing={4}\n        className={classes.balance}\n      >\n        <hr className={classes.hr} />\n        <Grid\n          container\n          item\n          className={classes.values}\n          direction=\"column\"\n          alignItems=\"center\"\n          spacing={2}\n        >\n          {/* Balance Display */}\n          <Typography variant=\"h6\">Your Balances</Typography>\n          <Grid container direction=\"row\" justifyContent=\"space-between\">\n            <Grid item xs={6}>\n              <Typography variant=\"body1\" className={classes.balance}>\n                {formatBalance(coin1.balance, coin1.symbol)}\n              </Typography>\n            </Grid>\n            <Grid item xs={6}>\n              <Typography variant=\"body1\" className={classes.balance}>\n                {formatBalance(coin2.balance, coin2.symbol)}\n              </Typography>\n            </Grid>\n          </Grid>\n\n          <hr className={classes.hr} />\n\n          {/* Reserves Display */}\n          <Typography variant=\"h6\">Reserves</Typography>\n          <Grid container direction=\"row\" justifyContent=\"space-between\">\n            <Grid item xs={6}>\n              <Typography variant=\"body1\" className={classes.balance}>\n                {formatReserve(reserves[0], coin1.symbol)}\n              </Typography>\n            </Grid>\n            <Grid item xs={6}>\n              <Typography variant=\"body1\" className={classes.balance}>\n                {formatReserve(reserves[1], coin2.symbol)}\n              </Typography>\n            </Grid>\n          </Grid>\n\n          <hr className={classes.hr} />\n\n          {/* Liquidity Tokens Display */}\n          <Typography variant=\"h6\">Your Liquidity Pool Tokens</Typography>\n          <Grid container direction=\"row\" justifyContent=\"center\">\n            <Grid item xs={6}>\n              <Typography variant=\"body1\" className={classes.balance}>\n                {formatReserve(liquidityTokens, \"UNI-V2\")}\n              </Typography>\n            </Grid>\n          </Grid>\n        </Grid>\n\n        <Paper className={classes.paperContainer}>\n          {/*Red  Display to show the quote */}\n          <Grid\n            container\n            item\n            direction=\"column\"\n            alignItems=\"center\"\n            spacing={2}\n            className={classes.fullWidth}\n          >\n            {/* Tokens in */}\n            <Typography variant=\"h6\">Liquidity Pool Tokens in</Typography>\n            <Grid container direction=\"row\" justifyContent=\"center\">\n              <Grid item xs={6}>\n                <Typography variant=\"body1\" className={classes.balance}>\n                  {formatBalance(tokensOut[0], \"UNI-V2\")}\n                </Typography>\n              </Grid>\n            </Grid>\n\n            <hr className={classes.hr} />\n\n            {/* Liquidity Tokens Display */}\n            <Typography variant=\"h6\">Tokens Out</Typography>\n            <Grid container direction=\"row\" justifyContent=\"space-between\">\n              <Grid item xs={6}>\n                <Typography variant=\"body1\" className={classes.balance}>\n                  {formatBalance(tokensOut[1], coin1.symbol)}\n                </Typography>\n              </Grid>\n              <Grid item xs={6}>\n                <Typography variant=\"body1\" className={classes.balance}>\n                  {formatBalance(tokensOut[2], coin2.symbol)}\n                </Typography>\n              </Grid>\n            </Grid>\n          </Grid>\n        </Paper>\n        <hr className={classes.hr} />\n      </Grid>\n\n      <Grid container direction=\"column\" alignItems=\"center\" spacing={2}>\n        <LoadingButton\n          loading={loading}\n          valid={isButtonEnabled()}\n          success={false}\n          fail={false}\n          onClick={remove}\n        >\n          <ArrowDownwardIcon className={classes.buttonIcon} />\n          Remove\n        </LoadingButton>\n      </Grid>\n    </div>\n  );\n}\n\nexport default LiquidityRemover;\n","import React from \"react\";\nimport {\n  Container,\n  Grid,\n  makeStyles,\n  Paper,\n  Typography,\n} from \"@material-ui/core\";\n\nimport SwitchButton from \"./SwitchButton\";\nimport LiquidityDeployer from \"./LiquidityDeployer\";\nimport LiquidityRemover from \"./RemoveLiquidity\";\n\nconst styles = (theme) => ({\n  paperContainer: {\n    borderRadius: theme.spacing(2),\n    padding: theme.spacing(1),\n    paddingBottom: theme.spacing(3),\n    maxWidth: 700,\n    margin: \"auto\",\n  },\n  title: {\n    textAlign: \"center\",\n    padding: theme.spacing(0.5),\n    marginBottom: theme.spacing(1),\n  },\n  footer: {\n    marginTop: \"155px\",\n  },\n});\n\nconst useStyles = makeStyles(styles);\n\nfunction Liquidity() {\n  const classes = useStyles();\n\n  const [deploy, setDeploy] = React.useState(true);\n\n  const deploy_or_remove = (deploy) => {\n    if (deploy === true) {\n      return <LiquidityDeployer />;\n    }\n    return <LiquidityRemover />;\n  };\n\n  return (\n    <div>\n      <Container>\n        <Paper className={classes.paperContainer}>\n          <Typography variant=\"h5\" className={classes.title}>\n            <SwitchButton setDeploy={setDeploy} />\n          </Typography>\n\n          {deploy_or_remove(deploy)}\n        </Paper>\n      </Container>\n\n      <Grid\n        container\n        className={classes.footer}\n        direction=\"row\"\n        justifyContent=\"center\"\n        alignItems=\"flex-end\"\n      >\n        <p>\n          Clearmatics Autonity Uniswap | Get AUT for use in the bakerloo testnet{\" \"}\n          <a href=\"https://faucet.bakerloo.autonity.network/\">here</a>\n        </p>\n      </Grid>\n    </div>\n  );\n}\n\nexport default Liquidity;\n","import React from \"react\";\nimport {\n  Container,\n  Grid,\n  makeStyles,\n  Paper,\n  Typography,\n} from \"@material-ui/core\";\nimport logo from \"../assets/img/logo.svg\";\n\nconst styles = (theme) => ({\n  paperContainer: {\n    borderRadius: theme.spacing(2),\n    padding: theme.spacing(1),\n    paddingBottom: theme.spacing(3),\n    maxWidth: 700,\n    margin: \"auto\",\n    marginTop: \"200px\",\n  },\n  fullWidth: {\n    width: \"100%\",\n  },\n  title: {\n    textAlign: \"center\",\n    padding: theme.spacing(0.5),\n    marginBottom: theme.spacing(1),\n  },\n  hr: {\n    width: \"100%\",\n  },\n  balance: {\n    padding: theme.spacing(1),\n    overflow: \"wrap\",\n    textAlign: \"center\",\n  },\n  buttonIcon: {\n    marginRight: theme.spacing(1),\n    padding: theme.spacing(0.4),\n  },\n  footer: {\n    marginTop: \"155px\",\n  },\n});\n\nconst useStyles = makeStyles(styles);\n\nfunction ConnectWalletPage() {\n  const classes = useStyles();\n  return (\n    <div>\n      <div className=\"Title\">\n        <h1 className=\"navbar-logo\">\n          <img src={logo} className=\"logo\"></img> Autonity Uniswap\n        </h1>\n      </div>\n\n      <Container>\n        <Paper className={classes.paperContainer}>\n          <Typography\n            variant=\"h6\"\n            className={classes.title}\n            color=\"common.white\"\n          >\n            Please connect an Ethereum wallet to your browser to use the\n            application\n          </Typography>\n        </Paper>\n      </Container>\n\n      <Grid\n        container\n        className={classes.footer}\n        direction=\"row\"\n        justifyContent=\"center\"\n        alignItems=\"flex-end\"\n      >\n        <p>\n          Clearmatics Autonity Uniswap | Get AUT for use in the bakerloo testnet{\" \"}\n          <a href=\"https://faucet.bakerloo.autonity.network/\">here</a>\n        </p>\n      </Grid>\n    </div>\n  );\n}\n\nexport default ConnectWalletPage;\n","import React from \"react\";\nimport \"./App.css\";\nimport { ethers } from \"ethers\";\nimport NarBar from \"./NavBar/NavBar\";\nimport CoinSwapper from \"./CoinSwapper/CoinSwapper\";\nimport { Route } from \"react-router-dom\";\nimport { SnackbarProvider } from \"notistack\";\nimport Liquidity from \"./Liquidity/Liquidity\";\nimport ConnectWalletPage from \"./Components/connectWalletPage\";\nimport { createTheme, ThemeProvider } from \"@material-ui/core\";\n\nconst theme = createTheme({\n  palette: {\n    primary: {\n      main: \"#ff0000\",\n      contrastText: \"#ffffff\",\n    },\n    secondary: {\n      main: \"#9e9e9e\",\n      contrastText: \"#ffffff\",\n    },\n  },\n});\n\nfunction App() {\n  // Check if wallet is here:\n  try {\n    const provider = new ethers.providers.Web3Provider(window.ethereum);\n    return (\n      <div className=\"App\">\n        <SnackbarProvider maxSnack={3}>\n          <ThemeProvider theme={theme}>\n            <NarBar />\n            <Route\n              exact\n              path=\"/autonity-uniswap-interface/\"\n              component={CoinSwapper}\n            />\n            <Route\n              exact\n              path=\"/autonity-uniswap-interface/liquidity\"\n              component={Liquidity}\n            />\n          </ThemeProvider>\n        </SnackbarProvider>\n      </div>\n    );\n  } catch (err) {\n    return (\n      <div className=\"App\">\n        <SnackbarProvider maxSnack={3}>\n          <ThemeProvider theme={theme}>\n            <ConnectWalletPage />\n          </ThemeProvider>\n        </SnackbarProvider>\n      </div>\n    );\n  }\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport \"bootstrap/dist/css/bootstrap.css\";\nimport \"./index.css\";\nimport App from \"./App\";\nimport reportWebVitals from \"./reportWebVitals\";\nimport { BrowserRouter } from \"react-router-dom\";\n\nReactDOM.render(\n  <BrowserRouter>\n    <React.StrictMode>\n      <App />\n    </React.StrictMode>\n  </BrowserRouter>,\n\n  document.getElementById(\"root\")\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}