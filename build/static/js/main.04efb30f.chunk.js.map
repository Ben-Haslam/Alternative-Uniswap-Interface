{"version":3,"sources":["NavBar/MenuItems.js","NavBar/NavBar.js","constants/chains.js","constants/coins.js","ethereumFunctions.js","CoinSwapper/CoinField.js","CoinSwapper/CoinButton.js","CoinSwapper/CoinDialog.js","Components/LoadingButton.js","Components/wrongNetwork.js","CoinSwapper/CoinSwapper.js","Liquidity/SwitchButton.js","Liquidity/LiquidityFunctions.js","Liquidity/LiquidityDeployer.js","Liquidity/RemoveLiquidity.js","Liquidity/Liquidity.js","Components/connectWalletPage.js","App.js","reportWebVitals.js","index.js"],"names":["MenuItems","title","url","cName","NavBar","state","clicked","className","map","item","index","to","Component","networks","ChainId","ROPSTEN","RINKEBY","GÃ–RLI","KOVAN","DEVNET","AUTONITY","PARASTATE","routerAddress","Map","set","COINS","chains","MAINNET","name","abbr","address","ROUTER","require","ERC20","FACTORY","PAIR","getProvider","ethers","providers","Web3Provider","window","ethereum","getSigner","provider","getNetwork","a","network","chainId","getRouter","signer","Contract","abi","getWeth","getFactory","getAccount","request","method","accounts","getDecimals","token","decimals","then","result","catch","error","console","log","getBalanceAndSymbol","accountAddress","weth_address","coins","getBalance","balanceRaw","balance","utils","formatEther","symbol","tokenDecimals","balanceOf","address1","address2","amount","routerContract","tokens","time","Math","floor","Date","now","deadline","BigNumber","from","token1","amountIn","parseUnits","callStatic","getAmountsOut","amountOut","approve","WETH","wethAddress","swapExactETHForTokens","value","swapExactTokensForETH","swapExactTokensForTokens","token1Decimals","token2","token2Decimals","String","values_out","amount_out","Number","fetchReserves","pair","coin1","coin2","coin1Decimals","coin2Decimals","getReserves","reservesRaw","token0","results","factory","getPair","pairAddress","liquidityTokens_BN","liquidityTokens","toPrecision","useStyles","makeStyles","theme","container","padding","spacing","minHeight","backgroundColor","COLORS","borderRadius","borderColor","borderWidth","borderStyle","container_input","marginLeft","textAlign","container_blank","grid","height","fab","zIndex","input","typography","h5","width","inputBase","RemoveLiquidityField1","props","classes","onClick","onChange","activeField","Grid","direction","justifyContent","alignItems","xs","Fab","size","variant","InputBase","placeholder","disabled","root","RemoveLiquidityField2","CoinField","button","paddingTop","paddingBottom","coinName","opacity","CoinButton","coinAbbr","ButtonBase","focusRipple","Typography","styles","dialogContainer","titleSection","titleText","alignSelf","hr","margin","paddingLeft","paddingRight","coinList","overflowY","coinContainer","marginTop","overflow","DialogTitle","withStyles","children","onClose","other","disableTypography","alignContent","IconButton","aria-label","DialogActions","MuiDialogActions","CoinDialog","open","React","useState","setAddress","setError","exit","Dialog","undefined","fullWidth","maxWidth","paper","TextField","e","target","helperText","coin","Button","autoFocus","err","doesTokenExist","color","wrapper","position","progress","green","top","left","LoadingButton","loading","valid","success","fail","type","CircularProgress","WrongNetwork","paperContainer","switchButton","marginBottom","footer","CoinSwapper","enqueueSnackbar","useSnackbar","account","setAccount","setChainId","router","setRouter","weth","setWeth","setFactory","dialog1Open","setDialog1Open","dialog2Open","setDialog2Open","wrongNetworkOpen","setwrongNetworkOpen","setCoin1","setCoin2","setCoins","reserves","setReserves","field1Value","setField1Value","field2Value","setField2Value","setLoading","switchFields","reverse","handleChange","field1","formatBalance","parseFloat","formatReserve","reserve","useEffect","data","isNaN","getAmountOut","toFixed","coinTimeout","setTimeout","clearTimeout","includes","get","factory_address","Network","Container","Paper","fontSize","parsedInput1","parsedInput2","isButtonEnabled","swapTokens","message","autoHideDuration","href","SwitchButton","setDeploy","changeStyles","K","document","getElementById","style","ButtonGroup","id","text","amount1","amount2","amount1min","amount2min","amountIn1","amountIn2","amount1Min","amount2Min","addLiquidityETH","addLiquidity","liquidity_tokens","liquidity","Getliquidity","removeLiquidityETH","removeLiquidity","quote","reserve1","reserve2","quoteMintLiquidity","amountA","amountB","MINIMUM_LIQUIDITY","_reserveA","_reserveB","totalSupply","reserveA","reserveB","_totalSupply","valueA","valueB","sqrt","min","amountADesired","amountBDesired","amountBOptimal","amountAOptimal","feeTo","feeOn","kLast","_kLast","feeLiquidity","Aout","Bout","background","values","buttonIcon","marginRight","LiquidityDeployer","setLiquidityTokens","liquidityOut","setLiquidityOut","oldField1Value","oldField2Value","field2","NaN","quoteAddLiquidity","LiquidityRemover","tokensOut","setTokensOut","parsedInput","quoteRemoveLiquidity","Liquidity","deploy","deploy_or_remove","ConnectWalletPage","createTheme","palette","primary","main","contrastText","secondary","App","maxSnack","ThemeProvider","exact","path","component","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode"],"mappings":"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","file":"static/js/main.04efb30f.chunk.js","sourcesContent":["export const MenuItems = [\n  {\n    title: \"Swap\",\n    url: \"/Alternative-Uniswap-Interface/\",\n    cName: \"nav-links\",\n  },\n  {\n    title: \"Liquidity\",\n    url: \"/Alternative-Uniswap-Interface/liquidity\",\n    cName: \"nav-links\",\n  },\n];\n","import React, { Component } from \"react\";\nimport { Link } from \"react-router-dom\";\nimport { MenuItems } from \"./MenuItems\";\nimport \"./NavBar.css\";\n\nclass NavBar extends Component {\n  state = { clicked: false };\n\n  render() {\n    return (\n      <nav>\n        <div className=\"Title\">\n          <h1 className=\"navbar-logo\">\n            Alternative Uniswap Interface\n          </h1>\n        </div>\n\n        <div className=\"NavbarItems\">\n          <ul className={`nav-menu`}>\n            {MenuItems.map((item, index) => {\n              return (\n                <li key={index}>\n                  <Link className={\"nav-links\"} to={item.url}>\n                    {item.title}\n                  </Link>\n                </li>\n              );\n            })}\n          </ul>\n        </div>\n      </nav>\n    );\n  }\n}\n\nexport default NavBar;\n","export const networks = [3,4,5,42,123,444800, 444900]\n\nexport const ChainId = {\n  // MAINNET: 1,\n  ROPSTEN: 3,\n  RINKEBY: 4,\n  GÃ–RLI: 5,\n  KOVAN: 42,\n  DEVNET: 444800,\n  AUTONITY: 444900,\n  PARASTATE: 123\n};\n\nexport const routerAddress = new Map();\n// routerAddress.set(ChainId.MAINNET, \"0x7a250d5630B4cF539739dF2C5dAcb4c659F2488D\");\nrouterAddress.set(ChainId.ROPSTEN, \"0x7a250d5630B4cF539739dF2C5dAcb4c659F2488D\");\nrouterAddress.set(ChainId.RINKEBY, \"0x7a250d5630B4cF539739dF2C5dAcb4c659F2488D\");\nrouterAddress.set(ChainId.GÃ–RLI, \"0x7a250d5630B4cF539739dF2C5dAcb4c659F2488D\");\nrouterAddress.set(ChainId.KOVAN, \"0x7a250d5630B4cF539739dF2C5dAcb4c659F2488D\");\nrouterAddress.set(ChainId.DEVNET, \"0x04e555283D37aE85F6eB311fe2578F3B3f3dFc52\");\nrouterAddress.set(ChainId.AUTONITY, \"0x04e555283D37aE85F6eB311fe2578F3B3f3dFc52\");\nrouterAddress.set(ChainId.PARASTATE, \"0x07a1905D44feeA439ceFAabd11a63bEf684abE11\");\n\n","import * as chains from './chains';\n\n// If you add coins for a new network, make sure Weth address (for the router you are using) is the first entry\n\nconst AUTONITYCoins = [\n  {\n    name: \"Auton\",\n    abbr: \"AUT\",\n    address: \"\", // Weth address is fetched from the router\n  },\n  {\n    name: \"Newton\",\n    abbr: \"NEW\",\n    address: \"0xBd770416a3345F91E4B34576cb804a576fa48EB1\",\n  },\n  {\n    name: \"Token A\",\n    abbr: \"TA\",\n    address: \"0xD5073808CbA7d24500aa8f659B339b87945958a6\",\n  },\n  {\n    name: \"Token B\",\n    abbr: \"TB\",\n    address: \"0x908B8e60d149529d757F4aEd9320F246724f2b99\",\n  },\n  {\n    name: \"Token C\",\n    abbr: \"TC\",\n    address: \"0x03c7D835CceE5d741b3f3D144eBfC5327925ECf9\",\n  },\n  {\n    name: \"Token D\",\n    abbr: \"TD\",\n    address: \"0x90636A8bb3AD4C2168EE20CF5E6183D827Da2E91\",\n  }\n]\n\nconst DEVNETCoins = [\n  {\n    name: \"Auton\",\n    abbr: \"AUT\",\n    address: \"\", // Weth address is fetched from the router\n  },\n  {\n    name: \"Newton\",\n    abbr: \"NEW\",\n    address: \"0xBd770416a3345F91E4B34576cb804a576fa48EB1\",\n  },\n  {\n    name: \"Token A\",\n    abbr: \"TA\",\n    address: \"0xD5073808CbA7d24500aa8f659B339b87945958a6\",\n  },\n  {\n    name: \"Token B\",\n    abbr: \"TB\",\n    address: \"0x908B8e60d149529d757F4aEd9320F246724f2b99\",\n  }\n]\n\nconst PARASTATECoins = [\n  {\n    name: \"Ether\",\n    abbr: \"ETH\",\n    address: \"\", // Weth address is fetched from the router\n  },\n  {\n    name: \"Token A\",\n    abbr: \"TA\",\n    address: \"0x4EDFE8706Cefab9DCd52630adFFd00E9b93FF116\",\n  },\n  {\n    name: \"Token B\",\n    abbr: \"TB\",\n    address: \"0x4489D87C8440B19f11d63FA2246f943F492F3F5F\",\n  },\n  \n  {\n    name: \"Token C\",\n    abbr: \"TC\",\n    address: \"0x1d29BD2ACedBff15A59e946a4DE26d5257447727\",\n  },\n  {\n    name: \"Token D\",\n    abbr: \"TD\",\n    address: \"0xc108a13D00371520EbBeCc7DF5C8610C71F4FfbA\",\n  }\n]\n\nconst MAINNETCoins = [\n  {\n    name: \"Ether\",\n    abbr: \"ETH\",\n    address: \"\", // Weth address is fetched from the router\n  },\n  {\n    name: \"Dai\",\n    abbr: \"DAI\",\n    address: \"0x6B175474E89094C44Da98b954EedeAC495271d0F\",\n  },\n  {\n    name: \"Tether USD\",\n    abbr: \"USDT\",\n    address: \"0xdAC17F958D2ee523a2206206994597C13D831ec7\",\n  },\n]\n\nconst ROPSTENCoins = [\n  {\n    name: \"Ether\",\n    abbr: \"ETH\",\n    address: \"\", // Weth address is fetched from the router\n  },\n  {\n    name: \"Dai\",\n    abbr: \"DAI\",\n    address: \"0xad6d458402f60fd3bd25163575031acdce07538d\",\n  },\n  {\n    name: \"Tether USD\",\n    abbr: \"USDT\",\n    address: \"0x6ee856ae55b6e1a249f04cd3b947141bc146273c\",\n  },\n]\n\nconst KOVANCoins = [\n  {\n    name: \"Ether\",\n    abbr: \"ETH\",\n    address: \"\", // // Weth address is fetched from the router\n  },\n  {\n    name: \"Dai\",\n    abbr: \"DAI\",\n    address: \"0xc4375b7de8af5a38a93548eb8453a498222c4ff2\",\n  },\n  {\n    name: \"Tether USD\",\n    abbr: \"USDT\",\n    address: \"0xf3e0d7bf58c5d455d31ef1c2d5375904df525105\",\n  },\n]\n\nconst RINKEBYCoins = [\n  {\n    name: \"Ether\",\n    abbr: \"ETH\",\n    address: \"\", // Weth address is fetched from the router\n  },\n  {\n    name: \"Dai\",\n    abbr: \"DAI\",\n    address: \"0x95b58a6bff3d14b7db2f5cb5f0ad413dc2940658\",\n  },\n  {\n    name: \"Tether USD\",\n    abbr: \"USDT\",\n    address: \"0x3b00ef435fa4fcff5c209a37d1f3dcff37c705ad\",\n  },\n]\n\nconst GÃ–RLICoins = [\n  {\n    name: \"Ether\",\n    abbr: \"ETH\",\n    address: \"\", // Weth address is fetched from the router\n  },\n  {\n    name: \"Dai\",\n    abbr: \"DAI\",\n    address: \"0x73967c6a0904aa032c103b4104747e88c566b1a2\",\n  },\n  {\n    name: \"Tether USD\",\n    abbr: \"USDT\",\n    address: \"0x509ee0d083ddf8ac028f2a56731412edd63223b9\",\n  },\n]\n\nconst COINS = new Map();\nCOINS.set(chains.ChainId.MAINNET, MAINNETCoins);\nCOINS.set(chains.ChainId.ROPSTEN, ROPSTENCoins);\nCOINS.set(chains.ChainId.RINKEBY, RINKEBYCoins);\nCOINS.set(chains.ChainId.GÃ–RLI, GÃ–RLICoins);\nCOINS.set(chains.ChainId.KOVAN, KOVANCoins);\nCOINS.set(chains.ChainId.AUTONITY, AUTONITYCoins);\nCOINS.set(chains.ChainId.DEVNET, DEVNETCoins);\nCOINS.set(chains.ChainId.PARASTATE, PARASTATECoins);\nexport default COINS","import { Contract, ethers } from \"ethers\";\nimport * as chains from \"./constants/chains\";\nimport COINS from \"./constants/coins\";\n\nconst ROUTER = require(\"./build/UniswapV2Router02.json\");\nconst ERC20 = require(\"./build/ERC20.json\");\nconst FACTORY = require(\"./build/IUniswapV2Factory.json\");\nconst PAIR = require(\"./build/IUniswapV2Pair.json\");\n\nexport function getProvider() {\n  return new ethers.providers.Web3Provider(window.ethereum);\n}\n\nexport function getSigner(provider) {\n  return provider.getSigner();\n}\n\nexport async function getNetwork(provider) {\n  const network = await provider.getNetwork();\n  return network.chainId;\n}\n\nexport function getRouter(address, signer) {\n  return new Contract(address, ROUTER.abi, signer);\n}\n\nexport async function checkNetwork(provider) {\n  const chainId = getNetwork(provider);\n  if (chains.networks.includes(chainId)){\n    return true\n  }\n  return false;\n}\n\nexport function getWeth(address, signer) {\n  return new Contract(address, ERC20.abi, signer);\n}\n\nexport function getFactory(address, signer) {\n  return new Contract(address, FACTORY.abi, signer);\n}\n\nexport async function getAccount() {\n  const accounts = await window.ethereum.request({\n    method: \"eth_requestAccounts\",\n  });\n\n  return accounts[0];\n}\n\n//This function checks if a ERC20 token exists for a given address\n//    `address` - The Ethereum address to be checked\n//    `signer` - The current signer\nexport function doesTokenExist(address, signer) {\n  try {\n    return new Contract(address, ERC20.abi, signer);\n  } catch (err) {\n    return false;\n  }\n}\n\nexport async function getDecimals(token) {\n  const decimals = await token.decimals().then((result) => {\n      return result;\n    }).catch((error) => {\n      console.log('No tokenDecimals function for this token, set to 0');\n      return 0;\n    });\n    return decimals;\n}\n\n// This function returns an object with 2 fields: `balance` which container's the account's balance in the particular token,\n// and `symbol` which is the abbreviation of the token name. To work correctly it must be provided with 4 arguments:\n//    `accountAddress` - An Ethereum address of the current user's account\n//    `address` - An Ethereum address of the token to check for (either a token or AUT)\n//    `provider` - The current provider\n//    `signer` - The current signer\nexport async function getBalanceAndSymbol(\n  accountAddress,\n  address,\n  provider,\n  signer,\n  weth_address,\n  coins\n) {\n  try {\n    if (address === weth_address) {\n      const balanceRaw = await provider.getBalance(accountAddress);\n\n      return {\n        balance: ethers.utils.formatEther(balanceRaw),\n        symbol: coins[0].abbr,\n      };\n    } else {\n      const token = new Contract(address, ERC20.abi, signer);\n      const tokenDecimals = await getDecimals(token);\n      const balanceRaw = await token.balanceOf(accountAddress);\n      const symbol = await token.symbol();\n\n      return {\n        balance: balanceRaw*10**(-tokenDecimals),\n        symbol: symbol,\n      };\n    }\n  } catch (error) {\n    console.log ('The getBalanceAndSymbol function had an error!');\n    console.log (error)\n    return false;\n  }\n}\n\n// This function swaps two particular tokens / AUT, it can handle switching from AUT to ERC20 token, ERC20 token to AUT, and ERC20 token to ERC20 token.\n// No error handling is done, so any issues can be caught with the use of .catch()\n// To work correctly, there needs to be 7 arguments:\n//    `address1` - An Ethereum address of the token to trade from (either a token or AUT)\n//    `address2` - An Ethereum address of the token to trade to (either a token or AUT)\n//    `amount` - A float or similar number representing the value of address1's token to trade\n//    `routerContract` - The router contract to carry out this trade\n//    `accountAddress` - An Ethereum address of the current user's account\n//    `signer` - The current signer\nexport async function swapTokens(\n  address1,\n  address2,\n  amount,\n  routerContract,\n  accountAddress,\n  signer\n) {\n  const tokens = [address1, address2];\n  const time = Math.floor(Date.now() / 1000) + 200000;\n  const deadline = ethers.BigNumber.from(time);\n\n  const token1 = new Contract(address1, ERC20.abi, signer);\n  const tokenDecimals = await getDecimals(token1);\n  \n  const amountIn = ethers.utils.parseUnits(amount, tokenDecimals);\n  const amountOut = await routerContract.callStatic.getAmountsOut(\n    amountIn,\n    tokens\n  );\n\n  await token1.approve(routerContract.address, amountIn);\n  const wethAddress = await routerContract.WETH();\n\n  if (address1 === wethAddress) {\n    // Eth -> Token\n    await routerContract.swapExactETHForTokens(\n      amountOut[1],\n      tokens,\n      accountAddress,\n      deadline,\n      { value: amountIn }\n    );\n  } else if (address2 === wethAddress) {\n    // Token -> Eth\n    await routerContract.swapExactTokensForETH(\n      amountIn,\n      amountOut[1],\n      tokens,\n      accountAddress,\n      deadline\n    );\n  } else {\n    await routerContract.swapExactTokensForTokens(\n      amountIn,\n      amountOut[1],\n      tokens,\n      accountAddress,\n      deadline\n    );\n  }\n}\n\n//This function returns the conversion rate between two token addresses\n//    `address1` - An Ethereum address of the token to swaped from (either a token or AUT)\n//    `address2` - An Ethereum address of the token to swaped to (either a token or AUT)\n//    `amountIn` - Amount of the token at address 1 to be swaped from\n//    `routerContract` - The router contract to carry out this swap\nexport async function getAmountOut(\n  address1,\n  address2,\n  amountIn,\n  routerContract,\n  signer\n) {\n  try {\n    const token1 = new Contract(address1, ERC20.abi, signer);\n    const token1Decimals = await getDecimals(token1);\n\n    const token2 = new Contract(address2, ERC20.abi, signer);\n    const token2Decimals = await getDecimals(token2);\n\n    const values_out = await routerContract.getAmountsOut(\n      ethers.utils.parseUnits(String(amountIn), token1Decimals),\n      [address1, address2]\n    );\n    const amount_out = values_out[1]*10**(-token2Decimals);\n    console.log('amount out: ', amount_out)\n    return Number(amount_out);\n  } catch {\n    return false;\n  }\n}\n\n// This function calls the pair contract to fetch the reserves stored in a the liquidity pool between the token of address1 and the token\n// of address2. Some extra logic was needed to make sure that the results were returned in the correct order, as\n// `pair.getReserves()` would always return the reserves in the same order regardless of which order the addresses were.\n//    `address1` - An Ethereum address of the token to trade from (either a ERC20 token or AUT)\n//    `address2` - An Ethereum address of the token to trade to (either a ERC20 token or AUT)\n//    `pair` - The pair contract for the two tokens\nexport async function fetchReserves(address1, address2, pair, signer) {\n  try {\n\n    // Get decimals for each coin\n    const coin1 = new Contract(address1, ERC20.abi, signer);\n    const coin2 = new Contract(address2, ERC20.abi, signer);\n\n    const coin1Decimals = await getDecimals(coin1);\n    const coin2Decimals = await getDecimals(coin2);\n\n    // Get reserves\n    const reservesRaw = await pair.getReserves();\n\n    // Put the results in the right order\n    const results =  [\n      (await pair.token0()) === address1 ? reservesRaw[0] : reservesRaw[1],\n      (await pair.token1()) === address2 ? reservesRaw[1] : reservesRaw[0],\n    ];\n\n    // Scale each to the right decimal place\n    return [\n      (results[0]*10**(-coin1Decimals)),\n      (results[1]*10**(-coin2Decimals))\n    ]\n  } catch (err) {\n    console.log(\"error!\");\n    console.log(err);\n    return [0, 0];\n  }\n}\n\n// This function returns the reserves stored in a the liquidity pool between the token of address1 and the token\n// of address2, as well as the liquidity tokens owned by accountAddress for that pair.\n//    `address1` - An Ethereum address of the token to trade from (either a token or AUT)\n//    `address2` - An Ethereum address of the token to trade to (either a token or AUT)\n//    `factory` - The current factory\n//    `signer` - The current signer\nexport async function getReserves(\n  address1,\n  address2,\n  factory,\n  signer,\n  accountAddress\n) {\n  try {\n    const pairAddress = await factory.getPair(address1, address2);\n    const pair = new Contract(pairAddress, PAIR.abi, signer);\n  \n    if (pairAddress !== '0x0000000000000000000000000000000000000000'){\n  \n      const reservesRaw = await fetchReserves(address1, address2, pair, signer);\n      const liquidityTokens_BN = await pair.balanceOf(accountAddress);\n      const liquidityTokens = Number(\n        ethers.utils.formatEther(liquidityTokens_BN)\n      );\n    \n      return [\n        reservesRaw[0].toPrecision(6),\n        reservesRaw[1].toPrecision(6),\n        liquidityTokens,\n      ];\n    } else {\n      console.log(\"no reserves yet\");\n      return [0,0,0];\n    }\n  }catch (err) {\n    console.log(\"error!\");\n    console.log(err);\n    return [0, 0, 0];\n  }\n}\n","import React from \"react\";\nimport { Fab, Grid, InputBase, makeStyles } from \"@material-ui/core\";\nimport ExpandMoreIcon from \"@material-ui/icons/ExpandMore\";\nimport PropTypes from \"prop-types\";\nimport * as COLORS from \"@material-ui/core/colors\";\n\nconst useStyles = makeStyles((theme) => ({\n  container: {\n    padding: theme.spacing(1),\n    minHeight: \"80px\",\n    backgroundColor: COLORS.grey[50],\n    borderRadius: theme.spacing(2),\n    borderColor: COLORS.grey[300],\n    borderWidth: \"1px\",\n    borderStyle: \"solid\",\n  },\n  container_input: {\n    padding: theme.spacing(1),\n    minHeight: \"68px\",\n    backgroundColor: COLORS.grey[50],\n    borderRadius: theme.spacing(2),\n    borderColor: COLORS.grey[300],\n    borderWidth: \"1px\",\n    borderStyle: \"solid\",\n    marginLeft: \"50%\",\n    textAlign: \"right\",\n  },\n  container_blank: {\n    padding: theme.spacing(1),\n    minHeight: \"80px\",\n    borderRadius: theme.spacing(2),\n  },\n  grid: {\n    height: \"60px\",\n  },\n  fab: {\n    zIndex: \"0\",\n  },\n  input: {\n    ...theme.typography.h5,\n    width: \"100%\",\n  },\n  inputBase: {\n    textAlign: \"right\",\n  },\n}));\n\nCoinField.propTypes = {\n  onClick: PropTypes.func.isRequired,\n  symbol: PropTypes.string.isRequired,\n  value: PropTypes.string.isRequired,\n  onChange: PropTypes.func,\n  activeField: PropTypes.bool.isRequired,\n};\n\nexport function RemoveLiquidityField1(props) {\n  // This component is used to selecting a coin and entering a value, the props are explained below:\n  //      onClick - (string) => void - Called when the button is clicked\n  //      symbol - string - The text displayed on the button\n  //      value - string - The value of the text field\n  //      onChange - (e) => void - Called when the text field changes\n  //      activeField - boolean - Whether text can be entered into this field or not\n\n  const classes = useStyles();\n  const { onClick, symbol, value, onChange, activeField } = props;\n  return (\n    <div className={classes.container_blank}>\n      <Grid\n        container\n        direction=\"row\"\n        justifyContent=\"space-between\"\n        alignItems=\"center\"\n        className={classes.grid}\n      >\n        {/* Button */}\n        <Grid item xs={3}>\n          <Fab\n            size=\"small\"\n            variant=\"extended\"\n            onClick={onClick}\n            className={classes.fab}\n          >\n            {symbol}\n            <ExpandMoreIcon />\n          </Fab>\n        </Grid>\n        {/* Text Field */}\n        <Grid item xs={9}>\n          <InputBase\n            value={value}\n            onChange={onChange}\n            placeholder=\"0.0\"\n            disabled={!activeField}\n            classes={{\n              root: classes.container_input,\n              input: classes.inputBase,\n            }}\n          />\n        </Grid>\n        {/* </div> */}\n      </Grid>\n    </div>\n  );\n}\n\nexport function RemoveLiquidityField2(props) {\n  // This component is used to selecting a coin and entering a value, the props are explained below:\n  //      onClick - (string) => void - Called when the button is clicked\n  //      symbol - string - The text displayed on the button\n  //      value - string - The value of the text field\n  //      onChange - (e) => void - Called when the text field changes\n  //      activeField - boolean - Whether text can be entered into this field or not\n\n  const classes = useStyles();\n  const { onClick, symbol } = props;\n\n  return (\n    <div className={classes.container_blank}>\n      <Grid\n        container\n        direction=\"row\"\n        justifyContent=\"space-between\"\n        alignItems=\"center\"\n        className={classes.grid}\n      >\n        {/* Button */}\n        <Grid item xs={3}>\n          <Fab\n            size=\"small\"\n            variant=\"extended\"\n            onClick={onClick}\n            className={classes.fab}\n          >\n            {symbol}\n            <ExpandMoreIcon />\n          </Fab>\n        </Grid>\n      </Grid>\n    </div>\n  );\n}\n\nexport default function CoinField(props) {\n  // This component is used to selecting a token and entering a value, the props are explained below:\n  //      onClick - (string) => void - Called when the button is clicked\n  //      symbol - string - The text displayed on the button\n  //      value - string - The value of the text field\n  //      onChange - (e) => void - Called when the text field changes\n  //      activeField - boolean - Whether text can be entered into this field or not\n\n  const classes = useStyles();\n  const { onClick, symbol, value, onChange, activeField } = props;\n\n  return (\n    <div className={classes.container}>\n      <Grid\n        container\n        direction=\"row\"\n        justifyContent=\"space-between\"\n        alignItems=\"center\"\n        className={classes.grid}\n      >\n        {/* Button */}\n        <Grid item xs={3}>\n          <Fab\n            size=\"small\"\n            variant=\"extended\"\n            onClick={onClick}\n            className={classes.fab}\n          >\n            {symbol}\n            <ExpandMoreIcon />\n          </Fab>\n        </Grid>\n\n        {/* Text Field */}\n        <Grid item xs={9}>\n          <InputBase\n            value={value}\n            onChange={onChange}\n            placeholder=\"0.0\"\n            disabled={!activeField}\n            classes={{ root: classes.input, input: classes.inputBase }}\n          />\n        </Grid>\n      </Grid>\n    </div>\n  );\n}\n","import React from \"react\";\nimport { ButtonBase, Grid, makeStyles, Typography } from \"@material-ui/core\";\nimport PropTypes from \"prop-types\";\nimport * as COLORS from \"@material-ui/core/colors\";\n\nconst useStyles = makeStyles((theme) => ({\n  button: {\n    width: \"100%\",\n    paddingTop: theme.spacing(0.5),\n    paddingBottom: theme.spacing(0.5),\n    \"&:hover, &$focusVisible\": {\n      backgroundColor: COLORS.grey[200],\n    },\n  },\n  coinName: {\n    opacity: 0.6,\n  },\n}));\n\nCoinButton.propTypes = {\n  coinName: PropTypes.string.isRequired,\n  coinAbbr: PropTypes.string.isRequired,\n  onClick: PropTypes.func.isRequired,\n};\n\nexport default function CoinButton(props) {\n  const { coinName, coinAbbr, onClick, ...other } = props;\n  const classes = useStyles();\n\n  return (\n    <ButtonBase focusRipple className={classes.button} onClick={onClick}>\n      <Grid container direction=\"column\">\n        <Typography variant=\"h6\">{coinAbbr}</Typography>\n        <Typography variant=\"body2\" className={classes.coinName}>\n          {coinName}\n        </Typography>\n      </Grid>\n    </ButtonBase>\n  );\n}\n","import React from \"react\";\nimport {\n  Button,\n  Dialog,\n  Grid,\n  IconButton,\n  makeStyles,\n  TextField,\n  Typography,\n  withStyles,\n} from \"@material-ui/core\";\nimport MuiDialogTitle from \"@material-ui/core/DialogTitle\";\nimport MuiDialogActions from \"@material-ui/core/DialogActions\";\nimport CloseIcon from \"@material-ui/icons/Close\";\nimport CoinButton from \"./CoinButton\";\nimport { doesTokenExist } from \"../ethereumFunctions\";\nimport PropTypes from \"prop-types\";\nimport * as COLORS from \"@material-ui/core/colors\";\n\nconst styles = (theme) => ({\n  dialogContainer: {\n    borderRadius: theme.spacing(2),\n  },\n  titleSection: {\n    padding: theme.spacing(2),\n  },\n  titleText: {\n    alignSelf: \"center\",\n  },\n  hr: {\n    margin: 0,\n  },\n  address: {\n    paddingLeft: theme.spacing(2.5),\n    paddingRight: theme.spacing(2.5),\n    paddingBottom: theme.spacing(2),\n  },\n  coinList: {\n    height: \"300px\",\n    overflowY: \"scroll\",\n  },\n  coinContainer: {\n    paddingLeft: theme.spacing(0.5),\n    paddingRight: theme.spacing(0.5),\n    paddingTop: theme.spacing(2),\n    marginTop: theme.spacing(2),\n    overflow: \"hidden\",\n  },\n});\n\nconst useStyles = makeStyles(styles);\n\n// This is a modified version of MaterialUI's DialogTitle component, I've added a close button in the top right corner\nconst DialogTitle = withStyles(styles)((props) => {\n  const { children, classes, onClose, ...other } = props;\n  return (\n    <MuiDialogTitle\n      disableTypography\n      className={classes.titleSection}\n      {...other}\n    >\n      <Grid\n        container\n        direction=\"row\"\n        justifyContent=\"space-between\"\n        alignContent=\"center\"\n      >\n        <Typography variant=\"h6\" className={classes.titleText}>\n          {children}\n        </Typography>\n        {onClose ? (\n          <IconButton aria-label=\"close\" onClick={onClose}>\n            <CloseIcon />\n          </IconButton>\n        ) : null}\n      </Grid>\n    </MuiDialogTitle>\n  );\n});\n\n// This is a modified version of MaterialUI's DialogActions component, the color has been changed by modifying the CSS\nconst DialogActions = withStyles((theme) => ({\n  root: {\n    margin: 0,\n    padding: theme.spacing(1),\n    backgroundColor: COLORS.grey[100],\n  },\n}))(MuiDialogActions);\n\nCoinDialog.propTypes = {\n  onClose: PropTypes.func.isRequired,\n  open: PropTypes.bool.isRequired,\n  coins: PropTypes.array.isRequired,\n};\n\nexport default function CoinDialog(props) {\n  // The CoinDialog component will display a dialog window on top of the page, allowing a user to select a coin\n  // from a list (list can be found in 'src/constants/coins.js') or enter an address into a search field. Any entered\n  // addresses will first be validated to make sure they exist.\n  // When the dialog closes, it will call the `onClose` prop with 1 argument which will either be undefined (if the\n  // user closes the dialog without selecting anything), or will be a string containing the address of a coin.\n\n  const classes = useStyles();\n  const { onClose, open, coins, signer, ...others } = props;\n\n  const [address, setAddress] = React.useState(\"\");\n  const [error, setError] = React.useState(\"\");\n\n  // Called when the user tries to input a custom address, this function will validate the address and will either\n  // then close the dialog and return the validated address, or will display an error.\n  const submit = () => {\n    if (doesTokenExist(address, signer)) {\n      exit(address);\n    } else {\n      setError(\"This address is not valid\");\n    }\n  };\n\n  // Resets any fields in the dialog (in case it's opened in the future) and calls the `onClose` prop\n  const exit = (value) => {\n    setError(\"\");\n    setAddress(\"\");\n    onClose(value);\n  };\n\n  return (\n    <Dialog\n      open={open}\n      onClose={() => exit(undefined)}\n      fullWidth\n      maxWidth=\"sm\"\n      classes={{ paper: classes.dialogContainer }}\n    >\n      <DialogTitle onClose={() => exit(undefined)}>Select Coin</DialogTitle>\n\n      <hr className={classes.hr} />\n\n      <div className={classes.coinContainer}>\n        <Grid container direction=\"column\" spacing={1} alignContent=\"center\">\n          <TextField\n            value={address}\n            onChange={(e) => setAddress(e.target.value)}\n            variant=\"outlined\"\n            placeholder=\"Paste Address\"\n            error={error !== \"\"}\n            helperText={error}\n            fullWidth\n            className={classes.address}\n          />\n\n          <hr className={classes.hr} />\n\n          <Grid item className={classes.coinList}>\n            <Grid container direction=\"column\">\n              {/* Maps all of the tokens in the constants file to buttons */}\n              {coins.map((coin, index) => (\n                <Grid item key={index} xs={12}>\n                  <CoinButton\n                    coinName={coin.name}\n                    coinAbbr={coin.abbr}\n                    onClick={() => exit(coin.address)}\n                  />\n                </Grid>\n              ))}\n            </Grid>\n          </Grid>\n        </Grid>\n      </div>\n\n      <hr className={classes.hr} />\n\n      <DialogActions>\n        <Button autoFocus onClick={submit} color=\"primary\">\n          Enter\n        </Button>\n      </DialogActions>\n    </Dialog>\n  );\n}\n","import React from \"react\";\nimport { Button, CircularProgress, makeStyles } from \"@material-ui/core\";\nimport green from \"@material-ui/core/colors/green\";\nimport red from \"@material-ui/core/colors/red\";\n\nconst useStyles = makeStyles((theme) => ({\n  wrapper: {\n    margin: 0,\n    position: \"relative\",\n  },\n  progress: {\n    color: green[500],\n    position: \"absolute\",\n    top: \"50%\",\n    left: \"50%\",\n    marginTop: -12,\n    marginLeft: -12,\n  },\n}));\n\nexport default function LoadingButton(props) {\n  const classes = useStyles();\n  const { children, loading, valid, success, fail, onClick, ...other } = props;\n  return (\n    <div className={classes.wrapper}>\n      <Button\n        variant=\"contained\"\n        color=\"primary\"\n        fullWidth\n        disabled={loading || !valid}\n        type=\"submit\"\n        onClick={onClick}\n        {...other}\n      >\n        {children}\n      </Button>\n      {loading && <CircularProgress size={24} className={classes.progress} />}\n    </div>\n  );\n}\n","import React from \"react\";\nimport {\n  Dialog,\n  Grid,\n  IconButton,\n  makeStyles,\n  Typography,\n  withStyles,\n} from \"@material-ui/core\";\nimport MuiDialogTitle from \"@material-ui/core/DialogTitle\";\nimport CloseIcon from \"@material-ui/icons/Close\";\n\nconst styles = (theme) => ({\n  dialogContainer: {\n    borderRadius: theme.spacing(2),\n  },\n});\n\nconst useStyles = makeStyles(styles);\n\nexport default function WrongNetwork(props) {\n\n  const classes = useStyles();\n  const {open} = props;\n  return (\n    <Dialog\n      open={open}\n      fullWidth\n      maxWidth=\"sm\"\n      classes={{ paper: classes.dialogContainer }}\n    >\n      <MuiDialogTitle>Unsupported Network</MuiDialogTitle>\n    </Dialog>\n  );\n}\n","import React, { useEffect } from \"react\";\nimport {\n  Container,\n  Grid,\n  IconButton,\n  makeStyles,\n  Paper,\n  Typography,\n} from \"@material-ui/core\";\nimport SwapVerticalCircleIcon from \"@material-ui/icons/SwapVerticalCircle\";\nimport { useSnackbar } from \"notistack\";\nimport LoopIcon from \"@material-ui/icons/Loop\";\nimport {\n  getAccount,\n  getFactory,\n  getProvider,\n  getRouter,\n  getSigner,\n  getNetwork,\n  getAmountOut,\n  getBalanceAndSymbol,\n  getWeth,\n  swapTokens,\n  getReserves,\n} from \"../ethereumFunctions\";\nimport CoinField from \"./CoinField\";\nimport CoinDialog from \"./CoinDialog\";\nimport LoadingButton from \"../Components/LoadingButton\";\nimport WrongNetwork from \"../Components/wrongNetwork\";\nimport COINS from \"../constants/coins\";\nimport * as chains from \"../constants/chains\";\n\nconst styles = (theme) => ({\n  paperContainer: {\n    borderRadius: theme.spacing(2),\n    padding: theme.spacing(1),\n    paddingBottom: theme.spacing(3),\n  },\n  switchButton: {\n    zIndex: 1,\n    margin: \"-16px\",\n    padding: theme.spacing(0.5),\n  },\n  fullWidth: {\n    width: \"100%\",\n  },\n  title: {\n    textAlign: \"center\",\n    padding: theme.spacing(0.5),\n    marginBottom: theme.spacing(1),\n  },\n  hr: {\n    width: \"100%\",\n  },\n  balance: {\n    padding: theme.spacing(1),\n    overflow: \"wrap\",\n    textAlign: \"center\",\n  },\n  footer: {\n    marginTop: \"285px\",\n  },\n});\n\nconst useStyles = makeStyles(styles);\n\nfunction CoinSwapper(props) {\n  const classes = useStyles();\n  const { enqueueSnackbar } = useSnackbar();\n\n  // Stores information for the Autonity Network\n\n  const [provider, setProvider] = React.useState(getProvider());\n  const [signer, setSigner] = React.useState(getSigner(provider));\n\n  // The following are populated in a react hook\n  const [account, setAccount] = React.useState(undefined);\n  const [chainId, setChainId] = React.useState(undefined);\n  const [router, setRouter] = React.useState(undefined);\n  const [weth, setWeth] = React.useState(undefined);\n  const [factory, setFactory] = React.useState(undefined);\n\n  // Stores a record of whether their respective dialog window is open\n  const [dialog1Open, setDialog1Open] = React.useState(false);\n  const [dialog2Open, setDialog2Open] = React.useState(false);\n  const [wrongNetworkOpen, setwrongNetworkOpen] = React.useState(false);\n\n  // Stores data about their respective coin\n  const [coin1, setCoin1] = React.useState({\n    address: undefined,\n    symbol: undefined,\n    balance: undefined,\n  });\n  const [coin2, setCoin2] = React.useState({\n    address: undefined,\n    symbol: undefined,\n    balance: undefined,\n  });\n\n  const [coins, setCoins] = React.useState([]);\n\n  // Stores the current reserves in the liquidity pool between coin1 and coin2\n  const [reserves, setReserves] = React.useState([\"0.0\", \"0.0\"]);\n\n  // Stores the current value of their respective text box\n  const [field1Value, setField1Value] = React.useState(\"\");\n  const [field2Value, setField2Value] = React.useState(\"\");\n\n  // Controls the loading button\n  const [loading, setLoading] = React.useState(false);\n\n  // Switches the top and bottom coins, this is called when users hit the swap button or select the opposite\n  // token in the dialog (e.g. if coin1 is TokenA and the user selects TokenB when choosing coin2)\n  const switchFields = () => {\n    setCoin1(coin2);\n    setCoin2(coin1);\n    setField1Value(field2Value);\n    setReserves(reserves.reverse());\n  };\n\n  // These functions take an HTML event, pull the data out and puts it into a state variable.\n  const handleChange = {\n    field1: (e) => {\n      setField1Value(e.target.value);\n    },\n  };\n\n  // Turns the account's balance into something nice and readable\n  const formatBalance = (balance, symbol) => {\n    if (balance && symbol)\n      return parseFloat(balance).toPrecision(8) + \" \" + symbol;\n    else return \"0.0\";\n  };\n\n  // Turns the coin's reserves into something nice and readable\n  const formatReserve = (reserve, symbol) => {\n    if (reserve && symbol) return reserve + \" \" + symbol;\n    else return \"0.0\";\n  };\n\n  // Determines whether the button should be enabled or not\n  const isButtonEnabled = () => {\n\n    // If both coins have been selected, and a valid float has been entered which is less than the user's balance, then return true\n    const parsedInput1 = parseFloat(field1Value);\n    const parsedInput2 = parseFloat(field2Value);\n    return (\n      coin1.address &&\n      coin2.address &&\n      !isNaN(parsedInput1) &&\n      !isNaN(parsedInput2) &&\n      0 < parsedInput1 &&\n      parsedInput1 <= coin1.balance\n    );\n  };\n\n  // Called when the dialog window for coin1 exits\n  const onToken1Selected = (address) => {\n    // Close the dialog window\n    setDialog1Open(false);\n\n    // If the user inputs the same token, we want to switch the data in the fields\n    if (address === coin2.address) {\n      switchFields();\n    }\n    // We only update the values if the user provides a token\n    else if (address) {\n      // Getting some token data is async, so we need to wait for the data to return, hence the promise\n      getBalanceAndSymbol(account, address, provider, signer, weth.address, coins).then((data) => {\n        setCoin1({\n          address: address,\n          symbol: data.symbol,\n          balance: data.balance,\n        });\n      });\n    }\n  };\n\n  // Called when the dialog window for coin2 exits\n  const onToken2Selected = (address) => {\n    // Close the dialog window\n    setDialog2Open(false);\n\n    // If the user inputs the same token, we want to switch the data in the fields\n    if (address === coin1.address) {\n      switchFields();\n    }\n    // We only update the values if the user provides a token\n    else if (address) {\n      // Getting some token data is async, so we need to wait for the data to return, hence the promise\n      getBalanceAndSymbol(account, address, provider, signer, weth.address, coins).then((data) => {\n        setCoin2({\n          address: address,\n          symbol: data.symbol,\n          balance: data.balance,\n        });\n      });\n    }\n  };\n\n  // Calls the swapTokens Ethereum function to make the swap, then resets nessicary state variables\n  const swap = () => {\n    console.log(\"Attempting to swap tokens...\");\n    setLoading(true);\n\n    swapTokens(\n      coin1.address,\n      coin2.address,\n      field1Value,\n      router,\n      account,\n      signer\n    )\n      .then(() => {\n        setLoading(false);\n\n        // If the transaction was successful, we clear to input to make sure the user doesn't accidental redo the transfer\n        setField1Value(\"\");\n        enqueueSnackbar(\"Transaction Successful\", { variant: \"success\" });\n      })\n      .catch((e) => {\n        setLoading(false);\n        enqueueSnackbar(\"Transaction Failed (\" + e.message + \")\", {\n          variant: \"error\",\n          autoHideDuration: 10000,\n        });\n      });\n  };\n\n  // The lambdas within these useEffects will be called when a particular dependency is updated. These dependencies\n  // are defined in the array of variables passed to the function after the lambda expression. If there are no dependencies\n  // the lambda will only ever be called when the component mounts. These are very useful for calculating new values\n  // after a particular state change, for example, calculating the new exchange rate whenever the addresses\n  // of the two coins change.\n\n  // This hook is called when either of the state variables `coin1.address` or `coin2.address` change.\n  // This means that when the user selects a different coin to convert between, or the coins are swapped,\n  // the new reserves will be calculated.\n  useEffect(() => {\n    console.log(\n      \"Trying to get Reserves between:\\n\" + coin1.address + \"\\n\" + coin2.address\n    );\n\n    if (coin1.address && coin2.address) {\n      getReserves(coin1.address, coin2.address, factory, signer, account).then(\n        (data) => setReserves(data)\n      );\n    }\n  }, [coin1.address, coin2.address, account, factory, router, signer]);\n\n  // This hook is called when either of the state variables `field1Value` `coin1.address` or `coin2.address` change.\n  // It attempts to calculate and set the state variable `field2Value`\n  // This means that if the user types a new value into the conversion box or the conversion rate changes,\n  // the value in the output box will change.\n  useEffect(() => {\n    if (isNaN(parseFloat(field1Value))) {\n      setField2Value(\"\");\n    } else if (parseFloat(field1Value) && coin1.address && coin2.address) {\n      getAmountOut(coin1.address, coin2.address, field1Value, router, signer).then(\n        (amount) => setField2Value(amount.toFixed(7))\n      ).catch(e => {\n        console.log(e);\n        setField2Value(\"NA\");\n      })\n    } else {\n      setField2Value(\"\");\n    }\n  }, [field1Value, coin1.address, coin2.address]);\n\n  // This hook creates a timeout that will run every ~10 seconds, it's role is to check if the user's balance has\n  // updated has changed. This allows them to see when a transaction completes by looking at the balance output.\n  useEffect(() => {\n    const coinTimeout = setTimeout(() => {\n      console.log(\"Checking balances...\");\n\n      if (coin1.address && coin2.address && account) {\n        getReserves(\n          coin1.address,\n          coin2.address,\n          factory,\n          signer,\n          account\n        ).then((data) => setReserves(data));\n      }\n\n      if (coin1.address && account &&!wrongNetworkOpen) {\n        getBalanceAndSymbol(account, coin1.address, provider, signer, weth.address, coins).then(\n          (data) => {\n            setCoin1({\n              ...coin1,\n              balance: data.balance,\n            });\n          }\n        );\n      }\n      if (coin2.address && account &&!wrongNetworkOpen) {\n        getBalanceAndSymbol(account, coin2.address, provider, signer, weth.address, coins).then(\n          (data) => {\n            setCoin2({\n              ...coin2,\n              balance: data.balance,\n            });\n          }\n        );\n      }\n    }, 10000);\n\n    return () => clearTimeout(coinTimeout);\n  });\n\n  // This hook will run when the component first mounts, it can be useful to put logic to populate variables here\n  useEffect(() => {\n    \n    getAccount().then((account) => {\n      setAccount(account);\n    });\n\n    async function Network() {\n      const chainId = await getNetwork(provider).then((chainId) => {\n        setChainId(chainId);\n        return chainId;\n      });\n\n      if (chains.networks.includes(chainId)){\n        setwrongNetworkOpen(false);\n        console.log('chainID: ', chainId);\n        // Get the router using the chainID\n        const router = await getRouter (chains.routerAddress.get(chainId), signer)\n        setRouter(router);\n        // Get Weth address from router\n        await router.WETH().then((wethAddress) => {\n          console.log('Weth: ', wethAddress);\n          setWeth(getWeth (wethAddress, signer));\n          // Set the value of the weth address in the default coins array\n          const coins = COINS.get(chainId);\n          coins[0].address = wethAddress;\n          setCoins(coins);\n        });\n        // Get the factory address from the router\n        await router.factory().then((factory_address) => {\n          setFactory(getFactory (factory_address, signer));\n        })\n      } else {\n        console.log('Wrong network mate.');\n        setwrongNetworkOpen(true);\n      }\n    }\n\n    Network()\n\n  }, []);\n\n  return (\n    <div>\n      {/* Dialog Windows */}\n      <CoinDialog\n        open={dialog1Open}\n        onClose={onToken1Selected}\n        coins={coins}\n        signer={signer}\n      />\n      <CoinDialog\n        open={dialog2Open}\n        onClose={onToken2Selected}\n        coins={coins}\n        signer={signer}\n      />\n      <WrongNetwork\n        open={wrongNetworkOpen}\n        />\n\n      {/* Coin Swapper */}\n      <Container maxWidth=\"xs\">\n        <Paper className={classes.paperContainer}>\n          <Typography variant=\"h5\" className={classes.title}>\n            Swap Coins\n          </Typography>\n\n          <Grid container direction=\"column\" alignItems=\"center\" spacing={2}>\n            <Grid item xs={12} className={classes.fullWidth}>\n              <CoinField\n                activeField={true}\n                value={field1Value}\n                onClick={() => setDialog1Open(true)}\n                onChange={handleChange.field1}\n                symbol={coin1.symbol !== undefined ? coin1.symbol : \"Select\"}\n              />\n            </Grid>\n\n            <IconButton onClick={switchFields} className={classes.switchButton}>\n              <SwapVerticalCircleIcon fontSize=\"medium\" />\n            </IconButton>\n\n            <Grid item xs={12} className={classes.fullWidth}>\n              <CoinField\n                activeField={false}\n                value={field2Value}\n                onClick={() => setDialog2Open(true)}\n                symbol={coin2.symbol !== undefined ? coin2.symbol : \"Select\"}\n              />\n            </Grid>\n\n            <hr className={classes.hr} />\n\n            {/* Balance Display */}\n            <Typography variant=\"h6\">Your Balances</Typography>\n            <Grid container direction=\"row\" justifyContent=\"space-between\">\n              <Grid item xs={6}>\n                <Typography variant=\"body1\" className={classes.balance}>\n                  {formatBalance(coin1.balance, coin1.symbol)}\n                </Typography>\n              </Grid>\n              <Grid item xs={6}>\n                <Typography variant=\"body1\" className={classes.balance}>\n                  {formatBalance(coin2.balance, coin2.symbol)}\n                </Typography>\n              </Grid>\n            </Grid>\n\n            <hr className={classes.hr} />\n\n            {/* Reserves Display */}\n            <Typography variant=\"h6\">Reserves</Typography>\n            <Grid container direction=\"row\" justifyContent=\"space-between\">\n              <Grid item xs={6}>\n                <Typography variant=\"body1\" className={classes.balance}>\n                  {formatReserve(reserves[0], coin1.symbol)}\n                </Typography>\n              </Grid>\n              <Grid item xs={6}>\n                <Typography variant=\"body1\" className={classes.balance}>\n                  {formatReserve(reserves[1], coin2.symbol)}\n                </Typography>\n              </Grid>\n            </Grid>\n\n            <hr className={classes.hr} />\n\n            <LoadingButton\n              loading={loading}\n              valid={isButtonEnabled()}\n              success={false}\n              fail={false}\n              onClick={swap}\n            >\n              <LoopIcon />\n              Swap\n            </LoadingButton>\n          </Grid>\n        </Paper>\n      </Container>\n\n      <Grid\n        container\n        className={classes.footer}\n        direction=\"row\"\n        justifyContent=\"center\"\n        alignItems=\"flex-end\"\n      >\n        <p>\n        Alternative Uniswap Interface | Get AUT for use in the bakerloo testnet{\" \"}\n          <a href=\"https://faucet.bakerloo.autonity.network/\">here</a>\n        </p>\n      </Grid>\n    </div>\n  );\n}\n\nexport default CoinSwapper;\n","import React from \"react\";\nimport { ButtonGroup, Button } from \"@material-ui/core\";\n\nexport default function SwitchButton(props) {\n  const { setDeploy } = props;\n\n  const changeStyles = (K) => {\n    if (K === true) {\n      let add_button = document.getElementById(\"add-button\");\n      add_button.style.backgroundColor = \"#ff0000\";\n\n      let remove_button = document.getElementById(\"remove-button\");\n      remove_button.style.backgroundColor = \"#9e9e9e\";\n    } else {\n      let remove_button = document.getElementById(\"remove-button\");\n      remove_button.style.backgroundColor = \"#ff0000\";\n\n      let add_button = document.getElementById(\"add-button\");\n      add_button.style.backgroundColor = \"#9e9e9e\";\n    }\n  };\n\n  return (\n    <div>\n      <ButtonGroup size=\"large\" variant=\"contained\">\n        <Button\n          id=\"add-button\"\n          color=\"primary\"\n          text=\"white\"\n          onClick={() => {\n            setDeploy(true);\n            changeStyles(true);\n          }}\n        >\n          Deploy Liquidity\n        </Button>\n\n        <Button\n          id=\"remove-button\"\n          color=\"secondary\"\n          text=\"white\"\n          onClick={() => {\n            setDeploy(false);\n            changeStyles(false);\n          }}\n        >\n          Remove Liquidity\n        </Button>\n      </ButtonGroup>\n    </div>\n  );\n}\n","import { Contract, ethers } from \"ethers\";\nimport { fetchReserves, getDecimals } from \"../ethereumFunctions\";\n\nconst ERC20 = require(\"../build/ERC20.json\");\nconst PAIR = require(\"../build/IUniswapV2Pair.json\");\n\n// Function used to add Liquidity to any pair of tokens or token-AUT\n// To work correctly, there needs to be 9 arguments:\n//    `address1` - An Ethereum address of the coin to add from (either a token or AUT)\n//    `address2` - An Ethereum address of the coin to add to (either a token or AUT)\n//    `amount1` - A float or similar number representing the value of address1's coin to add\n//    `amount2` - A float or similar number representing the value of address2's coin to add\n//    `amount1Min` - A float or similar number representing the minimum of address1's coin to add\n//    `amount2Min` - A float or similar number representing the minimum of address2's coin to add\n//    `routerContract` - The router contract to carry out this trade\n//    `accountAddress` - An Ethereum address of the current user's account\n//    `provider` - The current provider\n//    `signer` - The current signer\nexport async function addLiquidity(\n  address1,\n  address2,\n  amount1,\n  amount2,\n  amount1min,\n  amount2min,\n  routerContract,\n  account,\n  signer\n) {\n  const token1 = new Contract(address1, ERC20.abi, signer);\n  const token2 = new Contract(address2, ERC20.abi, signer);\n\n  const token1Decimals = await getDecimals(token1);\n  const token2Decimals = await getDecimals(token2);\n\n  const amountIn1 = ethers.utils.parseUnits(amount1, token1Decimals);\n  const amountIn2 = ethers.utils.parseUnits(amount2, token2Decimals);\n\n  const amount1Min = ethers.utils.parseUnits(amount1min, token1Decimals);\n  const amount2Min = ethers.utils.parseUnits(amount2min, token2Decimals);\n\n  const time = Math.floor(Date.now() / 1000) + 200000;\n  const deadline = ethers.BigNumber.from(time);\n\n  await token1.approve(routerContract.address, amountIn1);\n  await token2.approve(routerContract.address, amountIn2);\n\n  const wethAddress = await routerContract.WETH();\n\n  console.log([\n    address1,\n    address2,\n    amountIn1,\n    amountIn2,\n    amount1Min,\n    amount2Min,\n    account,\n    deadline,\n  ]);\n\n  if (address1 === wethAddress) {\n    // Eth + Token\n    await routerContract.addLiquidityETH(\n      address2,\n      amountIn2,\n      amount2Min,\n      amount1Min,\n      account,\n      deadline,\n      { value: amountIn1 }\n    );\n  } else if (address2 === wethAddress) {\n    // Token + Eth\n    await routerContract.addLiquidityETH(\n      address1,\n      amountIn1,\n      amount1Min,\n      amount2Min,\n      account,\n      deadline,\n      { value: amountIn2 }\n    );\n  } else {\n    // Token + Token\n    await routerContract.addLiquidity(\n      address1,\n      address2,\n      amountIn1,\n      amountIn2,\n      amount1Min,\n      amount2Min,\n      account,\n      deadline\n    );\n  }\n}\n\n// Function used to remove Liquidity from any pair of tokens or token-AUT\n// To work correctly, there needs to be 9 arguments:\n//    `address1` - An Ethereum address of the coin to recieve (either a token or AUT)\n//    `address2` - An Ethereum address of the coin to recieve (either a token or AUT)\n//    `liquidity_tokens` - A float or similar number representing the value of liquidity tokens you will burn to get tokens back\n//    `amount1Min` - A float or similar number representing the minimum of address1's coin to recieve\n//    `amount2Min` - A float or similar number representing the minimum of address2's coin to recieve\n//    `routerContract` - The router contract to carry out this trade\n//    `accountAddress` - An Ethereum address of the current user's account\n//    `provider` - The current provider\n//    `signer` - The current signer\nexport async function removeLiquidity(\n  address1,\n  address2,\n  liquidity_tokens,\n  amount1min,\n  amount2min,\n  routerContract,\n  account,\n  signer,\n  factory\n) {\n  const token1 = new Contract(address1, ERC20.abi, signer);\n  const token2 = new Contract(address2, ERC20.abi, signer);\n\n  const token1Decimals = await getDecimals(token1);\n  const token2Decimals = await getDecimals(token2);\n\n  const Getliquidity = (liquidity_tokens)=>{\n    if (liquidity_tokens < 0.001){\n      return ethers.BigNumber.from(liquidity_tokens*10**18);\n    }\n    return ethers.utils.parseUnits(String(liquidity_tokens), 18);\n  }\n\n  const liquidity = Getliquidity(liquidity_tokens);\n  console.log('liquidity: ', liquidity);\n\n  const amount1Min = ethers.utils.parseUnits(String(amount1min), token1Decimals);\n  const amount2Min = ethers.utils.parseUnits(String(amount2min), token2Decimals);\n\n  const time = Math.floor(Date.now() / 1000) + 200000;\n  const deadline = ethers.BigNumber.from(time);\n\n  const wethAddress = await routerContract.WETH();\n  const pairAddress = await factory.getPair(address1, address2);\n  const pair = new Contract(pairAddress, PAIR.abi, signer);\n\n  await pair.approve(routerContract.address, liquidity);\n\n  console.log([\n    address1,\n    address2,\n    Number(liquidity),\n    Number(amount1Min),\n    Number(amount2Min),\n    account,\n    deadline,\n  ]);\n\n  if (address1 === wethAddress) {\n    // Eth + Token\n    await routerContract.removeLiquidityETH(\n      address2,\n      liquidity,\n      amount2Min,\n      amount1Min,\n      account,\n      deadline\n    );\n  } else if (address2 === wethAddress) {\n    // Token + Eth\n    await routerContract.removeLiquidityETH(\n      address1,\n      liquidity,\n      amount1Min,\n      amount2Min,\n      account,\n      deadline\n    );\n  } else {\n    // Token + Token\n    await routerContract.removeLiquidity(\n      address1,\n      address2,\n      liquidity,\n      amount1Min,\n      amount2Min,\n      account,\n      deadline\n    );\n  }\n}\n\nconst quote = (amount1, reserve1, reserve2) => {\n  const amount2 = amount1 * (reserve2 / reserve1);\n  return [amount2];\n};\n\n// Function used to get a quote of the liquidity addition\n//    `address1` - An Ethereum address of the coin to recieve (either a token or AUT)\n//    `address2` - An Ethereum address of the coin to recieve (either a token or AUT)\n//    `amountA_desired` - The prefered value of the first token that the user would like to deploy as liquidity\n//    `amountB_desired` - The prefered value of the second token that the user would like to deploy as liquidity\n//    `factory` - The current factory\n//    `signer` - The current signer\n\nasync function quoteMintLiquidity(\n  address1,\n  address2,\n  amountA,\n  amountB,\n  factory,\n  signer\n){\n  const MINIMUM_LIQUIDITY = 1000;\n  let _reserveA = 0;\n  let _reserveB = 0;\n  let totalSupply = 0;\n  [_reserveA, _reserveB, totalSupply] = await factory.getPair(address1, address2).then(async (pairAddress) => {\n    if (pairAddress !== '0x0000000000000000000000000000000000000000'){\n      const pair = new Contract(pairAddress, PAIR.abi, signer);\n\n      const reservesRaw = await fetchReserves(address1, address2, pair, signer); // Returns the reserves already formated as ethers\n      const reserveA = reservesRaw[0];\n      const reserveB = reservesRaw[1];\n    \n      const _totalSupply = await pair.totalSupply();\n      const totalSupply = Number(ethers.utils.formatEther(_totalSupply));\n      return [reserveA, reserveB, totalSupply]\n    } else {\n      return [0,0,0]\n    }\n  });\n\n  const token1 = new Contract(address1, ERC20.abi, signer);\n  const token2 = new Contract(address2, ERC20.abi, signer);\n\n  // Need to do all this decimals work to account for 0 decimal numbers\n\n  const token1Decimals = await getDecimals(token1);\n  const token2Decimals = await getDecimals(token2);\n\n  const valueA = amountA*(10**token1Decimals);\n  const valueB = amountB*(10**token2Decimals);\n\n  const reserveA = _reserveA*(10**token1Decimals);\n  const reserveB = _reserveB*(10**token2Decimals);\n\n  if (totalSupply == 0){\n    return Math.sqrt(((valueA * valueB)-MINIMUM_LIQUIDITY))*10**(-18);\n  };\n  \n  return (\n    Math.min(valueA*totalSupply/reserveA, valueB*totalSupply/reserveB)\n  );\n};\n\nexport async function quoteAddLiquidity(\n  address1,\n  address2,\n  amountADesired,\n  amountBDesired,\n  factory,\n  signer\n) {\n\n  const pairAddress = await factory.getPair(address1, address2);\n  const pair = new Contract(pairAddress, PAIR.abi, signer);\n\n  const reservesRaw = await fetchReserves(address1, address2, pair, signer); // Returns the reserves already formated as ethers\n  const reserveA = reservesRaw[0];\n  const reserveB = reservesRaw[1];\n\n  if (reserveA === 0 && reserveB === 0) {\n    const amountOut = await quoteMintLiquidity(\n      address1,\n      address2,\n      amountADesired,\n      amountBDesired,\n      factory,\n      signer);\n    return [\n      amountADesired,\n      amountBDesired,\n      amountOut.toPrecision(8),\n    ];\n  } else {\n    const amountBOptimal = quote(amountADesired, reserveA, reserveB);\n    if (amountBOptimal <= amountBDesired) {\n      const amountOut = await quoteMintLiquidity(\n        address1,\n        address2,\n        amountADesired,\n        amountBOptimal,\n        factory,\n        signer);\n      return [\n        amountADesired,\n        amountBOptimal,\n        amountOut.toPrecision(8),\n      ];\n    } else {\n      const amountAOptimal = quote(\n        amountBDesired,\n        reserveB,\n        reserveA\n      );\n      const amountOut = await quoteMintLiquidity(\n        address1,\n        address2,\n        amountAOptimal,\n        amountBDesired,\n        factory,\n        signer);\n      return [\n        amountAOptimal,\n        amountBDesired,\n        amountOut.toPrecision(8),\n      ];\n    }\n  }\n}\n\n// Function used to get a quote of the liquidity removal\n//    `address1` - An Ethereum address of the coin to recieve (either a token or AUT)\n//    `address2` - An Ethereum address of the coin to recieve (either a token or AUT)\n//    `liquidity` - The amount of liquidity tokens the user will burn to get their tokens back\n//    `factory` - The current factory\n//    `signer` - The current signer\n\nexport async function quoteRemoveLiquidity(\n  address1,\n  address2,\n  liquidity,\n  factory,\n  signer\n) {\n  const pairAddress = await factory.getPair(address1, address2);\n  console.log(\"pair address\", pairAddress);\n  const pair = new Contract(pairAddress, PAIR.abi, signer);\n\n  const reservesRaw = await fetchReserves(address1, address2, pair, signer); // Returns the reserves already formated as ethers\n  const reserveA = reservesRaw[0];\n  const reserveB = reservesRaw[1];\n\n  const feeOn =\n    (await factory.feeTo()) !== 0x0000000000000000000000000000000000000000;\n\n  const _kLast = await pair.kLast();\n  const kLast = Number(ethers.utils.formatEther(_kLast));\n\n  const _totalSupply = await pair.totalSupply();\n  let totalSupply = Number(ethers.utils.formatEther(_totalSupply));\n\n  if (feeOn && kLast > 0) {\n    const feeLiquidity =\n      (totalSupply * (Math.sqrt(reserveA * reserveB) - Math.sqrt(kLast))) /\n      (5 * Math.sqrt(reserveA * reserveB) + Math.sqrt(kLast));\n    totalSupply = totalSupply + feeLiquidity;\n  }\n\n  const Aout = (reserveA * liquidity) / totalSupply;\n  const Bout = (reserveB * liquidity) / totalSupply;\n\n  return [liquidity, Aout, Bout];\n}\n","import React, { useEffect } from \"react\";\nimport { Grid, makeStyles, Paper, Typography } from \"@material-ui/core\";\nimport AccountBalanceIcon from \"@material-ui/icons/AccountBalance\";\nimport { useSnackbar } from \"notistack\";\nimport {\n  getAccount,\n  getFactory,\n  getProvider,\n  getRouter,\n  getSigner,\n  getBalanceAndSymbol,\n  getWeth,\n  getReserves,\n  getNetwork\n} from \"../ethereumFunctions\";\n\nimport { addLiquidity, quoteAddLiquidity } from \"./LiquidityFunctions\";\n\nimport CoinField from \"../CoinSwapper/CoinField\";\nimport CoinDialog from \"../CoinSwapper/CoinDialog\";\nimport LoadingButton from \"../Components/LoadingButton\";\nimport WrongNetwork from \"../Components/wrongNetwork\";\nimport COINS from \"../constants/coins\";\nimport * as chains from \"../constants/chains\";\n\nconst styles = (theme) => ({\n  paperContainer: {\n    borderRadius: theme.spacing(2),\n    padding: theme.spacing(2),\n    paddingBottom: theme.spacing(3),\n    width: \"40%\",\n    overflow: \"wrap\",\n    background: \"linear-gradient(45deg, #ff0000 30%, #FF8E53 90%)\",\n    color: \"white\",\n  },\n  fullWidth: {\n    width: \"100%\",\n  },\n  values: {\n    width: \"50%\",\n  },\n  title: {\n    textAlign: \"center\",\n    padding: theme.spacing(0.5),\n    marginBottom: theme.spacing(1),\n  },\n  hr: {\n    width: \"100%\",\n  },\n  balance: {\n    padding: theme.spacing(1),\n    overflow: \"wrap\",\n    textAlign: \"center\",\n  },\n  buttonIcon: {\n    marginRight: theme.spacing(1),\n    padding: theme.spacing(0.4),\n  },\n});\n\nconst useStyles = makeStyles(styles);\n\nfunction LiquidityDeployer(props) {\n  const classes = useStyles();\n  const { enqueueSnackbar } = useSnackbar();\n\n  // Stores information for the Autonity Network\n  const [provider, setProvider] = React.useState(getProvider());\n  const [signer, setSigner] = React.useState(getSigner(provider));\n\n  // The following are populated in a react hook\n  const [account, setAccount] = React.useState(undefined);\n  const [chainId, setChainId] = React.useState(undefined);\n  const [router, setRouter] = React.useState(undefined);\n  const [weth, setWeth] = React.useState(undefined);\n  const [factory, setFactory] = React.useState(undefined);\n\n  // Stores a record of whether their respective dialog window is open\n  const [dialog1Open, setDialog1Open] = React.useState(false);\n  const [dialog2Open, setDialog2Open] = React.useState(false);\n  const [wrongNetworkOpen, setwrongNetworkOpen] = React.useState(false);\n\n  // Stores data about their respective coin\n  const [coin1, setCoin1] = React.useState({\n    address: undefined,\n    symbol: undefined,\n    balance: undefined,\n  });\n  const [coin2, setCoin2] = React.useState({\n    address: undefined,\n    symbol: undefined,\n    balance: undefined,\n  });\n\n  const [coins, setCoins] = React.useState([]);\n\n  // Stores the current reserves in the liquidity pool between coin1 and coin2\n  const [reserves, setReserves] = React.useState([\"0.0\", \"0.0\"]);\n\n  // Stores the current value of their respective text box\n  const [field1Value, setField1Value] = React.useState(\"\");\n  const [field2Value, setField2Value] = React.useState(\"\");\n\n  // Controls the loading button\n  const [loading, setLoading] = React.useState(false);\n\n  // Stores the user's balance of liquidity tokens for the current pair\n  const [liquidityTokens, setLiquidityTokens] = React.useState(\"\");\n\n  // Used when getting a quote of liquidity\n  const [liquidityOut, setLiquidityOut] = React.useState([0, 0, 0]);\n\n  // Switches the top and bottom coins, this is called when users hit the swap button or select the opposite\n  // token in the dialog (e.g. if coin1 is TokenA and the user selects TokenB when choosing coin2)\n  const switchFields = () => {\n    let oldField1Value = field1Value;\n    let oldField2Value = field2Value;\n\n    setCoin1(coin2);\n    setCoin2(coin1);\n    setField1Value(oldField2Value);\n    setField2Value(oldField1Value);\n    setReserves(reserves.reverse());\n  };\n\n  // These functions take an HTML event, pull the data out and puts it into a state variable.\n  const handleChange = {\n    field1: (e) => {\n      setField1Value(e.target.value);\n    },\n    field2: (e) => {\n      setField2Value(e.target.value);\n    },\n  };\n\n  // Turns the account's balance into something nice and readable\n  const formatBalance = (balance, symbol) => {\n    if (balance && symbol)\n      return parseFloat(balance).toPrecision(8) + \" \" + symbol;\n    else return \"0.0\";\n  };\n\n  // Turns the coin's reserves into something nice and readable\n  const formatReserve = (reserve, symbol) => {\n    if (reserve && symbol) return reserve + \" \" + symbol;\n    else return \"0.0\";\n  };\n\n  // Determines whether the button should be enabled or not\n  const isButtonEnabled = () => {\n\n    // If both coins have been selected, and a valid float has been entered for both, which are less than the user's balances, then return true\n    const parsedInput1 = parseFloat(field1Value);\n    const parsedInput2 = parseFloat(field2Value);\n    return (\n      coin1.address &&\n      coin2.address &&\n      parsedInput1 !== NaN &&\n      0 < parsedInput1 &&\n      parsedInput2 !== NaN &&\n      0 < parsedInput2 &&\n      parsedInput1 <= coin1.balance &&\n      parsedInput2 <= coin2.balance\n    );\n  };\n\n\n\n  const deploy = () => {\n    console.log(\"Attempting to deploy liquidity...\");\n    setLoading(true);\n\n    addLiquidity(\n      coin1.address,\n      coin2.address,\n      field1Value,\n      field2Value,\n      '0',\n      '0',\n      router,\n      account,\n      signer\n    )\n      .then(() => {\n        setLoading(false);\n\n        // If the transaction was successful, we clear to input to make sure the user doesn't accidental redo the transfer\n        setField1Value(\"\");\n        setField2Value(\"\");\n        enqueueSnackbar(\"Deployment Successful\", { variant: \"success\" });\n      })\n      .catch((e) => {\n        setLoading(false);\n        enqueueSnackbar(\"Deployment Failed (\" + e.message + \")\", {\n          variant: \"error\",\n          autoHideDuration: 10000,\n        });\n      });\n  };\n\n  // Called when the dialog window for coin1 exits\n  const onToken1Selected = (address) => {\n    // Close the dialog window\n    setDialog1Open(false);\n\n    // If the user inputs the same token, we want to switch the data in the fields\n    if (address === coin2.address) {\n      switchFields();\n    }\n    // We only update the values if the user provides a token\n    else if (address) {\n      // Getting some token data is async, so we need to wait for the data to return, hence the promise\n      getBalanceAndSymbol(account, address, provider, signer, weth.address, coins).then((data) => {\n        setCoin1({\n          address: address,\n          symbol: data.symbol,\n          balance: data.balance,\n        });\n      });\n    }\n  };\n\n  // Called when the dialog window for coin2 exits\n  const onToken2Selected = (address) => {\n    // Close the dialog window\n    setDialog2Open(false);\n\n    // If the user inputs the same token, we want to switch the data in the fields\n    if (address === coin1.address) {\n      switchFields();\n    }\n    // We only update the values if the user provides a token\n    else if (address) {\n      // Getting some token data is async, so we need to wait for the data to return, hence the promise\n      getBalanceAndSymbol(account, address, provider, signer, weth.address, coins).then((data) => {\n        setCoin2({\n          address: address,\n          symbol: data.symbol,\n          balance: data.balance,\n        });\n      });\n    }\n  };\n\n  // This hook is called when either of the state variables `coin1.address` or `coin2.address` change.\n  // This means that when the user selects a different coin to convert between, or the coins are swapped,\n  // the new reserves will be calculated.\n  useEffect(() => {\n    console.log(\n      \"Trying to get reserves between:\\n\" + coin1.address + \"\\n\" + coin2.address\n    );\n\n    if (coin1.address && coin2.address && account) {\n      getReserves(coin1.address, coin2.address, factory, signer, account).then(\n        (data) => {\n          setReserves([data[0], data[1]]);\n          setLiquidityTokens(data[2]);\n        }\n      );\n    }\n  }, [coin1.address, coin2.address, account, factory, signer]);\n\n  // This hook is called when either of the state variables `field1Value`, `field2Value`, `coin1.address` or `coin2.address` change.\n  // It will give a preview of the liquidity deployment.\n  useEffect(() => {\n    if (isButtonEnabled()) {\n      console.log(\"Trying to preview the liquidity deployment\");\n\n      quoteAddLiquidity(\n        coin1.address,\n        coin2.address,\n        field1Value,\n        field2Value,\n        factory,\n        signer\n      ).then((data) => {\n        // console.log(data);\n        console.log(\"TokenA in: \", data[0]);\n        console.log(\"TokenB in: \", data[1]);\n        console.log(\"Liquidity out: \", data[2]);\n        setLiquidityOut([data[0], data[1], data[2]]);\n      });\n    }\n  }, [coin1.address, coin2.address, field1Value, field2Value, factory, signer]);\n\n  // This hook creates a timeout that will run every ~10 seconds, it's role is to check if the user's balance has\n  // updated has changed. This allows them to see when a transaction completes by looking at the balance output.\n  useEffect(() => {\n    const coinTimeout = setTimeout(() => {\n      console.log(\"Checking balances & Getting reserves...\");\n\n      if (coin1.address && coin2.address && account) {\n        getReserves(\n          coin1.address,\n          coin2.address,\n          factory,\n          signer,\n          account\n        ).then((data) => {\n          setReserves([data[0], data[1]]);\n          setLiquidityTokens(data[2]);\n        });\n      }\n\n      if (coin1.address && account &&!wrongNetworkOpen) {\n        getBalanceAndSymbol(account, coin1.address, provider, signer, weth.address, coins).then(\n          (data) => {\n            setCoin1({\n              ...coin1,\n              balance: data.balance,\n            });\n          }\n        );\n      }\n      if (coin2.address && account &&!wrongNetworkOpen) {\n        getBalanceAndSymbol(account, coin2.address, provider, signer, weth.address, coins).then(\n          (data) => {\n            setCoin2({\n              ...coin2,\n              balance: data.balance,\n            });\n          }\n        );\n      }\n    }, 10000);\n\n    return () => clearTimeout(coinTimeout);\n  });\n\n  // This hook will run when the component first mounts, it can be useful to put logic to populate variables here\n  useEffect(() => {\n    \n    getAccount().then((account) => {\n      setAccount(account);\n    });\n\n    async function Network() {\n      const chainId = await getNetwork(provider).then((chainId) => {\n        setChainId(chainId);\n        return chainId;\n      });\n\n      if (chains.networks.includes(chainId)){\n        setwrongNetworkOpen(false);\n        console.log('chainID: ', chainId);\n        // Get the router using the chainID\n        const router = await getRouter (chains.routerAddress.get(chainId), signer)\n        setRouter(router);\n        // Get Weth address from router\n        await router.WETH().then((wethAddress) => {\n          setWeth(getWeth (wethAddress, signer));\n          // Set the value of the weth address in the default coins array\n          const coins = COINS.get(chainId);\n          coins[0].address = wethAddress;\n          setCoins(coins);\n        });\n        // Get the factory address from the router\n        await router.factory().then((factory_address) => {\n          setFactory(getFactory (factory_address, signer));\n        })\n      } else {\n        console.log('Wrong network mate.');\n        setwrongNetworkOpen(true);\n      }\n    }\n\n    Network()\n\n  }, []);\n\n  return (\n    <div>\n      {/* Liquidity deployer */}\n      <Typography variant=\"h5\" className={classes.title}></Typography>\n\n      {/* Dialog Windows */}\n      <CoinDialog\n        open={dialog1Open}\n        onClose={onToken1Selected}\n        coins={coins}\n        signer={signer}\n      />\n      <CoinDialog\n        open={dialog2Open}\n        onClose={onToken2Selected}\n        coins={coins}\n        signer={signer}\n      />\n      <WrongNetwork\n        open={wrongNetworkOpen}\n      />\n\n      <Grid container direction=\"column\" alignItems=\"center\" spacing={2}>\n        <Grid item xs={12} className={classes.fullWidth}>\n          <CoinField\n            activeField={true}\n            value={field1Value}\n            onClick={() => setDialog1Open(true)}\n            onChange={handleChange.field1}\n            symbol={coin1.symbol !== undefined ? coin1.symbol : \"Select\"}\n          />\n        </Grid>\n\n        <Grid item xs={12} className={classes.fullWidth}>\n          <CoinField\n            activeField={true}\n            value={field2Value}\n            onClick={() => setDialog2Open(true)}\n            onChange={handleChange.field2}\n            symbol={coin2.symbol !== undefined ? coin2.symbol : \"Select\"}\n          />\n        </Grid>\n      </Grid>\n\n      <Grid\n        container\n        direction=\"row\"\n        alignItems=\"center\"\n        justifyContent=\"center\"\n        spacing={4}\n        className={classes.balance}\n      >\n        <hr className={classes.hr} />\n        <Grid\n          container\n          item\n          className={classes.values}\n          direction=\"column\"\n          alignItems=\"center\"\n          spacing={2}\n        >\n          {/* Balance Display */}\n          <Typography variant=\"h6\">Your Balances</Typography>\n          <Grid container direction=\"row\" justifyContent=\"space-between\">\n            <Grid item xs={6}>\n              <Typography variant=\"body1\" className={classes.balance}>\n                {formatBalance(coin1.balance, coin1.symbol)}\n              </Typography>\n            </Grid>\n            <Grid item xs={6}>\n              <Typography variant=\"body1\" className={classes.balance}>\n                {formatBalance(coin2.balance, coin2.symbol)}\n              </Typography>\n            </Grid>\n          </Grid>\n\n          <hr className={classes.hr} />\n\n          {/* Reserves Display */}\n          <Typography variant=\"h6\">Reserves</Typography>\n          <Grid container direction=\"row\" justifyContent=\"space-between\">\n            <Grid item xs={6}>\n              <Typography variant=\"body1\" className={classes.balance}>\n                {formatReserve(reserves[0], coin1.symbol)}\n              </Typography>\n            </Grid>\n            <Grid item xs={6}>\n              <Typography variant=\"body1\" className={classes.balance}>\n                {formatReserve(reserves[1], coin2.symbol)}\n              </Typography>\n            </Grid>\n          </Grid>\n\n          <hr className={classes.hr} />\n\n          {/* Liquidity Tokens Display */}\n          <Typography variant=\"h6\">Your Liquidity Pool Tokens</Typography>\n          <Grid container direction=\"row\" justifyContent=\"center\">\n            <Grid item xs={6}>\n              <Typography variant=\"body1\" className={classes.balance}>\n                {formatReserve(liquidityTokens, \"UNI-V2\")}\n              </Typography>\n            </Grid>\n          </Grid>\n        </Grid>\n        <Paper className={classes.paperContainer}>\n          {/*Red  Display to show the quote */}\n          <Grid\n            container\n            item\n            direction=\"column\"\n            alignItems=\"center\"\n            spacing={2}\n            className={classes.fullWidth}\n          >\n            {/* Tokens in */}\n            <Typography variant=\"h6\">Tokens in</Typography>\n            <Grid container direction=\"row\" justifyContent=\"space-between\">\n              <Grid item xs={6}>\n                <Typography variant=\"body1\" className={classes.balance}>\n                  {formatBalance(liquidityOut[0], coin1.symbol)}\n                </Typography>\n              </Grid>\n              <Grid item xs={6}>\n                <Typography variant=\"body1\" className={classes.balance}>\n                  {formatBalance(liquidityOut[1], coin2.symbol)}\n                </Typography>\n              </Grid>\n            </Grid>\n\n            <hr className={classes.hr} />\n\n            {/* Liquidity Tokens Display */}\n            <Typography variant=\"h6\">Liquidity Pool Tokens Out</Typography>\n            <Grid container direction=\"row\" justifyContent=\"center\">\n              <Grid item xs={6}>\n                <Typography variant=\"body1\" className={classes.balance}>\n                  {formatReserve(liquidityOut[2], \"UNI-V2\")}\n                </Typography>\n              </Grid>\n            </Grid>\n          </Grid>\n        </Paper>\n\n        <hr className={classes.hr} />\n      </Grid>\n      <Grid container direction=\"column\" alignItems=\"center\" spacing={2}>\n        <LoadingButton\n          loading={loading}\n          valid={isButtonEnabled()}\n          success={false}\n          fail={false}\n          onClick={deploy}\n        >\n          <AccountBalanceIcon className={classes.buttonIcon} />\n          Deploy\n        </LoadingButton>\n      </Grid>\n    </div>\n  );\n}\n\nexport default LiquidityDeployer;\n","import React, { useEffect } from \"react\";\nimport { Grid, makeStyles, Paper, Typography } from \"@material-ui/core\";\nimport ArrowDownwardIcon from \"@material-ui/icons/ArrowDownward\";\nimport { useSnackbar } from \"notistack\";\nimport {\n  getAccount,\n  getFactory,\n  getProvider,\n  getRouter,\n  getSigner,\n  getBalanceAndSymbol,\n  getWeth,\n  getReserves,\n  getNetwork\n} from \"../ethereumFunctions\";\nimport { removeLiquidity, quoteRemoveLiquidity } from \"./LiquidityFunctions\";\nimport {\n  RemoveLiquidityField1,\n  RemoveLiquidityField2,\n} from \"../CoinSwapper/CoinField\";\nimport CoinDialog from \"../CoinSwapper/CoinDialog\";\nimport LoadingButton from \"../Components/LoadingButton\";\nimport WrongNetwork from \"../Components/wrongNetwork\";\nimport COINS from \"../constants/coins\";\nimport * as chains from \"../constants/chains\";\n\nconst styles = (theme) => ({\n  paperContainer: {\n    borderRadius: theme.spacing(2),\n    padding: theme.spacing(2),\n    paddingBottom: theme.spacing(3),\n    width: \"40%\",\n    overflow: \"wrap\",\n    background: \"linear-gradient(45deg, #ff0000 30%, #FF8E53 90%)\",\n    color: \"white\",\n  },\n  fullWidth: {\n    width: \"100%\",\n  },\n  values: {\n    width: \"50%\",\n  },\n  title: {\n    textAlign: \"center\",\n    padding: theme.spacing(0.5),\n    marginBottom: theme.spacing(1),\n  },\n  hr: {\n    width: \"100%\",\n  },\n  balance: {\n    padding: theme.spacing(1),\n    overflow: \"wrap\",\n    textAlign: \"center\",\n  },\n  buttonIcon: {\n    marginRight: theme.spacing(1),\n    padding: theme.spacing(0.4),\n  },\n});\n\nconst useStyles = makeStyles(styles);\n\nfunction LiquidityRemover(props) {\n  const classes = useStyles();\n  const { enqueueSnackbar } = useSnackbar();\n\n  // Stores information for the Autonity Network\n  const [provider, setProvider] = React.useState(getProvider());\n  const [signer, setSigner] = React.useState(getSigner(provider));\n\n  // The following are populated in a react hook\n  const [account, setAccount] = React.useState(undefined);\n  const [chainId, setChainId] = React.useState(undefined);\n  const [router, setRouter] = React.useState(undefined);\n  const [weth, setWeth] = React.useState(undefined);\n  const [factory, setFactory] = React.useState(undefined);\n\n  // Stores a record of whether their respective dialog window is open\n  const [dialog1Open, setDialog1Open] = React.useState(false);\n  const [dialog2Open, setDialog2Open] = React.useState(false);\n  const [wrongNetworkOpen, setwrongNetworkOpen] = React.useState(false);\n\n\n  // Stores data about their respective coin\n  const [coin1, setCoin1] = React.useState({\n    address: undefined,\n    symbol: undefined,\n    balance: undefined,\n  });\n  const [coin2, setCoin2] = React.useState({\n    address: undefined,\n    symbol: undefined,\n    balance: undefined,\n  });\n\n  const [coins, setCoins] = React.useState([]);\n\n  // Stores the current reserves in the liquidity pool between coin1 and coin2\n  const [reserves, setReserves] = React.useState([\"0.0\", \"0.0\"]);\n\n  // Stores the current value of their respective text box\n  const [field1Value, setField1Value] = React.useState(\"\");\n\n  // Controls the loading button\n  const [loading, setLoading] = React.useState(false);\n\n  // Stores the liquidity tokens balance of the user\n  const [liquidityTokens, setLiquidityTokens] = React.useState(\"\");\n\n  // Stores the input and output for the liquidity removal preview\n  const [tokensOut, setTokensOut] = React.useState([0, 0, 0]);\n\n  // Switches the top and bottom coins, this is called when users hit the swap button or select the opposite\n  // token in the dialog (e.g. if coin1 is TokenA and the user selects TokenB when choosing coin2)\n  const switchFields = () => {\n    setCoin1(coin2);\n    setCoin2(coin1);\n    setReserves(reserves.reverse());\n  };\n\n  // These functions take an HTML event, pull the data out and puts it into a state variable.\n  const handleChange = {\n    field1: (e) => {\n      setField1Value(e.target.value);\n    },\n  };\n\n  // Turns the account's balance into something nice and readable\n  const formatBalance = (balance, symbol) => {\n    if (balance && symbol)\n      return parseFloat(balance).toPrecision(8) + \" \" + symbol;\n    else return \"0.0\";\n  };\n\n  // Turns the coin's reserves into something nice and readable\n  const formatReserve = (reserve, symbol) => {\n    if (reserve && symbol) return reserve + \" \" + symbol;\n    else return \"0.0\";\n  };\n\n  // Determines whether the button should be enabled or not\n  const isButtonEnabled = () => {\n\n    // If both coins have been selected, and a valid float has been entered for both, which are less than the user's balances, then return true\n    const parsedInput = parseFloat(field1Value);\n    return (\n      coin1.address &&\n      coin2.address &&\n      parsedInput !== NaN &&\n      0 < parsedInput &&\n      parsedInput <= liquidityTokens\n    );\n  };\n\n  const remove = () => {\n    console.log(\"Attempting to remove liquidity...\");\n    setLoading(true);\n\n    removeLiquidity(\n      coin1.address,\n      coin2.address,\n      field1Value,\n      0,\n      0,\n      router,\n      account,\n      signer,\n      factory\n    )\n      .then(() => {\n        setLoading(false);\n\n        // If the transaction was successful, we clear to input to make sure the user doesn't accidental redo the transfer\n        setField1Value(\"\");\n        enqueueSnackbar(\"Removal Successful\", { variant: \"success\" });\n      })\n      .catch((e) => {\n        setLoading(false);\n        enqueueSnackbar(\"Deployment Failed (\" + e.message + \")\", {\n          variant: \"error\",\n          autoHideDuration: 10000,\n        });\n      });\n  };\n\n  // Called when the dialog window for coin1 exits\n  const onToken1Selected = (address) => {\n    // Close the dialog window\n    setDialog1Open(false);\n\n    // If the user inputs the same token, we want to switch the data in the fields\n    if (address === coin2.address) {\n      switchFields();\n    }\n    // We only update the values if the user provides a token\n    else if (address) {\n      // Getting some token data is async, so we need to wait for the data to return, hence the promise\n      getBalanceAndSymbol(account, address, provider, signer, weth.address, coins).then((data) => {\n        setCoin1({\n          address: address,\n          symbol: data.symbol,\n          balance: data.balance,\n        });\n      });\n    }\n  };\n\n  // Called when the dialog window for coin2 exits\n  const onToken2Selected = (address) => {\n    // Close the dialog window\n    setDialog2Open(false);\n\n    // If the user inputs the same token, we want to switch the data in the fields\n    if (address === coin1.address) {\n      switchFields();\n    }\n    // We only update the values if the user provides a token\n    else if (address) {\n      // Getting some token data is async, so we need to wait for the data to return, hence the promise\n      getBalanceAndSymbol(account, address, provider, signer, weth.address, coins).then((data) => {\n        setCoin2({\n          address: address,\n          symbol: data.symbol,\n          balance: data.balance,\n        });\n      });\n    }\n  };\n\n  // This hook is called when either of the state variables `coin1.address` or `coin2.address` change.\n  // This means that when the user selects a different coin to convert between, or the coins are swapped,\n  // the new reserves will be calculated.\n  useEffect(() => {\n    console.log(\n      \"Trying to get reserves between:\\n\" + coin1.address + \"\\n\" + coin2.address\n    );\n\n    if (coin1.address && coin2.address && account) {\n      getReserves(coin1.address, coin2.address, factory, signer, account).then(\n        (data) => {\n          setReserves([data[0], data[1]]);\n          setLiquidityTokens(data[2]);\n        }\n      );\n    }\n  }, [coin1.address, coin2.address, account, factory, signer]);\n\n  // This hook is called when either of the state variables `field1Value`, `coin1.address` or `coin2.address` change.\n  // It will give a preview of the liquidity removal.\n  useEffect(() => {\n    if (isButtonEnabled()) {\n      console.log(\"Trying to preview the liquidity removal\");\n      quoteRemoveLiquidity(\n        coin1.address,\n        coin2.address,\n        field1Value,\n        factory,\n        signer\n      ).then((data) => {\n        setTokensOut(data);\n      });\n    }\n  }, [coin1.address, coin2.address, field1Value, factory, signer]);\n\n  useEffect(() => {\n    // This hook creates a timeout that will run every ~10 seconds, it's role is to check if the user's balance has\n    // updated has changed. This allows them to see when a transaction completes by looking at the balance output.\n\n    const coinTimeout = setTimeout(() => {\n      console.log(\"Checking balances & Getting reserves...\");\n\n      if (coin1.address && coin2.address && account) {\n        getReserves(\n          coin1.address,\n          coin2.address,\n          factory,\n          signer,\n          account\n        ).then((data) => {\n          setReserves([data[0], data[1]]);\n          setLiquidityTokens(data[2]);\n        });\n      }\n\n      if (coin1.address && account &&!wrongNetworkOpen) {\n        getBalanceAndSymbol(account, coin1.address, provider, signer, weth.address, coins).then(\n          (data) => {\n            setCoin1({\n              ...coin1,\n              balance: data.balance,\n            });\n          }\n        );\n      }\n      if (coin2.address && account &&!wrongNetworkOpen) {\n        getBalanceAndSymbol(account, coin2.address, provider, signer, weth.address, coins).then(\n          (data) => {\n            setCoin2({\n              ...coin2,\n              balance: data.balance,\n            });\n          }\n        );\n      }\n    }, 10000);\n\n    return () => clearTimeout(coinTimeout);\n  });\n\n  useEffect(() => {\n    \n    getAccount().then((account) => {\n      setAccount(account);\n    });\n\n    async function Network() {\n      const chainId = await getNetwork(provider).then((chainId) => {\n        setChainId(chainId);\n        return chainId;\n      });\n\n      if (chains.networks.includes(chainId)){\n        setwrongNetworkOpen(false);\n        console.log('chainID: ', chainId);\n        // Get the router using the chainID\n        const router = await getRouter (chains.routerAddress.get(chainId), signer)\n        setRouter(router);\n        // Get Weth address from router\n        await router.WETH().then((wethAddress) => {\n          setWeth(getWeth (wethAddress, signer));\n          // Set the value of the weth address in the default coins array\n          const coins = COINS.get(chainId);\n          coins[0].address = wethAddress;\n          setCoins(coins);\n        });\n        // Get the factory address from the router\n        await router.factory().then((factory_address) => {\n          setFactory(getFactory (factory_address, signer));\n        })\n      } else {\n        console.log('Wrong network mate.');\n        setwrongNetworkOpen(true);\n      }\n    }\n\n    Network()\n\n  }, []);\n\n  return (\n    <div>\n      {/* Coin Swapper */}\n      <Typography variant=\"h5\" className={classes.title}></Typography>\n\n      {/* Dialog Windows */}\n      <CoinDialog\n        open={dialog1Open}\n        onClose={onToken1Selected}\n        coins={coins}\n        signer={signer}\n      />\n      <CoinDialog\n        open={dialog2Open}\n        onClose={onToken2Selected}\n        coins={coins}\n        signer={signer}\n      />\n      <WrongNetwork\n        open={wrongNetworkOpen}\n      />\n\n      <Grid container direction=\"column\" alignItems=\"center\" spacing={2}>\n        <Grid item xs={12} className={classes.fullWidth}>\n          <RemoveLiquidityField1\n            activeField={true}\n            value={field1Value}\n            onClick={() => setDialog1Open(true)}\n            onChange={handleChange.field1}\n            symbol={coin1.symbol !== undefined ? coin1.symbol : \"Select\"}\n          />\n        </Grid>\n\n        <Grid item xs={12} className={classes.fullWidth}>\n          <RemoveLiquidityField2\n            activeField={true}\n            onClick={() => setDialog2Open(true)}\n            symbol={coin2.symbol !== undefined ? coin2.symbol : \"Select\"}\n          />\n        </Grid>\n      </Grid>\n\n      <Grid\n        container\n        direction=\"row\"\n        alignItems=\"center\"\n        justifyContent=\"center\"\n        spacing={4}\n        className={classes.balance}\n      >\n        <hr className={classes.hr} />\n        <Grid\n          container\n          item\n          className={classes.values}\n          direction=\"column\"\n          alignItems=\"center\"\n          spacing={2}\n        >\n          {/* Balance Display */}\n          <Typography variant=\"h6\">Your Balances</Typography>\n          <Grid container direction=\"row\" justifyContent=\"space-between\">\n            <Grid item xs={6}>\n              <Typography variant=\"body1\" className={classes.balance}>\n                {formatBalance(coin1.balance, coin1.symbol)}\n              </Typography>\n            </Grid>\n            <Grid item xs={6}>\n              <Typography variant=\"body1\" className={classes.balance}>\n                {formatBalance(coin2.balance, coin2.symbol)}\n              </Typography>\n            </Grid>\n          </Grid>\n\n          <hr className={classes.hr} />\n\n          {/* Reserves Display */}\n          <Typography variant=\"h6\">Reserves</Typography>\n          <Grid container direction=\"row\" justifyContent=\"space-between\">\n            <Grid item xs={6}>\n              <Typography variant=\"body1\" className={classes.balance}>\n                {formatReserve(reserves[0], coin1.symbol)}\n              </Typography>\n            </Grid>\n            <Grid item xs={6}>\n              <Typography variant=\"body1\" className={classes.balance}>\n                {formatReserve(reserves[1], coin2.symbol)}\n              </Typography>\n            </Grid>\n          </Grid>\n\n          <hr className={classes.hr} />\n\n          {/* Liquidity Tokens Display */}\n          <Typography variant=\"h6\">Your Liquidity Pool Tokens</Typography>\n          <Grid container direction=\"row\" justifyContent=\"center\">\n            <Grid item xs={6}>\n              <Typography variant=\"body1\" className={classes.balance}>\n                {formatReserve(liquidityTokens, \"UNI-V2\")}\n              </Typography>\n            </Grid>\n          </Grid>\n        </Grid>\n\n        <Paper className={classes.paperContainer}>\n          {/*Red  Display to show the quote */}\n          <Grid\n            container\n            item\n            direction=\"column\"\n            alignItems=\"center\"\n            spacing={2}\n            className={classes.fullWidth}\n          >\n            {/* Tokens in */}\n            <Typography variant=\"h6\">Liquidity Pool Tokens in</Typography>\n            <Grid container direction=\"row\" justifyContent=\"center\">\n              <Grid item xs={6}>\n                <Typography variant=\"body1\" className={classes.balance}>\n                  {formatBalance(tokensOut[0], \"UNI-V2\")}\n                </Typography>\n              </Grid>\n            </Grid>\n\n            <hr className={classes.hr} />\n\n            {/* Liquidity Tokens Display */}\n            <Typography variant=\"h6\">Tokens Out</Typography>\n            <Grid container direction=\"row\" justifyContent=\"space-between\">\n              <Grid item xs={6}>\n                <Typography variant=\"body1\" className={classes.balance}>\n                  {formatBalance(tokensOut[1], coin1.symbol)}\n                </Typography>\n              </Grid>\n              <Grid item xs={6}>\n                <Typography variant=\"body1\" className={classes.balance}>\n                  {formatBalance(tokensOut[2], coin2.symbol)}\n                </Typography>\n              </Grid>\n            </Grid>\n          </Grid>\n        </Paper>\n        <hr className={classes.hr} />\n      </Grid>\n\n      <Grid container direction=\"column\" alignItems=\"center\" spacing={2}>\n        <LoadingButton\n          loading={loading}\n          valid={isButtonEnabled()}\n          success={false}\n          fail={false}\n          onClick={remove}\n        >\n          <ArrowDownwardIcon className={classes.buttonIcon} />\n          Remove\n        </LoadingButton>\n      </Grid>\n    </div>\n  );\n}\n\nexport default LiquidityRemover;\n","import React from \"react\";\nimport {\n  Container,\n  Grid,\n  makeStyles,\n  Paper,\n  Typography,\n} from \"@material-ui/core\";\n\nimport SwitchButton from \"./SwitchButton\";\nimport LiquidityDeployer from \"./LiquidityDeployer\";\nimport LiquidityRemover from \"./RemoveLiquidity\";\n\nconst styles = (theme) => ({\n  paperContainer: {\n    borderRadius: theme.spacing(2),\n    padding: theme.spacing(1),\n    paddingBottom: theme.spacing(3),\n    maxWidth: 700,\n    margin: \"auto\",\n  },\n  title: {\n    textAlign: \"center\",\n    padding: theme.spacing(0.5),\n    marginBottom: theme.spacing(1),\n  },\n  footer: {\n    marginTop: \"155px\",\n  },\n});\n\nconst useStyles = makeStyles(styles);\n\nfunction Liquidity() {\n  const classes = useStyles();\n\n  const [deploy, setDeploy] = React.useState(true);\n\n  const deploy_or_remove = (deploy) => {\n    if (deploy === true) {\n      return <LiquidityDeployer />;\n    }\n    return <LiquidityRemover />;\n  };\n\n  return (\n    <div>\n      <Container>\n        <Paper className={classes.paperContainer}>\n          <Typography variant=\"h5\" className={classes.title}>\n            <SwitchButton setDeploy={setDeploy} />\n          </Typography>\n\n          {deploy_or_remove(deploy)}\n        </Paper>\n      </Container>\n\n      <Grid\n        container\n        className={classes.footer}\n        direction=\"row\"\n        justifyContent=\"center\"\n        alignItems=\"flex-end\"\n      >\n        <p>\n          Alternative Uniswap Interface | Get AUT for use in the bakerloo testnet{\" \"}\n          <a href=\"https://faucet.bakerloo.autonity.network/\">here</a>\n        </p>\n      </Grid>\n    </div>\n  );\n}\n\nexport default Liquidity;\n","import React from \"react\";\nimport {\n  Container,\n  Grid,\n  makeStyles,\n  Paper,\n  Typography,\n} from \"@material-ui/core\";\n\nconst styles = (theme) => ({\n  paperContainer: {\n    borderRadius: theme.spacing(2),\n    padding: theme.spacing(1),\n    paddingBottom: theme.spacing(3),\n    maxWidth: 700,\n    margin: \"auto\",\n    marginTop: \"200px\",\n  },\n  fullWidth: {\n    width: \"100%\",\n  },\n  title: {\n    textAlign: \"center\",\n    padding: theme.spacing(0.5),\n    marginBottom: theme.spacing(1),\n  },\n  hr: {\n    width: \"100%\",\n  },\n  balance: {\n    padding: theme.spacing(1),\n    overflow: \"wrap\",\n    textAlign: \"center\",\n  },\n  buttonIcon: {\n    marginRight: theme.spacing(1),\n    padding: theme.spacing(0.4),\n  },\n  footer: {\n    marginTop: \"155px\",\n  },\n});\n\nconst useStyles = makeStyles(styles);\n\nfunction ConnectWalletPage() {\n  const classes = useStyles();\n  return (\n    <div>\n      <div className=\"Title\">\n        <h1 className=\"navbar-logo\">\n          Alternative Uniswap Interface\n        </h1>\n      </div>\n\n      <Container>\n        <Paper className={classes.paperContainer}>\n          <Typography\n            variant=\"h6\"\n            className={classes.title}\n            color=\"common.white\"\n          >\n            Please connect an Ethereum wallet to your browser to use the\n            application\n          </Typography>\n        </Paper>\n      </Container>\n\n      <Grid\n        container\n        className={classes.footer}\n        direction=\"row\"\n        justifyContent=\"center\"\n        alignItems=\"flex-end\"\n      >\n        <p>\n          Alternative Uniswap Interface | Get AUT for use in the bakerloo testnet{\" \"}\n          <a href=\"https://faucet.bakerloo.autonity.network/\">here</a>\n        </p>\n      </Grid>\n    </div>\n  );\n}\n\nexport default ConnectWalletPage;\n","import React from \"react\";\nimport \"./App.css\";\nimport { ethers } from \"ethers\";\nimport NarBar from \"./NavBar/NavBar\";\nimport CoinSwapper from \"./CoinSwapper/CoinSwapper\";\nimport { Route } from \"react-router-dom\";\nimport { SnackbarProvider } from \"notistack\";\nimport Liquidity from \"./Liquidity/Liquidity\";\nimport ConnectWalletPage from \"./Components/connectWalletPage\";\nimport { createTheme, ThemeProvider } from \"@material-ui/core\";\n\nconst theme = createTheme({\n  palette: {\n    primary: {\n      main: \"#ff0000\",\n      contrastText: \"#ffffff\",\n    },\n    secondary: {\n      main: \"#9e9e9e\",\n      contrastText: \"#ffffff\",\n    },\n  },\n});\n\nfunction App() {\n  // Check if wallet is here:\n  try {\n    const provider = new ethers.providers.Web3Provider(window.ethereum);\n    return (\n      <div className=\"App\">\n        <SnackbarProvider maxSnack={3}>\n          <ThemeProvider theme={theme}>\n            <NarBar />\n            <Route\n              exact\n              path=\"/Alternative-Uniswap-Interface/\"\n              component={CoinSwapper}\n            />\n            <Route\n              exact\n              path=\"/Alternative-Uniswap-Interface/liquidity\"\n              component={Liquidity}\n            />\n          </ThemeProvider>\n        </SnackbarProvider>\n      </div>\n    );\n  } catch (err) {\n    return (\n      <div className=\"App\">\n        <SnackbarProvider maxSnack={3}>\n          <ThemeProvider theme={theme}>\n            <ConnectWalletPage />\n          </ThemeProvider>\n        </SnackbarProvider>\n      </div>\n    );\n  }\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport \"bootstrap/dist/css/bootstrap.css\";\nimport \"./index.css\";\nimport App from \"./App\";\nimport reportWebVitals from \"./reportWebVitals\";\nimport { BrowserRouter } from \"react-router-dom\";\n\nReactDOM.render(\n  <BrowserRouter>\n    <React.StrictMode>\n      <App />\n    </React.StrictMode>\n  </BrowserRouter>,\n\n  document.getElementById(\"root\")\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}